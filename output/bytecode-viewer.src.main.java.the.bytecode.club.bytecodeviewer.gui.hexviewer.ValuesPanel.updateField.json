{
    "original": {
        "method_name": "updateField",
        "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{if (signed) {byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}longTextField.setText(String.valueOf(byteBuffer.getLong()));} else {long longValue=byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24)| ((values[4] & 0xffl) << 32)| ((values[5] & 0xffl) << 40)| ((values[6] & 0xffl) << 48) : (values[7] & 0xffl) | ((values[6] & 0xffl) << 8) | ((values[5] & 0xffl) << 16)| ((values[4] & 0xffl) << 24)| ((values[3] & 0xffl) << 32)| ((values[2] & 0xffl) << 40)| ((values[1] & 0xffl) << 48);BigInteger bigInt1=BigInteger.valueOf(values[byteOrder == ByteOrder.LITTLE_ENDIAN ? 7 : 0] & 0xffl);BigInteger bigInt2=bigInt1.shiftLeft(56);BigInteger bigInt3=bigInt2.add(BigInteger.valueOf(longValue));longTextField.setText(bigInt3.toString());}break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=new String(values,codeArea.getCharset());for (int i=0; i < strValue.length(); i++) {char charAt=strValue.charAt(i);if (charAt == '\\r' || charAt == '\\n' || charAt == 0) {strValue=strValue.substring(0,i);break;}}stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
        "extraction_name": null,
        "predictions": [
            "updateFieldValues",
            "updateFieldValues",
            "updateFields",
            "updateFieldValue"
        ],
        "similarities": [
            0.8727529111446174,
            0.8727529111446174,
            0.9054379418567388,
            0.8326864162333399
        ],
        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Original.java"
    },
    "extractions": [
        {
            "method_name": "updateField",
            "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{if (signed) {byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}longTextField.setText(String.valueOf(byteBuffer.getLong()));} else {long longValue=byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24)| ((values[4] & 0xffl) << 32)| ((values[5] & 0xffl) << 40)| ((values[6] & 0xffl) << 48) : (values[7] & 0xffl) | ((values[6] & 0xffl) << 8) | ((values[5] & 0xffl) << 16)| ((values[4] & 0xffl) << 24)| ((values[3] & 0xffl) << 32)| ((values[2] & 0xffl) << 40)| ((values[1] & 0xffl) << 48);BigInteger bigInt1=BigInteger.valueOf(values[byteOrder == ByteOrder.LITTLE_ENDIAN ? 7 : 0] & 0xffl);BigInteger bigInt2=bigInt1.shiftLeft(56);BigInteger bigInt3=bigInt2.add(BigInteger.valueOf(longValue));longTextField.setText(bigInt3.toString());}break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
            "extraction_name": "Extraction1",
            "prediction": "getStringValue",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction1.java",
            "updated_code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{if (signed) {byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}longTextField.setText(String.valueOf(byteBuffer.getLong()));} else {long longValue=byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24)| ((values[4] & 0xffl) << 32)| ((values[5] & 0xffl) << 40)| ((values[6] & 0xffl) << 48) : (values[7] & 0xffl) | ((values[6] & 0xffl) << 8) | ((values[5] & 0xffl) << 16)| ((values[4] & 0xffl) << 24)| ((values[3] & 0xffl) << 32)| ((values[2] & 0xffl) << 40)| ((values[1] & 0xffl) << 48);BigInteger bigInt1=BigInteger.valueOf(values[byteOrder == ByteOrder.LITTLE_ENDIAN ? 7 : 0] & 0xffl);BigInteger bigInt2=bigInt1.shiftLeft(56);BigInteger bigInt3=bigInt2.add(BigInteger.valueOf(longValue));longTextField.setText(bigInt3.toString());}break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=getStringValue();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}"
        },
        {
            "method_name": "updateField",
            "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{updateField_extraction_3();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
            "extraction_name": "Extraction2",
            "prediction": "updateLongField",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction2.java",
            "updated_code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{updateLongField();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=getStringValue();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}"
        },
        {
            "method_name": "updateField",
            "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{updateField_extraction_2();break;}case LONG:{updateField_extraction_3();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
            "extraction_name": "Extraction3",
            "prediction": "updateIntegerField",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction3.java",
            "updated_code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{updateIntegerField();break;}case LONG:{updateLongField();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=getStringValue();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}"
        },
        {
            "method_name": "updateField",
            "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{updateField_extraction_1();break;}case INTEGER:{updateField_extraction_2();break;}case LONG:{updateField_extraction_3();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
            "extraction_name": "Extraction4",
            "prediction": "updateWordField",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction4.java",
            "updated_code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{updateWordField();break;}case INTEGER:{updateIntegerField();break;}case LONG:{updateLongField();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=getStringValue();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}"
        }
    ],
    "file_name": null
}