{
    "original": {
        "method_name": "scanClassNode",
        "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        String s=((String[])v)[i];        if (contains) {          if (s.contains(originalLDC)) {            f.value=((String[])f.value)[i].replaceAll(originalLDC,newLDC);            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC)+ \"\\\"\");          }        } else {          if (s.equals(originalLDC)) {            ((String[])f.value)[i]=newLDC;            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC+ \"\\\"\");          }        }      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        if (((LdcInsnNode)a).cst instanceof String) {          final String s=(String)((LdcInsnNode)a).cst;          if (contains) {            if (s.contains(originalLDC)) {              ((LdcInsnNode)a).cst=((String)((LdcInsnNode)a).cst).replaceAll(originalLDC,newLDC);              String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");              frame.appendText(classNode.name + \".\" + m.name+ \"\"+ m.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC).replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")+ \"\\\"\");            }          } else {            if (s.equals(originalLDC)) {              ((LdcInsnNode)a).cst=newLDC;              String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");              frame.appendText(classNode.name + \".\" + m.name+ \"\"+ m.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")+ \"\\\"\");            }          }        }      }    }  }}",
        "extraction_name": null,
        "predictions": [
            "replaceLDC",
            "scanClassNode_checkStringArray, scanClassNode_checkL",
            "checkString, checkStringArray, checkLdcInsnNode"
        ],
        "similarities": [
            0.2964568793100738,
            0.9213776720857147,
            0.675841953810525
        ],
        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Original.java"
    },
    "extractions": [
        {
            "method_name": "scanClassNode",
            "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        String s=((String[])v)[i];        if (contains) {          if (s.contains(originalLDC)) {            f.value=((String[])f.value)[i].replaceAll(originalLDC,newLDC);            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC)+ \"\\\"\");          }        } else {          if (s.equals(originalLDC)) {            ((String[])f.value)[i]=newLDC;            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC+ \"\\\"\");          }        }      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_extraction_3(classNode,m,a);      }    }  }}",
            "extraction_name": "Extraction1",
            "prediction": "scanClassNode_checkLdcInsnNode",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Extraction1.java",
            "updated_code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        String s=((String[])v)[i];        if (contains) {          if (s.contains(originalLDC)) {            f.value=((String[])f.value)[i].replaceAll(originalLDC,newLDC);            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC)+ \"\\\"\");          }        } else {          if (s.equals(originalLDC)) {            ((String[])f.value)[i]=newLDC;            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC+ \"\\\"\");          }        }      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_checkLdcInsnNode(classNode,m,a);      }    }  }}"
        },
        {
            "method_name": "scanClassNode",
            "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        scanClassNode_extraction_2(classNode,f,v,i);      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_extraction_3(classNode,m,a);      }    }  }}",
            "extraction_name": "Extraction2",
            "prediction": "scanClassNode_checkStringArray",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Extraction2.java",
            "updated_code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        scanClassNode_checkStringArray(classNode,f,v,i);      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_checkLdcInsnNode(classNode,m,a);      }    }  }}"
        },
        {
            "method_name": "scanClassNode",
            "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      scanClassNode_extraction_1(f,v);    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        scanClassNode_extraction_2(classNode,f,v,i);      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_extraction_3(classNode,m,a);      }    }  }}",
            "extraction_name": "Extraction3",
            "prediction": "scanClassNode_checkString",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Extraction3.java",
            "updated_code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      scanClassNode_checkString(f,v);    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        scanClassNode_checkStringArray(classNode,f,v,i);      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_checkLdcInsnNode(classNode,m,a);      }    }  }}"
        }
    ],
    "file_name": null
}