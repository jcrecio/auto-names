{
    "original": {
        "method_name": "refreshParameter",
        "code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    Object o=jsonObject.opt(nameUrl);    if (o != null) {      if (o instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)o;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            values.add(anObject.toString());          }        }      } else       if (o.toString().startsWith(\"{;{}\")) {      } else {        String valToInsert=o.toString();        valToInsert=valToInsert.trim();        if (!valToInsert.isEmpty()) {          values.add(valToInsert);        }      }    }    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        StringTokenizer stk=new StringTokenizer((String)oDescr,\";\");        while (stk.hasMoreTokens()) {          descrs.add(stk.nextToken());        }      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}",
        "extraction_name": null,
        "predictions": [
            "refreshParameter",
            "refreshParameterExtractValues"
        ],
        "similarities": [
            1.0,
            0.8779871344696519
        ],
        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.AbstractBIResourceRuntime.refreshParameter.Original.java"
    },
    "extractions": [
        {
            "method_name": "refreshParameter",
            "code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    Object o=jsonObject.opt(nameUrl);    if (o != null) {      if (o instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)o;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            values.add(anObject.toString());          }        }      } else       if (o.toString().startsWith(\"{;{}\")) {      } else {        String valToInsert=o.toString();        valToInsert=valToInsert.trim();        if (!valToInsert.isEmpty()) {          values.add(valToInsert);        }      }    }    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        refreshParameter_extraction_2(descrs,oDescr);      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}",
            "extraction_name": "Extraction1",
            "prediction": "refreshParameterExtraction2",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.AbstractBIResourceRuntime.refreshParameter.Extraction1.java",
            "updated_code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    Object o=jsonObject.opt(nameUrl);    if (o != null) {      if (o instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)o;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            values.add(anObject.toString());          }        }      } else       if (o.toString().startsWith(\"{;{}\")) {      } else {        String valToInsert=o.toString();        valToInsert=valToInsert.trim();        if (!valToInsert.isEmpty()) {          values.add(valToInsert);        }      }    }    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        refreshParameterExtraction2(descrs,oDescr);      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}"
        },
        {
            "method_name": "refreshParameter",
            "code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    refreshParameter_extraction_1(jsonObject,nameUrl,values);    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        refreshParameter_extraction_2(descrs,oDescr);      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}",
            "extraction_name": "Extraction2",
            "prediction": "refreshParameterExtractValues",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.AbstractBIResourceRuntime.refreshParameter.Extraction2.java",
            "updated_code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    refreshParameterExtractValues(jsonObject,nameUrl,values);    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        refreshParameterExtraction2(descrs,oDescr);      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}"
        }
    ],
    "file_name": null
}