{
    "original": {
        "method_name": "getItemPaint",
        "code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue >= currentThres) {        thresholdGiveColor=currentThres;      } else {        stop=true;      }    }  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  if (thresholdGiveColor == null) {    if (bottomThreshold != null && bottomThreshold.getColor() != null) {      colorToReturn=bottomThreshold.getColor();    }    if (colorToReturn == null) {      colorToReturn=Color.BLACK;    }  } else {    if (thresholds.get(thresholdGiveColor) != null && thresholds.get(thresholdGiveColor).getColor() != null)     colorToReturn=thresholds.get(thresholdGiveColor).getColor();    if (colorToReturn == null) {      colorToReturn=Color.BLACK;    }  }  logger.debug(\"OUT\");  return colorToReturn;}",
        "extraction_name": null,
        "predictions": [
            "getItemPaintColor",
            "getItemPaintColor"
        ],
        "similarities": [
            0.934430696284793,
            0.934430696284793
        ],
        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils.MyBarRendererThresholdPaint.getItemPaint.Original.java"
    },
    "extractions": [
        {
            "method_name": "getItemPaint",
            "code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue >= currentThres) {        thresholdGiveColor=currentThres;      } else {        stop=true;      }    }  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  return getItemPaint_extraction_2(thresholdGiveColor,colorToReturn);}",
            "extraction_name": "Extraction1",
            "prediction": "getItemPaintColor",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils.MyBarRendererThresholdPaint.getItemPaint.Extraction1.java",
            "updated_code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue >= currentThres) {        thresholdGiveColor=currentThres;      } else {        stop=true;      }    }  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  return getItemPaintColor(thresholdGiveColor,colorToReturn);}"
        },
        {
            "method_name": "getItemPaint",
            "code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    thresholdGiveColor=getItemPaint_extraction_1(currentValue,orderedThresholds,thresholdGiveColor,stop);  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  return getItemPaint_extraction_2(thresholdGiveColor,colorToReturn);}",
            "extraction_name": "Extraction2",
            "prediction": "getThresholdGiveColor",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils.MyBarRendererThresholdPaint.getItemPaint.Extraction2.java",
            "updated_code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    thresholdGiveColor=getThresholdGiveColor(currentValue,orderedThresholds,thresholdGiveColor,stop);  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  return getItemPaintColor(thresholdGiveColor,colorToReturn);}"
        }
    ],
    "file_name": null
}