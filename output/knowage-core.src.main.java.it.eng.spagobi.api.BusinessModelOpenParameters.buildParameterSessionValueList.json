{
    "original": {
        "method_name": "buildParameterSessionValueList",
        "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      if (sessionParameterValue != null && sessionParameterValue.length() > 0 && sessionParameterValue.charAt(0) == '[') {        JSONArray valuesArray=new JSONArray(sessionParameterValue);        if (valuesArray.get(0) != null) {          value=valuesArray.get(0).toString();        }      } else {        value=sessionParameterValue;      }      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
        "extraction_name": null,
        "predictions": [
            "buildParameterSessionValueList",
            "buildParameterSessionValueList"
        ],
        "similarities": [
            1.0,
            1.0
        ],
        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.BusinessModelOpenParameters.buildParameterSessionValueList.Original.java"
    },
    "extractions": [
        {
            "method_name": "buildParameterSessionValueList",
            "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=buildParameterSessionValueList_extraction_2(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
            "extraction_name": "Extraction1",
            "prediction": "getValueFromSessionParameter",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.BusinessModelOpenParameters.buildParameterSessionValueList.Extraction1.java",
            "updated_code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=getValueFromSessionParameter(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}"
        },
        {
            "method_name": "buildParameterSessionValueList",
            "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      buildParameterSessionValueList_extraction_1(valueList,valuesArray,st,values,descriptions);    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=buildParameterSessionValueList_extraction_2(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
            "extraction_name": "Extraction2",
            "prediction": "buildParameterSessionValueList_populateValuesAndDescriptions",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.BusinessModelOpenParameters.buildParameterSessionValueList.Extraction2.java",
            "updated_code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      buildParameterSessionValueList_populateValuesAndDescriptions(valueList,valuesArray,st,values,descriptions);    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=getValueFromSessionParameter(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}"
        }
    ],
    "file_name": null
}