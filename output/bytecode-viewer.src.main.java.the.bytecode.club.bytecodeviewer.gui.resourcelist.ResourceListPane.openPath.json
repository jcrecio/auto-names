{
    "original": {
        "method_name": "openPath",
        "code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      if (resourceMode) {      }      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   if (container.resourceFiles.containsKey(name)) {    final String fn=name.toLowerCase();    final String extension=fn.contains(\":\") ? null : FilenameUtils.getExtension(fn);    Import imp=Import.extensionMap.get(extension);    if (imp == null)     BytecodeViewer.viewer.workPane.addFileResource(container,name); else {      int hash=(container.name + name).hashCode();      File tempFile=new File(tempDirectory + fs + hash+ fs+ name+ \".\"+ extension);      if (!tempFile.exists()) {        DiskWriter.replaceFileBytes(tempFile.getAbsolutePath(),content,false);        try {          imp.getImporter().open(tempFile);        } catch (        Exception e) {          e.printStackTrace();          BytecodeViewer.viewer.workPane.addFileResource(container,name);        }      } else {      }    }  }}",
        "extraction_name": null,
        "predictions": [
            "openPathExtractResource",
            "openPathExtractResource"
        ],
        "similarities": [
            0.8195312121133317,
            0.8195312121133317
        ],
        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.openPath.Original.java"
    },
    "extractions": [
        {
            "method_name": "openPath",
            "code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      if (resourceMode) {      }      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPath_extraction_2(container,name,content);}",
            "extraction_name": "Extraction1",
            "prediction": "openPathExtractResource",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.openPath.Extraction1.java",
            "updated_code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      if (resourceMode) {      }      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPathExtractResource(container,name,content);}"
        },
        {
            "method_name": "openPath",
            "code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      openPath_extraction_1(resourceMode);      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPath_extraction_2(container,name,content);}",
            "extraction_name": "Extraction2",
            "prediction": "openPathClassResource",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.openPath.Extraction2.java",
            "updated_code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      openPathClassResource(resourceMode);      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPathExtractResource(container,name,content);}"
        }
    ],
    "file_name": null
}