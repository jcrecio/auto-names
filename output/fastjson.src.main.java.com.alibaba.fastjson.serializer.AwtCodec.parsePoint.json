{
    "original": {
        "method_name": "parsePoint",
        "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     if (key.equalsIgnoreCase(\"y\")) {      y=val;    } else {      throw new JSONException(\"syntax error, \" + key);    }    if (lexer.token() == JSONToken.COMMA) {      lexer.nextToken(JSONToken.LITERAL_STRING);    }  }  return new Point(x,y);}",
        "extraction_name": null,
        "predictions": [
            "parsePoint",
            "parsePoint",
            "parsePoint"
        ],
        "similarities": [
            1.0,
            1.0,
            1.0
        ],
        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Original.java"
    },
    "extractions": [
        {
            "method_name": "parsePoint",
            "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     if (key.equalsIgnoreCase(\"y\")) {      y=val;    } else {      throw new JSONException(\"syntax error, \" + key);    }    parsePoint_extraction_3(lexer);  }  return new Point(x,y);}",
            "extraction_name": "Extraction1",
            "prediction": "parsePoint_checkComma",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Extraction1.java",
            "updated_code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     if (key.equalsIgnoreCase(\"y\")) {      y=val;    } else {      throw new JSONException(\"syntax error, \" + key);    }    parsePoint_checkComma(lexer);  }  return new Point(x,y);}"
        },
        {
            "method_name": "parsePoint",
            "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     y=parsePoint_extraction_2(y,key,val);    parsePoint_extraction_3(lexer);  }  return new Point(x,y);}",
            "extraction_name": "Extraction2",
            "prediction": "parsePoint_setY",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Extraction2.java",
            "updated_code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     y=parsePoint_setY(y,key,val);    parsePoint_checkComma(lexer);  }  return new Point(x,y);}"
        },
        {
            "method_name": "parsePoint",
            "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val=parsePoint_extraction_1(lexer,token);    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     y=parsePoint_extraction_2(y,key,val);    parsePoint_extraction_3(lexer);  }  return new Point(x,y);}",
            "extraction_name": "Extraction3",
            "prediction": "parsePoint_getVal",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Extraction3.java",
            "updated_code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val=parsePoint_getVal(lexer,token);    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     y=parsePoint_setY(y,key,val);    parsePoint_checkComma(lexer);  }  return new Point(x,y);}"
        }
    ],
    "file_name": null
}