{
    "original": {
        "method_name": "deserialze",
        "code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    if (lexer.token() != JSONToken.LITERAL_STRING) {      throw new JSONException(\"syntax error\");    }    lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    if (lexer.token() != JSONToken.LITERAL_INT) {      throw new JSONException(\"syntax error\");    }    long time=lexer.longValue();    lexer.nextToken(JSONToken.RBRACE);    if (lexer.token() != JSONToken.RBRACE) {      throw new JSONException(\"syntax error\");    }    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=true;      for (int i=0; i < strVal.length(); ++i) {        char ch=strVal.charAt(i);        if (ch < '0' || ch > '9') {          isDigit=false;          break;        }      }      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}",
        "extraction_name": null,
        "predictions": [
            "deserialize",
            "deserialzeTime"
        ],
        "similarities": [
            0.0,
            0.0
        ],
        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze.Original.java"
    },
    "extractions": [
        {
            "method_name": "deserialze",
            "code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    if (lexer.token() != JSONToken.LITERAL_STRING) {      throw new JSONException(\"syntax error\");    }    lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    if (lexer.token() != JSONToken.LITERAL_INT) {      throw new JSONException(\"syntax error\");    }    long time=lexer.longValue();    lexer.nextToken(JSONToken.RBRACE);    if (lexer.token() != JSONToken.RBRACE) {      throw new JSONException(\"syntax error\");    }    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=deserialze_extraction_2(strVal);      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}",
            "extraction_name": "Extraction1",
            "prediction": "deserialzeCheckDigit",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze.Extraction1.java",
            "updated_code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    if (lexer.token() != JSONToken.LITERAL_STRING) {      throw new JSONException(\"syntax error\");    }    lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    if (lexer.token() != JSONToken.LITERAL_INT) {      throw new JSONException(\"syntax error\");    }    long time=lexer.longValue();    lexer.nextToken(JSONToken.RBRACE);    if (lexer.token() != JSONToken.RBRACE) {      throw new JSONException(\"syntax error\");    }    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=deserialzeCheckDigit(strVal);      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}"
        },
        {
            "method_name": "deserialze",
            "code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    long time=deserialze_extraction_1(lexer);    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=deserialze_extraction_2(strVal);      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}",
            "extraction_name": "Extraction2",
            "prediction": "deserialzeGetTime",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze.Extraction2.java",
            "updated_code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    long time=deserialzeGetTime(lexer);    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=deserialzeCheckDigit(strVal);      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}"
        }
    ],
    "file_name": null
}