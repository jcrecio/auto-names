{
    "original": {
        "method_name": "executeChart",
        "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=new HashMap();    if (parametersList != null && !parametersList.isEmpty()) {      for (Iterator iterator=parametersList.iterator(); iterator.hasNext(); ) {        BIObjectParameter par=(BIObjectParameter)iterator.next();        String url=par.getParameterUrlName();        String value=(String)parameters.get(url);        if (value != null) {          parametersMap.put(url,value);        }      }    }    for (Iterator iterator=parameters.keySet().iterator(); iterator.hasNext(); ) {      String namePar=(String)iterator.next();      if (namePar.startsWith(\"target\") || namePar.startsWith(\"baseline\")) {        Object value=parameters.get(namePar);        parametersMap.put(namePar,value);      }    }    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      try {        out.close();      } catch (      IOException e) {        logger.error(\"Error while closing stream\",e);      }      monitor.stop();    }  }  return returnImage;}",
        "extraction_name": null,
        "predictions": [
            "executeChart",
            "executeChart",
            "executeChart",
            "executeChart"
        ],
        "similarities": [
            1.0,
            1.0,
            1.0,
            1.0
        ],
        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Original.java"
    },
    "extractions": [
        {
            "method_name": "executeChart",
            "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=new HashMap();    if (parametersList != null && !parametersList.isEmpty()) {      for (Iterator iterator=parametersList.iterator(); iterator.hasNext(); ) {        BIObjectParameter par=(BIObjectParameter)iterator.next();        String url=par.getParameterUrlName();        String value=(String)parameters.get(url);        if (value != null) {          parametersMap.put(url,value);        }      }    }    for (Iterator iterator=parameters.keySet().iterator(); iterator.hasNext(); ) {      String namePar=(String)iterator.next();      if (namePar.startsWith(\"target\") || namePar.startsWith(\"baseline\")) {        Object value=parameters.get(namePar);        parametersMap.put(namePar,value);      }    }    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
            "extraction_name": "Extraction1",
            "prediction": "closeStream",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction1.java",
            "updated_code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=new HashMap();    if (parametersList != null && !parametersList.isEmpty()) {      for (Iterator iterator=parametersList.iterator(); iterator.hasNext(); ) {        BIObjectParameter par=(BIObjectParameter)iterator.next();        String url=par.getParameterUrlName();        String value=(String)parameters.get(url);        if (value != null) {          parametersMap.put(url,value);        }      }    }    for (Iterator iterator=parameters.keySet().iterator(); iterator.hasNext(); ) {      String namePar=(String)iterator.next();      if (namePar.startsWith(\"target\") || namePar.startsWith(\"baseline\")) {        Object value=parameters.get(namePar);        parametersMap.put(namePar,value);      }    }    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      closeStream(out);      monitor.stop();    }  }  return returnImage;}"
        },
        {
            "method_name": "executeChart",
            "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=executeChart_extraction_3(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
            "extraction_name": "Extraction2",
            "prediction": "getParametersMap",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction2.java",
            "updated_code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=getParametersMap(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      closeStream(out);      monitor.stop();    }  }  return returnImage;}"
        },
        {
            "method_name": "executeChart",
            "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      data=executeChart_extraction_2(obj,data);    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=executeChart_extraction_3(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
            "extraction_name": "Extraction3",
            "prediction": "getDataSetId",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction3.java",
            "updated_code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      data=getDataSetId(obj,data);    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=getParametersMap(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      closeStream(out);      monitor.stop();    }  }  return returnImage;}"
        },
        {
            "method_name": "executeChart",
            "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      String contentStr=executeChart_extraction_1(template);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      data=executeChart_extraction_2(obj,data);    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=executeChart_extraction_3(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
            "extraction_name": "Extraction4",
            "prediction": "getBIObjectActiveTemplateContent",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction4.java",
            "updated_code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      String contentStr=getBIObjectActiveTemplateContent(template);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      data=getDataSetId(obj,data);    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=getParametersMap(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      closeStream(out);      monitor.stop();    }  }  return returnImage;}"
        }
    ],
    "file_name": null
}