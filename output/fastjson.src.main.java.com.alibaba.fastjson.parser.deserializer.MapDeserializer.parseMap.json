{
    "original": {
        "method_name": "parseMap",
        "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key;      if (lexer.token() == JSONToken.LITERAL_STRING && keyDeserializer instanceof JavaBeanDeserializer) {        String keyStrValue=lexer.stringVal();        lexer.nextToken();        DefaultJSONParser keyParser=new DefaultJSONParser(keyStrValue,parser.getConfig(),parser.getLexer().getFeatures());        keyParser.setDateFormat(parser.getDateFomartPattern());        key=keyDeserializer.deserialze(keyParser,keyType,null);      } else {        key=keyDeserializer.deserialze(parser,keyType,null);      }      if (lexer.token() != JSONToken.COLON) {        throw new JSONException(\"syntax error, expect :, actual \" + lexer.token());      }      lexer.nextToken(valueDeserializer.getFastMatchToken());      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      if (lexer.token() == JSONToken.COMMA) {        lexer.nextToken(keyDeserializer.getFastMatchToken());      }    }  }  finally {    parser.setContext(context);  }  return map;}",
        "extraction_name": null,
        "predictions": [
            "parseMap",
            "parseMapKey",
            "parseMapKey"
        ],
        "similarities": [
            1.0,
            0.7855105902433134,
            0.7855105902433134
        ],
        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Original.java"
    },
    "extractions": [
        {
            "method_name": "parseMap",
            "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key;      if (lexer.token() == JSONToken.LITERAL_STRING && keyDeserializer instanceof JavaBeanDeserializer) {        String keyStrValue=lexer.stringVal();        lexer.nextToken();        DefaultJSONParser keyParser=new DefaultJSONParser(keyStrValue,parser.getConfig(),parser.getLexer().getFeatures());        keyParser.setDateFormat(parser.getDateFomartPattern());        key=keyDeserializer.deserialze(keyParser,keyType,null);      } else {        key=keyDeserializer.deserialze(parser,keyType,null);      }      if (lexer.token() != JSONToken.COLON) {        throw new JSONException(\"syntax error, expect :, actual \" + lexer.token());      }      lexer.nextToken(valueDeserializer.getFastMatchToken());      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_extraction_3(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}",
            "extraction_name": "Extraction1",
            "prediction": "parseMap_handleComma",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Extraction1.java",
            "updated_code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key;      if (lexer.token() == JSONToken.LITERAL_STRING && keyDeserializer instanceof JavaBeanDeserializer) {        String keyStrValue=lexer.stringVal();        lexer.nextToken();        DefaultJSONParser keyParser=new DefaultJSONParser(keyStrValue,parser.getConfig(),parser.getLexer().getFeatures());        keyParser.setDateFormat(parser.getDateFomartPattern());        key=keyDeserializer.deserialze(keyParser,keyType,null);      } else {        key=keyDeserializer.deserialze(parser,keyType,null);      }      if (lexer.token() != JSONToken.COLON) {        throw new JSONException(\"syntax error, expect :, actual \" + lexer.token());      }      lexer.nextToken(valueDeserializer.getFastMatchToken());      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_handleComma(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}"
        },
        {
            "method_name": "parseMap",
            "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key=parseMap_extraction_2(parser,keyType,lexer,keyDeserializer,valueDeserializer);      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_extraction_3(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}",
            "extraction_name": "Extraction2",
            "prediction": "parseMapKey",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Extraction2.java",
            "updated_code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key=parseMapKey(parser,keyType,lexer,keyDeserializer,valueDeserializer);      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_handleComma(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}"
        },
        {
            "method_name": "parseMap",
            "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        return parseMap_extraction_1(parser,lexer,context,object);      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key=parseMap_extraction_2(parser,keyType,lexer,keyDeserializer,valueDeserializer);      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_extraction_3(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}",
            "extraction_name": "Extraction3",
            "prediction": "parseMapRef",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Extraction3.java",
            "updated_code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        return parseMapRef(parser,lexer,context,object);      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key=parseMapKey(parser,keyType,lexer,keyDeserializer,valueDeserializer);      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_handleComma(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}"
        }
    ],
    "file_name": null
}