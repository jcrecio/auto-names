{
    "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer": {
        "BytecodeViewer": {
            "compile": {
                "original": {
                    "method_name": "compile",
                    "code": "/**  * Compile all of the compilable panes that're opened. * @param message if it should send a message saying it's compiled sucessfully. * @return true if no errors, false if it failed to compile. */public static boolean compile(boolean message,boolean successAlert){  BytecodeViewer.updateBusyStatus(true);  boolean noErrors=true;  boolean actuallyTried=false;  for (  java.awt.Component c : BytecodeViewer.viewer.workPane.getLoadedViewers()) {    if (c instanceof ClassViewer) {      ClassViewer cv=(ClassViewer)c;      if (noErrors && !cv.bytecodeViewPanel1.compile())       noErrors=false;      if (noErrors && !cv.bytecodeViewPanel2.compile())       noErrors=false;      if (noErrors && !cv.bytecodeViewPanel3.compile())       noErrors=false;      if (cv.bytecodeViewPanel1.textArea != null && cv.bytecodeViewPanel1.textArea.isEditable())       actuallyTried=true;      if (cv.bytecodeViewPanel2.textArea != null && cv.bytecodeViewPanel2.textArea.isEditable())       actuallyTried=true;      if (cv.bytecodeViewPanel3.textArea != null && cv.bytecodeViewPanel3.textArea.isEditable())       actuallyTried=true;    }  }  if (message) {    if (actuallyTried) {      if (noErrors && successAlert)       BytecodeViewer.showMessage(\"Compiled Successfully.\");    } else {      BytecodeViewer.showMessage(\"You have no editable panes opened, make one editable and try again.\");    }  }  BytecodeViewer.updateBusyStatus(false);  return true;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.BytecodeViewer.compile.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "compile",
                        "code": "/**  * Compile all of the compilable panes that're opened. * @param message if it should send a message saying it's compiled sucessfully. * @return true if no errors, false if it failed to compile. */public static boolean compile(boolean message,boolean successAlert){  BytecodeViewer.updateBusyStatus(true);  boolean noErrors=true;  boolean actuallyTried=false;  for (  java.awt.Component c : BytecodeViewer.viewer.workPane.getLoadedViewers()) {    if (c instanceof ClassViewer) {      ClassViewer cv=(ClassViewer)c;      if (noErrors && !cv.bytecodeViewPanel1.compile())       noErrors=false;      if (noErrors && !cv.bytecodeViewPanel2.compile())       noErrors=false;      if (noErrors && !cv.bytecodeViewPanel3.compile())       noErrors=false;      actuallyTried=compile_extraction_2(actuallyTried,cv);      if (cv.bytecodeViewPanel3.textArea != null && cv.bytecodeViewPanel3.textArea.isEditable())       actuallyTried=true;    }  }  if (message) {    if (actuallyTried) {      if (noErrors && successAlert)       BytecodeViewer.showMessage(\"Compiled Successfully.\");    } else {      BytecodeViewer.showMessage(\"You have no editable panes opened, make one editable and try again.\");    }  }  BytecodeViewer.updateBusyStatus(false);  return true;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.BytecodeViewer.compile.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "compile",
                        "code": "/**  * Compile all of the compilable panes that're opened. * @param message if it should send a message saying it's compiled sucessfully. * @return true if no errors, false if it failed to compile. */public static boolean compile(boolean message,boolean successAlert){  BytecodeViewer.updateBusyStatus(true);  boolean noErrors=true;  boolean actuallyTried=false;  for (  java.awt.Component c : BytecodeViewer.viewer.workPane.getLoadedViewers()) {    if (c instanceof ClassViewer) {      ClassViewer cv=(ClassViewer)c;      noErrors=compile_extraction_1(noErrors,cv);      actuallyTried=compile_extraction_2(actuallyTried,cv);      if (cv.bytecodeViewPanel3.textArea != null && cv.bytecodeViewPanel3.textArea.isEditable())       actuallyTried=true;    }  }  if (message) {    if (actuallyTried) {      if (noErrors && successAlert)       BytecodeViewer.showMessage(\"Compiled Successfully.\");    } else {      BytecodeViewer.showMessage(\"You have no editable panes opened, make one editable and try again.\");    }  }  BytecodeViewer.updateBusyStatus(false);  return true;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.BytecodeViewer.compile.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode": {
        "InstructionPrinter": {
            "printInstruction": {
                "original": {
                    "method_name": "printInstruction",
                    "code": "public String printInstruction(AbstractInsnNode ain){  String line=\"\";  if (ain instanceof VarInsnNode) {    line=printVarInsnNode((VarInsnNode)ain);  } else   if (ain instanceof IntInsnNode) {    line=printIntInsnNode((IntInsnNode)ain);  } else   if (ain instanceof FieldInsnNode) {    line=printFieldInsnNode((FieldInsnNode)ain);  } else   if (ain instanceof MethodInsnNode) {    line=printMethodInsnNode((MethodInsnNode)ain);  } else   if (ain instanceof LdcInsnNode) {    line=printLdcInsnNode((LdcInsnNode)ain);  } else   if (ain instanceof InsnNode) {    line=printInsnNode((InsnNode)ain);  } else   if (ain instanceof JumpInsnNode) {    line=printJumpInsnNode((JumpInsnNode)ain);  } else   if (ain instanceof LineNumberNode) {    line=printLineNumberNode();  } else   if (ain instanceof LabelNode) {    if (firstLabel && BytecodeViewer.viewer.appendBracketsToLabels.isSelected())     info.add(\"}\");    line=printLabelnode((LabelNode)ain);    if (BytecodeViewer.viewer.appendBracketsToLabels.isSelected()) {      if (!firstLabel)       firstLabel=true;      line+=\" {\";    }  } else   if (ain instanceof TypeInsnNode) {    line=printTypeInsnNode((TypeInsnNode)ain);  } else   if (ain instanceof FrameNode) {    line=printFrameNode((FrameNode)ain);  } else   if (ain instanceof IincInsnNode) {    line=printIincInsnNode((IincInsnNode)ain);  } else   if (ain instanceof TableSwitchInsnNode) {    line=printTableSwitchInsnNode((TableSwitchInsnNode)ain);  } else   if (ain instanceof LookupSwitchInsnNode) {    line=printLookupSwitchInsnNode((LookupSwitchInsnNode)ain);  } else   if (ain instanceof InvokeDynamicInsnNode) {    line=printInvokeDynamicInsNode((InvokeDynamicInsnNode)ain);  } else   if (ain instanceof MultiANewArrayInsnNode) {    line=printMultiANewArrayInsNode((MultiANewArrayInsnNode)ain);  } else {    line+=\"UNADDED OPCODE: \" + nameOpcode(ain.getOpcode()) + \" \"+ ain;  }  return line;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode.InstructionPrinter.printInstruction.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "printInstruction",
                        "code": "public String printInstruction(AbstractInsnNode ain){  String line=\"\";  if (ain instanceof VarInsnNode) {    line=printVarInsnNode((VarInsnNode)ain);  } else   if (ain instanceof IntInsnNode) {    line=printIntInsnNode((IntInsnNode)ain);  } else   if (ain instanceof FieldInsnNode) {    line=printFieldInsnNode((FieldInsnNode)ain);  } else   if (ain instanceof MethodInsnNode) {    line=printMethodInsnNode((MethodInsnNode)ain);  } else   if (ain instanceof LdcInsnNode) {    line=printLdcInsnNode((LdcInsnNode)ain);  } else   if (ain instanceof InsnNode) {    line=printInsnNode((InsnNode)ain);  } else   if (ain instanceof JumpInsnNode) {    line=printJumpInsnNode((JumpInsnNode)ain);  } else   if (ain instanceof LineNumberNode) {    line=printLineNumberNode();  } else   if (ain instanceof LabelNode) {    if (firstLabel && BytecodeViewer.viewer.appendBracketsToLabels.isSelected())     info.add(\"}\");    line=printLabelnode((LabelNode)ain);    if (BytecodeViewer.viewer.appendBracketsToLabels.isSelected()) {      if (!firstLabel)       firstLabel=true;      line+=\" {\";    }  } else   if (ain instanceof TypeInsnNode) {    line=printTypeInsnNode((TypeInsnNode)ain);  } else   line=printInstruction_extraction_2(ain,line);  return line;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode.InstructionPrinter.printInstruction.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "printInstruction",
                        "code": "public String printInstruction(AbstractInsnNode ain){  String line=\"\";  if (ain instanceof VarInsnNode) {    line=printVarInsnNode((VarInsnNode)ain);  } else   if (ain instanceof IntInsnNode) {    line=printIntInsnNode((IntInsnNode)ain);  } else   if (ain instanceof FieldInsnNode) {    line=printFieldInsnNode((FieldInsnNode)ain);  } else   if (ain instanceof MethodInsnNode) {    line=printMethodInsnNode((MethodInsnNode)ain);  } else   if (ain instanceof LdcInsnNode) {    line=printLdcInsnNode((LdcInsnNode)ain);  } else   if (ain instanceof InsnNode) {    line=printInsnNode((InsnNode)ain);  } else   if (ain instanceof JumpInsnNode) {    line=printJumpInsnNode((JumpInsnNode)ain);  } else   if (ain instanceof LineNumberNode) {    line=printLineNumberNode();  } else   if (ain instanceof LabelNode) {    if (firstLabel && BytecodeViewer.viewer.appendBracketsToLabels.isSelected())     info.add(\"}\");    line=printLabelnode((LabelNode)ain);    if (BytecodeViewer.viewer.appendBracketsToLabels.isSelected()) {      printInstruction_extraction_1();      line+=\" {\";    }  } else   if (ain instanceof TypeInsnNode) {    line=printTypeInsnNode((TypeInsnNode)ain);  } else   line=printInstruction_extraction_2(ain,line);  return line;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode.InstructionPrinter.printInstruction.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "MethodNodeDecompiler": {
            "decompile": {
                "original": {
                    "method_name": "decompile",
                    "code": "public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,MethodNode m,ClassNode cn){  String class_;  if (cn.name.contains(\"/\")) {    class_=cn.name.substring(cn.name.lastIndexOf(\"/\") + 1);  } else {    class_=cn.name;  }  String s=getAccessString(m.access);  sb.append(\"     \");  sb.append(s);  if (s.length() > 0)   sb.append(\" \");  if (m.name.equals(\"<init>\")) {    sb.append(class_);  } else   if (!m.name.equals(\"<clinit>\")) {    sb.append(m.name);  }  TypeAndName[] args=new TypeAndName[0];  if (!m.name.equals(\"<clinit>\")) {    sb.append(\"(\");    final Type[] argTypes=Type.getArgumentTypes(m.desc);    args=new TypeAndName[argTypes.length];    for (int i=0; i < argTypes.length; i++) {      final Type type=argTypes[i];      final TypeAndName tan=new TypeAndName();      final String argName=\"arg\" + i;      tan.name=argName;      tan.type=type;      args[i]=tan;      sb.append(type.getClassName() + \" \" + argName+ (i < argTypes.length - 1 ? \", \" : \"\"));    }    sb.append(\")\");  }  int amountOfThrows=m.exceptions.size();  if (amountOfThrows > 0) {    sb.append(\" throws \");    sb.append(m.exceptions.get(0));    for (int i=1; i < amountOfThrows; i++) {      sb.append(\", \");      sb.append(m.exceptions.get(i));    }  }  if (s.contains(\"abstract\")) {    sb.append(\" {}\");    sb.append(\" //\");    sb.append(m.desc);    sb.append(nl);  } else {    sb.append(\" {\");    if (BytecodeViewer.viewer.debugHelpers.isSelected()) {      if (m.name.equals(\"<clinit>\"))       sb.append(\" // <clinit>\"); else       if (m.name.equals(\"<init>\"))       sb.append(\" // <init>\");    }    sb.append(\" //\");    sb.append(m.desc);    sb.append(nl);    if (m.signature != null) {      sb.append(\"         <sig:\").append(m.signature).append(\">\");    }    if (m.annotationDefault != null) {      sb.append(m.annotationDefault);      sb.append(\"\\n\");    }    InstructionPrinter insnPrinter=new InstructionPrinter(m,args);    addAttrList(m.attrs,\"attr\",sb,insnPrinter);    addAttrList(m.invisibleAnnotations,\"invisAnno\",sb,insnPrinter);    addAttrList(m.invisibleAnnotations,\"invisLocalVarAnno\",sb,insnPrinter);    addAttrList(m.invisibleTypeAnnotations,\"invisTypeAnno\",sb,insnPrinter);    addAttrList(m.localVariables,\"localVar\",sb,insnPrinter);    addAttrList(m.visibleAnnotations,\"visAnno\",sb,insnPrinter);    addAttrList(m.visibleLocalVariableAnnotations,\"visLocalVarAnno\",sb,insnPrinter);    addAttrList(m.visibleTypeAnnotations,\"visTypeAnno\",sb,insnPrinter);    for (    TryCatchBlockNode o : m.tryCatchBlocks) {      sb.append(\"         \");      sb.append(\"TryCatch: L\");      sb.append(insnPrinter.resolveLabel(o.start));      sb.append(\" to L\");      sb.append(insnPrinter.resolveLabel(o.end));      sb.append(\" handled by L\");      sb.append(insnPrinter.resolveLabel(o.handler));      sb.append(\": \");      if (o.type != null)       sb.append(o.type); else       sb.append(\"Type is null.\");      sb.append(nl);    }    for (    String insn : insnPrinter.createPrint()) {      sb.append(\"         \");      sb.append(insn);      sb.append(nl);    }    sb.append(\"     }\" + nl);  }  return sb;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode.MethodNodeDecompiler.decompile.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "decompile",
                        "code": "public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,MethodNode m,ClassNode cn){  String class_;  if (cn.name.contains(\"/\")) {    class_=cn.name.substring(cn.name.lastIndexOf(\"/\") + 1);  } else {    class_=cn.name;  }  String s=getAccessString(m.access);  sb.append(\"     \");  sb.append(s);  if (s.length() > 0)   sb.append(\" \");  if (m.name.equals(\"<init>\")) {    sb.append(class_);  } else   if (!m.name.equals(\"<clinit>\")) {    sb.append(m.name);  }  TypeAndName[] args=new TypeAndName[0];  if (!m.name.equals(\"<clinit>\")) {    sb.append(\"(\");    final Type[] argTypes=Type.getArgumentTypes(m.desc);    args=new TypeAndName[argTypes.length];    for (int i=0; i < argTypes.length; i++) {      final Type type=argTypes[i];      final TypeAndName tan=new TypeAndName();      final String argName=\"arg\" + i;      tan.name=argName;      tan.type=type;      args[i]=tan;      sb.append(type.getClassName() + \" \" + argName+ (i < argTypes.length - 1 ? \", \" : \"\"));    }    sb.append(\")\");  }  int amountOfThrows=m.exceptions.size();  if (amountOfThrows > 0) {    sb.append(\" throws \");    sb.append(m.exceptions.get(0));    for (int i=1; i < amountOfThrows; i++) {      sb.append(\", \");      sb.append(m.exceptions.get(i));    }  }  if (s.contains(\"abstract\")) {    sb.append(\" {}\");    sb.append(\" //\");    sb.append(m.desc);    sb.append(nl);  } else {    InstructionPrinter insnPrinter=decompile_extraction_2(sb,m,args);    for (    String insn : insnPrinter.createPrint()) {      sb.append(\"         \");      sb.append(insn);      sb.append(nl);    }    sb.append(\"     }\" + nl);  }  return sb;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode.MethodNodeDecompiler.decompile.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "decompile",
                        "code": "public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,MethodNode m,ClassNode cn){  String class_;  if (cn.name.contains(\"/\")) {    class_=cn.name.substring(cn.name.lastIndexOf(\"/\") + 1);  } else {    class_=cn.name;  }  String s=getAccessString(m.access);  sb.append(\"     \");  sb.append(s);  if (s.length() > 0)   sb.append(\" \");  if (m.name.equals(\"<init>\")) {    sb.append(class_);  } else   if (!m.name.equals(\"<clinit>\")) {    sb.append(m.name);  }  TypeAndName[] args=decompile_extraction_1(sb,m);  int amountOfThrows=m.exceptions.size();  if (amountOfThrows > 0) {    sb.append(\" throws \");    sb.append(m.exceptions.get(0));    for (int i=1; i < amountOfThrows; i++) {      sb.append(\", \");      sb.append(m.exceptions.get(i));    }  }  if (s.contains(\"abstract\")) {    sb.append(\" {}\");    sb.append(\" //\");    sb.append(m.desc);    sb.append(nl);  } else {    InstructionPrinter insnPrinter=decompile_extraction_2(sb,m,args);    for (    String insn : insnPrinter.createPrint()) {      sb.append(\"         \");      sb.append(insn);      sb.append(nl);    }    sb.append(\"     }\" + nl);  }  return sb;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.decompilers.bytecode.MethodNodeDecompiler.decompile.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer": {
        "ValuesPanel": {
            "updateField": {
                "original": {
                    "method_name": "updateField",
                    "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{if (signed) {byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}longTextField.setText(String.valueOf(byteBuffer.getLong()));} else {long longValue=byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24)| ((values[4] & 0xffl) << 32)| ((values[5] & 0xffl) << 40)| ((values[6] & 0xffl) << 48) : (values[7] & 0xffl) | ((values[6] & 0xffl) << 8) | ((values[5] & 0xffl) << 16)| ((values[4] & 0xffl) << 24)| ((values[3] & 0xffl) << 32)| ((values[2] & 0xffl) << 40)| ((values[1] & 0xffl) << 48);BigInteger bigInt1=BigInteger.valueOf(values[byteOrder == ByteOrder.LITTLE_ENDIAN ? 7 : 0] & 0xffl);BigInteger bigInt2=bigInt1.shiftLeft(56);BigInteger bigInt3=bigInt2.add(BigInteger.valueOf(longValue));longTextField.setText(bigInt3.toString());}break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=new String(values,codeArea.getCharset());for (int i=0; i < strValue.length(); i++) {char charAt=strValue.charAt(i);if (charAt == '\\r' || charAt == '\\n' || charAt == 0) {strValue=strValue.substring(0,i);break;}}stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "updateField",
                        "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{if (signed) {byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}longTextField.setText(String.valueOf(byteBuffer.getLong()));} else {long longValue=byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24)| ((values[4] & 0xffl) << 32)| ((values[5] & 0xffl) << 40)| ((values[6] & 0xffl) << 48) : (values[7] & 0xffl) | ((values[6] & 0xffl) << 8) | ((values[5] & 0xffl) << 16)| ((values[4] & 0xffl) << 24)| ((values[3] & 0xffl) << 32)| ((values[2] & 0xffl) << 40)| ((values[1] & 0xffl) << 48);BigInteger bigInt1=BigInteger.valueOf(values[byteOrder == ByteOrder.LITTLE_ENDIAN ? 7 : 0] & 0xffl);BigInteger bigInt2=bigInt1.shiftLeft(56);BigInteger bigInt3=bigInt2.add(BigInteger.valueOf(longValue));longTextField.setText(bigInt3.toString());}break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "updateField",
                        "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{long intValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| (values[3] << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| (values[0] << 24)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xffl) | ((values[1] & 0xffl) << 8) | ((values[2] & 0xffl) << 16)| ((values[3] & 0xffl) << 24) : (values[3] & 0xffl) | ((values[2] & 0xffl) << 8) | ((values[1] & 0xffl) << 16)| ((values[0] & 0xffl) << 24));intTextField.setText(String.valueOf(intValue));break;}case LONG:{updateField_extraction_3();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "updateField",
                        "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{int wordValue=signed ? (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | (values[1] << 8) : (values[1] & 0xff) | (values[0] << 8)) : (byteOrder == ByteOrder.LITTLE_ENDIAN ? (values[0] & 0xff) | ((values[1] & 0xff) << 8) : (values[1] & 0xff) | ((values[0] & 0xff) << 8));wordTextField.setText(String.valueOf(wordValue));break;}case INTEGER:{updateField_extraction_2();break;}case LONG:{updateField_extraction_3();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "updateField",
                        "code": "private void updateField(ValuesPanelField valuesPanelField){switch (valuesPanelField) {case BINARY0:{      binaryCheckBox0.setSelected((values[0] & 0x80) > 0);      break;    }case BINARY1:{    binaryCheckBox1.setSelected((values[0] & 0x40) > 0);    break;  }case BINARY2:{  binaryCheckBox2.setSelected((values[0] & 0x20) > 0);  break;}case BINARY3:{binaryCheckBox3.setSelected((values[0] & 0x10) > 0);break;}case BINARY4:{binaryCheckBox4.setSelected((values[0] & 0x8) > 0);break;}case BINARY5:{binaryCheckBox5.setSelected((values[0] & 0x4) > 0);break;}case BINARY6:{binaryCheckBox6.setSelected((values[0] & 0x2) > 0);break;}case BINARY7:{binaryCheckBox7.setSelected((values[0] & 0x1) > 0);break;}case BYTE:{byteTextField.setText(String.valueOf(signed ? values[0] : values[0] & 0xff));break;}case WORD:{updateField_extraction_1();break;}case INTEGER:{updateField_extraction_2();break;}case LONG:{updateField_extraction_3();break;}case FLOAT:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}floatTextField.setText(String.valueOf(byteBuffer.getFloat()));break;}case DOUBLE:{byteBuffer.rewind();if (byteBuffer.order() != byteOrder) {byteBuffer.order(byteOrder);}doubleTextField.setText(String.valueOf(byteBuffer.getDouble()));break;}case CHARACTER:{String strValue=new String(values,codeArea.getCharset());if (strValue.length() > 0) {characterTextField.setText(strValue.substring(0,1));} else {characterTextField.setText(\"\");}break;}case STRING:{String strValue=updateField_extraction_4();stringTextField.setText(strValue);stringTextField.setCaretPosition(0);break;}}}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.hexviewer.ValuesPanel.updateField.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist": {
        "ResourceListPane": {
            "buildTree": {
                "original": {
                    "method_name": "buildTree",
                    "code": "private void buildTree(ResourceContainer container,ResourceTreeNode root){  if (!container.resourceClasses.isEmpty()) {    for (    String name : container.resourceClasses.keySet()) {      final String[] spl=name.split(\"/\");      if (spl.length < 2) {        root.add(new ResourceTreeNode(name + \".class\"));      } else {        ResourceTreeNode parent=root;        for (int i1=0; i1 < spl.length; i1++) {          String s=spl[i1];          if (i1 == spl.length - 1)           s+=\".class\";          ResourceTreeNode child=null;          for (int i=0; i < parent.getChildCount(); i++) {            if (((ResourceTreeNode)parent.getChildAt(i)).getUserObject().equals(s)) {              child=(ResourceTreeNode)parent.getChildAt(i);              break;            }          }          if (child == null) {            child=new ResourceTreeNode(s);            parent.add(child);          }          parent=child;        }      }    }  }  if (!container.resourceFiles.isEmpty()) {    for (    final Entry<String,byte[]> entry : container.resourceFiles.entrySet()) {      String name=entry.getKey();      final String[] spl=name.split(\"/\");      if (spl.length < 2) {        root.add(new ResourceTreeNode(name));      } else {        ResourceTreeNode parent=root;        for (        final String s : spl) {          ResourceTreeNode child=null;          for (int i=0; i < parent.getChildCount(); i++) {            if (((ResourceTreeNode)parent.getChildAt(i)).getUserObject().equals(s)) {              child=(ResourceTreeNode)parent.getChildAt(i);              break;            }          }          if (child == null) {            child=new ResourceTreeNode(s);            parent.add(child);          }          parent=child;        }      }    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.buildTree.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "buildTree",
                        "code": "private void buildTree(ResourceContainer container,ResourceTreeNode root){  if (!container.resourceClasses.isEmpty()) {    for (    String name : container.resourceClasses.keySet()) {      final String[] spl=name.split(\"/\");      if (spl.length < 2) {        root.add(new ResourceTreeNode(name + \".class\"));      } else {        ResourceTreeNode parent=root;        for (int i1=0; i1 < spl.length; i1++) {          String s=spl[i1];          if (i1 == spl.length - 1)           s+=\".class\";          ResourceTreeNode child=null;          for (int i=0; i < parent.getChildCount(); i++) {            if (((ResourceTreeNode)parent.getChildAt(i)).getUserObject().equals(s)) {              child=(ResourceTreeNode)parent.getChildAt(i);              break;            }          }          if (child == null) {            child=new ResourceTreeNode(s);            parent.add(child);          }          parent=child;        }      }    }  }  if (!container.resourceFiles.isEmpty()) {    for (    final Entry<String,byte[]> entry : container.resourceFiles.entrySet()) {      String name=entry.getKey();      final String[] spl=name.split(\"/\");      if (spl.length < 2) {        root.add(new ResourceTreeNode(name));      } else {        ResourceTreeNode parent=root;        buildTree_extraction_2(spl,parent);      }    }  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.buildTree.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "buildTree",
                        "code": "private void buildTree(ResourceContainer container,ResourceTreeNode root){  if (!container.resourceClasses.isEmpty()) {    for (    String name : container.resourceClasses.keySet()) {      final String[] spl=name.split(\"/\");      if (spl.length < 2) {        root.add(new ResourceTreeNode(name + \".class\"));      } else {        ResourceTreeNode parent=root;        buildTree_extraction_1(spl,parent);      }    }  }  if (!container.resourceFiles.isEmpty()) {    for (    final Entry<String,byte[]> entry : container.resourceFiles.entrySet()) {      String name=entry.getKey();      final String[] spl=name.split(\"/\");      if (spl.length < 2) {        root.add(new ResourceTreeNode(name));      } else {        ResourceTreeNode parent=root;        buildTree_extraction_2(spl,parent);      }    }  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.buildTree.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "openPath": {
                "original": {
                    "method_name": "openPath",
                    "code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      if (resourceMode) {      }      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   if (container.resourceFiles.containsKey(name)) {    final String fn=name.toLowerCase();    final String extension=fn.contains(\":\") ? null : FilenameUtils.getExtension(fn);    Import imp=Import.extensionMap.get(extension);    if (imp == null)     BytecodeViewer.viewer.workPane.addFileResource(container,name); else {      int hash=(container.name + name).hashCode();      File tempFile=new File(tempDirectory + fs + hash+ fs+ name+ \".\"+ extension);      if (!tempFile.exists()) {        DiskWriter.replaceFileBytes(tempFile.getAbsolutePath(),content,false);        try {          imp.getImporter().open(tempFile);        } catch (        Exception e) {          e.printStackTrace();          BytecodeViewer.viewer.workPane.addFileResource(container,name);        }      } else {      }    }  }}",
                    "extraction_name": null,
                    "predictions": [
                        "openPathExtractResource",
                        "openPathExtractResource"
                    ],
                    "similarities": [
                        0.8195312121133317,
                        0.8195312121133317
                    ],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.openPath.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "openPath",
                        "code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      if (resourceMode) {      }      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPath_extraction_2(container,name,content);}",
                        "extraction_name": "Extraction1",
                        "prediction": "openPathExtractResource",
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.openPath.Extraction1.java",
                        "updated_code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      if (resourceMode) {      }      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPathExtractResource(container,name,content);}"
                    },
                    {
                        "method_name": "openPath",
                        "code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      openPath_extraction_1(resourceMode);      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPath_extraction_2(container,name,content);}",
                        "extraction_name": "Extraction2",
                        "prediction": "openPathClassResource",
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane.openPath.Extraction2.java",
                        "updated_code": "public void openPath(TreePath path){  if (path == null || path.getPathCount() == 1)   return;  final StringBuilder nameBuffer=new StringBuilder();  for (int i=2; i < path.getPathCount(); i++) {    nameBuffer.append(path.getPathComponent(i));    if (i < path.getPathCount() - 1)     nameBuffer.append(\"/\");  }  String cheapHax=path.getPathComponent(1).toString();  ResourceContainer container=null;  for (  ResourceContainer c : BytecodeViewer.resourceContainers.values()) {    if (c.name.equals(cheapHax))     container=c;  }  String name=nameBuffer.toString();  boolean resourceMode=false;  byte[] content=container.resourceClassBytes.get(name);  if (content == null) {    content=container.resourceFiles.get(name);    resourceMode=true;  }  if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase(\"cafebabe\") || name.endsWith(\".class\")) {    try {      openPathClassResource(resourceMode);      BytecodeViewer.viewer.workPane.addClassResource(container,name);    } catch (    Exception e) {      e.printStackTrace();      BytecodeViewer.viewer.workPane.addFileResource(container,name);    }  } else   openPathExtractResource(container,name,content);}"
                    }
                ],
                "file_name": null
            }
        }
    },
    "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled": {
        "ReplaceStrings": {
            "scanClassNode": {
                "original": {
                    "method_name": "scanClassNode",
                    "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        String s=((String[])v)[i];        if (contains) {          if (s.contains(originalLDC)) {            f.value=((String[])f.value)[i].replaceAll(originalLDC,newLDC);            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC)+ \"\\\"\");          }        } else {          if (s.equals(originalLDC)) {            ((String[])f.value)[i]=newLDC;            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC+ \"\\\"\");          }        }      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        if (((LdcInsnNode)a).cst instanceof String) {          final String s=(String)((LdcInsnNode)a).cst;          if (contains) {            if (s.contains(originalLDC)) {              ((LdcInsnNode)a).cst=((String)((LdcInsnNode)a).cst).replaceAll(originalLDC,newLDC);              String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");              frame.appendText(classNode.name + \".\" + m.name+ \"\"+ m.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC).replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")+ \"\\\"\");            }          } else {            if (s.equals(originalLDC)) {              ((LdcInsnNode)a).cst=newLDC;              String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");              frame.appendText(classNode.name + \".\" + m.name+ \"\"+ m.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")+ \"\\\"\");            }          }        }      }    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "scanClassNode",
                        "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        String s=((String[])v)[i];        if (contains) {          if (s.contains(originalLDC)) {            f.value=((String[])f.value)[i].replaceAll(originalLDC,newLDC);            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ s.replaceAll(originalLDC,newLDC)+ \"\\\"\");          }        } else {          if (s.equals(originalLDC)) {            ((String[])f.value)[i]=newLDC;            String ugh=s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\");            frame.appendText(classNode.name + \".\" + f.name+ \"\"+ f.desc+ \" -> \\\"\"+ ugh+ \"\\\" replaced with \\\"\"+ newLDC+ \"\\\"\");          }        }      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_extraction_3(classNode,m,a);      }    }  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "scanClassNode",
                        "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      String s=(String)v;      if (contains) {        if (s.contains(originalLDC))         f.value=((String)f.value).replaceAll(originalLDC,newLDC);      } else {        if (s.equals(originalLDC))         f.value=newLDC;      }    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        scanClassNode_extraction_2(classNode,f,v,i);      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_extraction_3(classNode,m,a);      }    }  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "scanClassNode",
                        "code": "public void scanClassNode(ClassNode classNode){  for (  Object o : classNode.fields.toArray()) {    FieldNode f=(FieldNode)o;    Object v=f.value;    if (v instanceof String) {      scanClassNode_extraction_1(f,v);    }    if (v instanceof String[]) {      for (int i=0; i < ((String[])v).length; i++) {        scanClassNode_extraction_2(classNode,f,v,i);      }    }  }  for (  Object o : classNode.methods.toArray()) {    MethodNode m=(MethodNode)o;    InsnList iList=m.instructions;    for (    AbstractInsnNode a : iList.toArray()) {      if (a instanceof LdcInsnNode) {        scanClassNode_extraction_3(classNode,m,a);      }    }  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings.scanClassNode.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "ShowAllStrings": {
            "execute": {
                "original": {
                    "method_name": "execute",
                    "code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      if (v instanceof String) {        String s=(String)v;        if (!s.isEmpty())         sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);      }      if (v instanceof String[]) {        for (int i=0; i < ((String[])v).length; i++) {          String s=((String[])v)[i];          if (!s.isEmpty())           sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\"[\").append(i).append(\"] -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);        }      }    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          if (((LdcInsnNode)a).cst instanceof String) {            final String s=(String)((LdcInsnNode)a).cst;            if (!s.isEmpty())             sb.append(classNode.name).append(\".\").append(m.name).append(m.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);          }        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ShowAllStrings.execute.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "execute",
                        "code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      if (v instanceof String) {        String s=(String)v;        if (!s.isEmpty())         sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);      }      if (v instanceof String[]) {        for (int i=0; i < ((String[])v).length; i++) {          String s=((String[])v)[i];          if (!s.isEmpty())           sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\"[\").append(i).append(\"] -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);        }      }    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          execute_extraction_2(sb,classNode,m,a);        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ShowAllStrings.execute.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "execute",
                        "code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      execute_extraction_1(sb,classNode,f,v);    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          execute_extraction_2(sb,classNode,m,a);        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ShowAllStrings.execute.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.util": {
        "JTextAreaUtils": {
            "search": {
                "original": {
                    "method_name": "search",
                    "code": "/**  * This was really interesting to write. * @author Konloch */public static void search(JTextArea textArea,String search,boolean forwardSearchDirection,boolean caseSensitiveSearch){  try {    if (search.isEmpty()) {      highlight(textArea,\"\",caseSensitiveSearch);      return;    }    int startLine=textArea.getDocument().getDefaultRootElement().getElementIndex(textArea.getCaretPosition()) + 1;    int currentLine=1;    boolean canSearch=false;    String[] test=textArea.getText().split(\"\\r?\\n\");    int lastGoodLine=-1;    int firstPos=-1;    boolean found=false;    if (forwardSearchDirection) {      for (      String s : test) {        if (!caseSensitiveSearch) {          s=s.toLowerCase();          search=search.toLowerCase();        }        if (currentLine == startLine) {          canSearch=true;        } else         if (s.contains(search)) {          if (canSearch) {            textArea.setCaretPosition(textArea.getDocument().getDefaultRootElement().getElement(currentLine - 1).getStartOffset());            canSearch=false;            found=true;          }          if (firstPos == -1)           firstPos=currentLine;        }        currentLine++;      }      if (!found && firstPos != -1) {        textArea.setCaretPosition(textArea.getDocument().getDefaultRootElement().getElement(firstPos - 1).getStartOffset());      }    } else {      canSearch=true;      for (      String s : test) {        if (!caseSensitiveSearch) {          s=s.toLowerCase();          search=search.toLowerCase();        }        if (s.contains(search)) {          if (lastGoodLine != -1 && canSearch)           textArea.setCaretPosition(textArea.getDocument().getDefaultRootElement().getElement(lastGoodLine - 1).getStartOffset());          lastGoodLine=currentLine;          if (currentLine >= startLine)           canSearch=false;        }        currentLine++;      }      if (lastGoodLine != -1 && textArea.getDocument().getDefaultRootElement().getElementIndex(textArea.getCaretPosition()) + 1 == startLine) {        textArea.setCaretPosition(textArea.getDocument().getDefaultRootElement().getElement(lastGoodLine - 1).getStartOffset());      }    }    highlight(textArea,search,caseSensitiveSearch);  } catch (  Exception e) {    BytecodeViewer.handleException(e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.util.JTextAreaUtils.search.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "search",
                        "code": "/**  * This was really interesting to write. * @author Konloch */public static void search(JTextArea textArea,String search,boolean forwardSearchDirection,boolean caseSensitiveSearch){  try {    if (search.isEmpty()) {      highlight(textArea,\"\",caseSensitiveSearch);      return;    }    int startLine=textArea.getDocument().getDefaultRootElement().getElementIndex(textArea.getCaretPosition()) + 1;    int currentLine=1;    boolean canSearch=false;    String[] test=textArea.getText().split(\"\\r?\\n\");    int lastGoodLine=-1;    int firstPos=-1;    boolean found=false;    if (forwardSearchDirection) {      for (      String s : test) {        if (!caseSensitiveSearch) {          s=s.toLowerCase();          search=search.toLowerCase();        }        if (currentLine == startLine) {          canSearch=true;        } else         if (s.contains(search)) {          if (canSearch) {            textArea.setCaretPosition(textArea.getDocument().getDefaultRootElement().getElement(currentLine - 1).getStartOffset());            canSearch=false;            found=true;          }          if (firstPos == -1)           firstPos=currentLine;        }        currentLine++;      }      if (!found && firstPos != -1) {        textArea.setCaretPosition(textArea.getDocument().getDefaultRootElement().getElement(firstPos - 1).getStartOffset());      }    } else {      canSearch=true;      search=search_extraction_2(textArea,search,caseSensitiveSearch,startLine,currentLine,canSearch,test,lastGoodLine);    }    highlight(textArea,search,caseSensitiveSearch);  } catch (  Exception e) {    BytecodeViewer.handleException(e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.util.JTextAreaUtils.search.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "search",
                        "code": "/**  * This was really interesting to write. * @author Konloch */public static void search(JTextArea textArea,String search,boolean forwardSearchDirection,boolean caseSensitiveSearch){  try {    if (search.isEmpty()) {      highlight(textArea,\"\",caseSensitiveSearch);      return;    }    int startLine=textArea.getDocument().getDefaultRootElement().getElementIndex(textArea.getCaretPosition()) + 1;    int currentLine=1;    boolean canSearch=false;    String[] test=textArea.getText().split(\"\\r?\\n\");    int lastGoodLine=-1;    int firstPos=-1;    boolean found=false;    if (forwardSearchDirection) {      search=search_extraction_1(textArea,search,caseSensitiveSearch,startLine,currentLine,canSearch,test,firstPos,found);    } else {      canSearch=true;      search=search_extraction_2(textArea,search,caseSensitiveSearch,startLine,currentLine,canSearch,test,lastGoodLine);    }    highlight(textArea,search,caseSensitiveSearch);  } catch (  Exception e) {    BytecodeViewer.handleException(e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.util.JTextAreaUtils.search.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "cybercaptor-server.src.main.java.org.fiware.cybercaptor.server.attackgraph": {
        "AttackPath": {
            "getRemediationActionForLeaf": {
                "original": {
                    "method_name": "getRemediationActionForLeaf",
                    "code": "/**  * @param leaf         An attack path leaf * @param topology     the network topology * @param conn         the database connection * @param useSnortRule : if true, use the snort rules else don't use it for remediation * @return the possible remediation action to remediate this leaf. To remediate the leaf, we can apply remediation[1] OR remadiation[2] OR remediation[3]the remediation[1] is remediation[1][1] AND remediation[1][2] AND remediation[1][3] etc... * @throws Exception */public List<List<RemediationAction>> getRemediationActionForLeaf(Vertex leaf,InformationSystem topology,Connection conn,String costParametersFolder,boolean useSnortRule) throws Exception {  List<List<RemediationAction>> result=new ArrayList<List<RemediationAction>>();  if (leaf.fact != null && leaf.fact.type == FactType.DATALOG_FACT && leaf.fact.datalogCommand != null) {    DatalogCommand command=leaf.fact.datalogCommand;switch (command.command) {case \"vulExists\":{        List<RemediationAction> remediateVulnerability=new ArrayList<RemediationAction>();        Vulnerability vulnerability=new Vulnerability(conn,Vulnerability.getIdVulnerabilityFromCVE(command.params[1],conn));        List<List<InformationSystemHost>> attackerPath=getAttackerRouteToAVulnerability(leaf,topology);        List<Patch> patches=vulnerability.getPatchs(conn);        List<Rule> rules=vulnerability.getRules(conn);        if (patches.size() > 0) {          RemediationAction remediation=new RemediationAction(ActionType.APPLY_PATCH,costParametersFolder);          remediation.setRelatedVertex(leaf);          remediation.getPossibleMachines().add(leaf.getRelatedMachine(topology));          for (          Patch patche : patches) {            remediation.getRemediationParameters().add(patche);          }          remediateVulnerability.add(remediation);          result.add(remediateVulnerability);        }        if (rules.size() > 0 && useSnortRule) {          List<RemediationAction> detectVulnerabilityOnAllPath=new ArrayList<RemediationAction>();          for (          List<InformationSystemHost> anAttackerPath : attackerPath) {            RemediationAction remediation=new RemediationAction(ActionType.DEPLOY_SNORT_RULE,costParametersFolder);            remediation.setRelatedVertex(leaf);            for (            Rule rule : rules) {              rule.setRule(rule.getRule().replaceFirst(\"alert\",\"reject\"));              remediation.getRemediationParameters().add(rule);            }            for (            InformationSystemHost anAnAttackerPath : anAttackerPath) {              remediation.getPossibleMachines().add(anAnAttackerPath);            }            detectVulnerabilityOnAllPath.add(remediation);          }          result.add(detectVulnerabilityOnAllPath);        }        break;      }case \"inCompetent\":    List<RemediationAction> trainUser=new ArrayList<RemediationAction>();  RemediationAction remediation=new RemediationAction(ActionType.TRAIN_USER,costParametersFolder);remediation.setRelatedVertex(leaf);remediation.getRemediationParameters().add(command.params[0]);trainUser.add(remediation);result.add(trainUser);break;case \"hacl\":case \"haclprimit\":{InformationSystemHost from=topology.getHostByNameOrIPAddress(command.params[0]);InformationSystemHost to=topology.getHostByNameOrIPAddress(command.params[1]);List<List<InformationSystemHost>> attackerPath=command.getRoutesBetweenHostsOfHacl(topology);List<RemediationAction> blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath1 : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);if (command.params[0].equals(\"internet\")) {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),new IPAddress(\"0.0.0.0\"),new IPAddress(\"0.0.0.0\"),new PortRange(true),to.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),PortRange.fromString(command.params[3]),Table.INPUT);remediation.getRemediationParameters().add(fwRule);} else if (command.params[1].equals(\"internet\")) {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),from.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),new PortRange(true),new IPAddress(\"0.0.0.0\"),new IPAddress(\"0.0.0.0\"),PortRange.fromString(command.params[3]),Table.INPUT);remediation.getRemediationParameters().add(fwRule);} else {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),from.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),new PortRange(true),to.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),PortRange.fromString(command.params[3]),Table.INPUT);remediation.getRemediationParameters().add(fwRule);}for (InformationSystemHost currentAttackerPathHost : anAttackerPath1) {if (command.params[0].equals(\"internet\")) {remediation.getPossibleMachines().add(currentAttackerPathHost);} else {InformationSystemHost sourceHost=topology.existingMachineByNameOrIPAddress(command.params[0]);if (sourceHost == null || !sourceHost.equals(currentAttackerPathHost)) {remediation.getPossibleMachines().add(currentAttackerPathHost);}}}blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);if (command.params[0].equals(\"internet\")) {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),new IPAddress(\"0.0.0.0\"),new IPAddress(\"0.0.0.0\"),new PortRange(true),to.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),PortRange.fromString(command.params[3]),Table.OUTPUT);remediation.getRemediationParameters().add(fwRule);} else if (command.params[1].equals(\"internet\")) {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),from.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),new PortRange(true),new IPAddress(\"0.0.0.0\"),new IPAddress(\"0.0.0.0\"),PortRange.fromString(command.params[3]),Table.OUTPUT);remediation.getRemediationParameters().add(fwRule);} else {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),from.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),new PortRange(true),to.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),PortRange.fromString(command.params[3]),Table.OUTPUT);remediation.getRemediationParameters().add(fwRule);}for (InformationSystemHost currentAttackerPathHost : anAttackerPath) {if (command.params[1].equals(\"internet\")) {remediation.getPossibleMachines().add(currentAttackerPathHost);} else {InformationSystemHost destinationHost=topology.existingMachineByNameOrIPAddress(command.params[1]);if (destinationHost == null || !destinationHost.equals(currentAttackerPathHost)) {remediation.getPossibleMachines().add(currentAttackerPathHost);}}}blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);break;}}}return result;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "cybercaptor-server.src.main.java.org.fiware.cybercaptor.server.attackgraph.AttackPath.getRemediationActionForLeaf.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getRemediationActionForLeaf",
                        "code": "/**  * @param leaf         An attack path leaf * @param topology     the network topology * @param conn         the database connection * @param useSnortRule : if true, use the snort rules else don't use it for remediation * @return the possible remediation action to remediate this leaf. To remediate the leaf, we can apply remediation[1] OR remadiation[2] OR remediation[3]the remediation[1] is remediation[1][1] AND remediation[1][2] AND remediation[1][3] etc... * @throws Exception */public List<List<RemediationAction>> getRemediationActionForLeaf(Vertex leaf,InformationSystem topology,Connection conn,String costParametersFolder,boolean useSnortRule) throws Exception {  List<List<RemediationAction>> result=new ArrayList<List<RemediationAction>>();  if (leaf.fact != null && leaf.fact.type == FactType.DATALOG_FACT && leaf.fact.datalogCommand != null) {    DatalogCommand command=leaf.fact.datalogCommand;switch (command.command) {case \"vulExists\":{        List<RemediationAction> remediateVulnerability=new ArrayList<RemediationAction>();        Vulnerability vulnerability=new Vulnerability(conn,Vulnerability.getIdVulnerabilityFromCVE(command.params[1],conn));        List<List<InformationSystemHost>> attackerPath=getAttackerRouteToAVulnerability(leaf,topology);        List<Patch> patches=vulnerability.getPatchs(conn);        List<Rule> rules=vulnerability.getRules(conn);        if (patches.size() > 0) {          RemediationAction remediation=new RemediationAction(ActionType.APPLY_PATCH,costParametersFolder);          remediation.setRelatedVertex(leaf);          remediation.getPossibleMachines().add(leaf.getRelatedMachine(topology));          for (          Patch patche : patches) {            remediation.getRemediationParameters().add(patche);          }          remediateVulnerability.add(remediation);          result.add(remediateVulnerability);        }        if (rules.size() > 0 && useSnortRule) {          List<RemediationAction> detectVulnerabilityOnAllPath=new ArrayList<RemediationAction>();          for (          List<InformationSystemHost> anAttackerPath : attackerPath) {            RemediationAction remediation=new RemediationAction(ActionType.DEPLOY_SNORT_RULE,costParametersFolder);            remediation.setRelatedVertex(leaf);            for (            Rule rule : rules) {              rule.setRule(rule.getRule().replaceFirst(\"alert\",\"reject\"));              remediation.getRemediationParameters().add(rule);            }            for (            InformationSystemHost anAnAttackerPath : anAttackerPath) {              remediation.getPossibleMachines().add(anAnAttackerPath);            }            detectVulnerabilityOnAllPath.add(remediation);          }          result.add(detectVulnerabilityOnAllPath);        }        break;      }case \"inCompetent\":    List<RemediationAction> trainUser=new ArrayList<RemediationAction>();  RemediationAction remediation=new RemediationAction(ActionType.TRAIN_USER,costParametersFolder);remediation.setRelatedVertex(leaf);remediation.getRemediationParameters().add(command.params[0]);trainUser.add(remediation);result.add(trainUser);break;case \"hacl\":case \"haclprimit\":{InformationSystemHost from=topology.getHostByNameOrIPAddress(command.params[0]);InformationSystemHost to=topology.getHostByNameOrIPAddress(command.params[1]);List<List<InformationSystemHost>> attackerPath=command.getRoutesBetweenHostsOfHacl(topology);List<RemediationAction> blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath1 : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);if (command.params[0].equals(\"internet\")) {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),new IPAddress(\"0.0.0.0\"),new IPAddress(\"0.0.0.0\"),new PortRange(true),to.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),PortRange.fromString(command.params[3]),Table.INPUT);remediation.getRemediationParameters().add(fwRule);} else if (command.params[1].equals(\"internet\")) {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),from.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),new PortRange(true),new IPAddress(\"0.0.0.0\"),new IPAddress(\"0.0.0.0\"),PortRange.fromString(command.params[3]),Table.INPUT);remediation.getRemediationParameters().add(fwRule);} else {FirewallRule fwRule=new FirewallRule(Action.DROP,Protocol.getProtocolFromString(command.params[2]),from.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),new PortRange(true),to.getFirstIPAddress(),new IPAddress(\"255.255.255.255\"),PortRange.fromString(command.params[3]),Table.INPUT);remediation.getRemediationParameters().add(fwRule);}for (InformationSystemHost currentAttackerPathHost : anAttackerPath1) {if (command.params[0].equals(\"internet\")) {remediation.getPossibleMachines().add(currentAttackerPathHost);} else {InformationSystemHost sourceHost=topology.existingMachineByNameOrIPAddress(command.params[0]);if (sourceHost == null || !sourceHost.equals(currentAttackerPathHost)) {remediation.getPossibleMachines().add(currentAttackerPathHost);}}}blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);getRemediationActionForLeaf_extraction_3(topology,command,remediation,from,to,anAttackerPath);blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);break;}}}return result;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "cybercaptor-server.src.main.java.org.fiware.cybercaptor.server.attackgraph.AttackPath.getRemediationActionForLeaf.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getRemediationActionForLeaf",
                        "code": "/**  * @param leaf         An attack path leaf * @param topology     the network topology * @param conn         the database connection * @param useSnortRule : if true, use the snort rules else don't use it for remediation * @return the possible remediation action to remediate this leaf. To remediate the leaf, we can apply remediation[1] OR remadiation[2] OR remediation[3]the remediation[1] is remediation[1][1] AND remediation[1][2] AND remediation[1][3] etc... * @throws Exception */public List<List<RemediationAction>> getRemediationActionForLeaf(Vertex leaf,InformationSystem topology,Connection conn,String costParametersFolder,boolean useSnortRule) throws Exception {  List<List<RemediationAction>> result=new ArrayList<List<RemediationAction>>();  if (leaf.fact != null && leaf.fact.type == FactType.DATALOG_FACT && leaf.fact.datalogCommand != null) {    DatalogCommand command=leaf.fact.datalogCommand;switch (command.command) {case \"vulExists\":{        List<RemediationAction> remediateVulnerability=new ArrayList<RemediationAction>();        Vulnerability vulnerability=new Vulnerability(conn,Vulnerability.getIdVulnerabilityFromCVE(command.params[1],conn));        List<List<InformationSystemHost>> attackerPath=getAttackerRouteToAVulnerability(leaf,topology);        List<Patch> patches=vulnerability.getPatchs(conn);        List<Rule> rules=vulnerability.getRules(conn);        if (patches.size() > 0) {          RemediationAction remediation=new RemediationAction(ActionType.APPLY_PATCH,costParametersFolder);          remediation.setRelatedVertex(leaf);          remediation.getPossibleMachines().add(leaf.getRelatedMachine(topology));          for (          Patch patche : patches) {            remediation.getRemediationParameters().add(patche);          }          remediateVulnerability.add(remediation);          result.add(remediateVulnerability);        }        if (rules.size() > 0 && useSnortRule) {          List<RemediationAction> detectVulnerabilityOnAllPath=new ArrayList<RemediationAction>();          for (          List<InformationSystemHost> anAttackerPath : attackerPath) {            RemediationAction remediation=new RemediationAction(ActionType.DEPLOY_SNORT_RULE,costParametersFolder);            remediation.setRelatedVertex(leaf);            for (            Rule rule : rules) {              rule.setRule(rule.getRule().replaceFirst(\"alert\",\"reject\"));              remediation.getRemediationParameters().add(rule);            }            for (            InformationSystemHost anAnAttackerPath : anAttackerPath) {              remediation.getPossibleMachines().add(anAnAttackerPath);            }            detectVulnerabilityOnAllPath.add(remediation);          }          result.add(detectVulnerabilityOnAllPath);        }        break;      }case \"inCompetent\":    List<RemediationAction> trainUser=new ArrayList<RemediationAction>();  RemediationAction remediation=new RemediationAction(ActionType.TRAIN_USER,costParametersFolder);remediation.setRelatedVertex(leaf);remediation.getRemediationParameters().add(command.params[0]);trainUser.add(remediation);result.add(trainUser);break;case \"hacl\":case \"haclprimit\":{InformationSystemHost from=topology.getHostByNameOrIPAddress(command.params[0]);InformationSystemHost to=topology.getHostByNameOrIPAddress(command.params[1]);List<List<InformationSystemHost>> attackerPath=command.getRoutesBetweenHostsOfHacl(topology);List<RemediationAction> blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath1 : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);getRemediationActionForLeaf_extraction_2(topology,command,remediation,from,to,anAttackerPath1);blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);getRemediationActionForLeaf_extraction_3(topology,command,remediation,from,to,anAttackerPath);blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);break;}}}return result;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "cybercaptor-server.src.main.java.org.fiware.cybercaptor.server.attackgraph.AttackPath.getRemediationActionForLeaf.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getRemediationActionForLeaf",
                        "code": "/**  * @param leaf         An attack path leaf * @param topology     the network topology * @param conn         the database connection * @param useSnortRule : if true, use the snort rules else don't use it for remediation * @return the possible remediation action to remediate this leaf. To remediate the leaf, we can apply remediation[1] OR remadiation[2] OR remediation[3]the remediation[1] is remediation[1][1] AND remediation[1][2] AND remediation[1][3] etc... * @throws Exception */public List<List<RemediationAction>> getRemediationActionForLeaf(Vertex leaf,InformationSystem topology,Connection conn,String costParametersFolder,boolean useSnortRule) throws Exception {  List<List<RemediationAction>> result=new ArrayList<List<RemediationAction>>();  if (leaf.fact != null && leaf.fact.type == FactType.DATALOG_FACT && leaf.fact.datalogCommand != null) {    DatalogCommand command=leaf.fact.datalogCommand;switch (command.command) {case \"vulExists\":{        List<RemediationAction> remediateVulnerability=new ArrayList<RemediationAction>();        Vulnerability vulnerability=new Vulnerability(conn,Vulnerability.getIdVulnerabilityFromCVE(command.params[1],conn));        List<List<InformationSystemHost>> attackerPath=getAttackerRouteToAVulnerability(leaf,topology);        List<Patch> patches=vulnerability.getPatchs(conn);        getRemediationActionForLeaf_extraction_1(leaf,topology,conn,costParametersFolder,useSnortRule,result,remediateVulnerability,vulnerability,attackerPath,patches);        break;      }case \"inCompetent\":    List<RemediationAction> trainUser=new ArrayList<RemediationAction>();  RemediationAction remediation=new RemediationAction(ActionType.TRAIN_USER,costParametersFolder);remediation.setRelatedVertex(leaf);remediation.getRemediationParameters().add(command.params[0]);trainUser.add(remediation);result.add(trainUser);break;case \"hacl\":case \"haclprimit\":{InformationSystemHost from=topology.getHostByNameOrIPAddress(command.params[0]);InformationSystemHost to=topology.getHostByNameOrIPAddress(command.params[1]);List<List<InformationSystemHost>> attackerPath=command.getRoutesBetweenHostsOfHacl(topology);List<RemediationAction> blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath1 : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);getRemediationActionForLeaf_extraction_2(topology,command,remediation,from,to,anAttackerPath1);blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);blockAttackerOnAllPath=new ArrayList<RemediationAction>();for (List<InformationSystemHost> anAttackerPath : attackerPath) {remediation=new RemediationAction(ActionType.DEPLOY_FIREWALL_RULE,costParametersFolder);remediation.setRelatedVertex(leaf);getRemediationActionForLeaf_extraction_3(topology,command,remediation,from,to,anAttackerPath);blockAttackerOnAllPath.add(remediation);}result.add(blockAttackerOnAllPath);break;}}}return result;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "cybercaptor-server.src.main.java.org.fiware.cybercaptor.server.attackgraph.AttackPath.getRemediationActionForLeaf.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "fastjson.src.main.java.com.alibaba.fastjson": {
        "JSONObject": {
            "invoke": {
                "original": {
                    "method_name": "invoke",
                    "code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    if (returnType != void.class) {      throw new JSONException(\"illegal setter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (!name.startsWith(\"set\")) {        throw new JSONException(\"illegal setter\");      }      name=name.substring(3);      if (name.length() == 0) {        throw new JSONException(\"illegal setter\");      }      name=Character.toLowerCase(name.charAt(0)) + name.substring(1);    }    map.put(name,args[0]);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (name.startsWith(\"get\")) {        name=name.substring(3);        if (name.length() == 0) {          throw new JSONException(\"illegal getter\");        }        name=Character.toLowerCase(name.charAt(0)) + name.substring(1);      } else       if (name.startsWith(\"is\")) {        name=name.substring(2);        if (name.length() == 0) {          throw new JSONException(\"illegal getter\");        }        name=Character.toLowerCase(name.charAt(0)) + name.substring(1);      } else       if (name.startsWith(\"hashCode\")) {        return this.hashCode();      } else       if (name.startsWith(\"toString\")) {        return this.toString();      } else {        throw new JSONException(\"illegal getter\");      }    }    Object value=map.get(name);    return TypeUtils.cast(value,method.getGenericReturnType(),ParserConfig.getGlobalInstance());  }  throw new UnsupportedOperationException(method.toGenericString());}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONObject.invoke.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "invoke",
                        "code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    if (returnType != void.class) {      throw new JSONException(\"illegal setter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (!name.startsWith(\"set\")) {        throw new JSONException(\"illegal setter\");      }      name=name.substring(3);      if (name.length() == 0) {        throw new JSONException(\"illegal setter\");      }      name=Character.toLowerCase(name.charAt(0)) + name.substring(1);    }    map.put(name,args[0]);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    return invoke_extraction_2(method,name);  }  throw new UnsupportedOperationException(method.toGenericString());}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONObject.invoke.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "invoke",
                        "code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    invoke_extraction_1(method,args,returnType);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    return invoke_extraction_2(method,name);  }  throw new UnsupportedOperationException(method.toGenericString());}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONObject.invoke.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "JSONPath": {
            "buildArraySegement": {
                "original": {
                    "method_name": "buildArraySegement",
                    "code": "Segment buildArraySegement(String indexText){  final int indexTextLen=indexText.length();  final char firstChar=indexText.charAt(0);  final char lastChar=indexText.charAt(indexTextLen - 1);  int commaIndex=indexText.indexOf(',');  if (indexText.length() > 2 && firstChar == '\\'' && lastChar == '\\'') {    String propertyName=indexText.substring(1,indexTextLen - 1);    if (commaIndex == -1 || !strArrayPatternx.matcher(indexText).find()) {      return new PropertySegment(propertyName,false);    }    String[] propertyNames=propertyName.split(strArrayRegex);    return new MultiPropertySegment(propertyNames);  }  int colonIndex=indexText.indexOf(':');  if (commaIndex == -1 && colonIndex == -1) {    if (TypeUtils.isNumber(indexText)) {      try {        int index=Integer.parseInt(indexText);        return new ArrayAccessSegment(index);      } catch (      NumberFormatException ex) {        return new PropertySegment(indexText,false);      }    } else {      if (indexText.charAt(0) == '\"' && indexText.charAt(indexText.length() - 1) == '\"') {        indexText=indexText.substring(1,indexText.length() - 1);      }      return new PropertySegment(indexText,false);    }  }  if (commaIndex != -1) {    String[] indexesText=indexText.split(\",\");    int[] indexes=new int[indexesText.length];    for (int i=0; i < indexesText.length; ++i) {      indexes[i]=Integer.parseInt(indexesText[i]);    }    return new MultiIndexSegment(indexes);  }  if (colonIndex != -1) {    String[] indexesText=indexText.split(\":\");    int[] indexes=new int[indexesText.length];    for (int i=0; i < indexesText.length; ++i) {      String str=indexesText[i];      if (str.length() == 0) {        if (i == 0) {          indexes[i]=0;        } else {          throw new UnsupportedOperationException();        }      } else {        indexes[i]=Integer.parseInt(str);      }    }    int start=indexes[0];    int end;    if (indexes.length > 1) {      end=indexes[1];    } else {      end=-1;    }    int step;    if (indexes.length == 3) {      step=indexes[2];    } else {      step=1;    }    if (end >= 0 && end < start) {      throw new UnsupportedOperationException(\"end must greater than or equals start. start \" + start + \",  end \"+ end);    }    if (step <= 0) {      throw new UnsupportedOperationException(\"step must greater than zero : \" + step);    }    return new RangeSegment(start,end,step);  }  throw new UnsupportedOperationException();}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.buildArraySegement.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "buildArraySegement",
                        "code": "Segment buildArraySegement(String indexText){  final int indexTextLen=indexText.length();  final char firstChar=indexText.charAt(0);  final char lastChar=indexText.charAt(indexTextLen - 1);  int commaIndex=indexText.indexOf(',');  if (indexText.length() > 2 && firstChar == '\\'' && lastChar == '\\'') {    String propertyName=indexText.substring(1,indexTextLen - 1);    if (commaIndex == -1 || !strArrayPatternx.matcher(indexText).find()) {      return new PropertySegment(propertyName,false);    }    String[] propertyNames=propertyName.split(strArrayRegex);    return new MultiPropertySegment(propertyNames);  }  int colonIndex=indexText.indexOf(':');  if (commaIndex == -1 && colonIndex == -1) {    if (TypeUtils.isNumber(indexText)) {      try {        int index=Integer.parseInt(indexText);        return new ArrayAccessSegment(index);      } catch (      NumberFormatException ex) {        return new PropertySegment(indexText,false);      }    } else {      if (indexText.charAt(0) == '\"' && indexText.charAt(indexText.length() - 1) == '\"') {        indexText=indexText.substring(1,indexText.length() - 1);      }      return new PropertySegment(indexText,false);    }  }  if (commaIndex != -1) {    String[] indexesText=indexText.split(\",\");    int[] indexes=new int[indexesText.length];    for (int i=0; i < indexesText.length; ++i) {      indexes[i]=Integer.parseInt(indexesText[i]);    }    return new MultiIndexSegment(indexes);  }  if (colonIndex != -1) {    return buildArraySegement_extraction_3(indexText);  }  throw new UnsupportedOperationException();}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.buildArraySegement.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "buildArraySegement",
                        "code": "Segment buildArraySegement(String indexText){  final int indexTextLen=indexText.length();  final char firstChar=indexText.charAt(0);  final char lastChar=indexText.charAt(indexTextLen - 1);  int commaIndex=indexText.indexOf(',');  if (indexText.length() > 2 && firstChar == '\\'' && lastChar == '\\'') {    String propertyName=indexText.substring(1,indexTextLen - 1);    if (commaIndex == -1 || !strArrayPatternx.matcher(indexText).find()) {      return new PropertySegment(propertyName,false);    }    String[] propertyNames=propertyName.split(strArrayRegex);    return new MultiPropertySegment(propertyNames);  }  int colonIndex=indexText.indexOf(':');  if (commaIndex == -1 && colonIndex == -1) {    if (TypeUtils.isNumber(indexText)) {      try {        int index=Integer.parseInt(indexText);        return new ArrayAccessSegment(index);      } catch (      NumberFormatException ex) {        return new PropertySegment(indexText,false);      }    } else {      if (indexText.charAt(0) == '\"' && indexText.charAt(indexText.length() - 1) == '\"') {        indexText=indexText.substring(1,indexText.length() - 1);      }      return new PropertySegment(indexText,false);    }  }  if (commaIndex != -1) {    String[] indexesText=indexText.split(\",\");    int[] indexes=new int[indexesText.length];    buildArraySegement_extraction_2(indexesText,indexes);    return new MultiIndexSegment(indexes);  }  if (colonIndex != -1) {    return buildArraySegement_extraction_3(indexText);  }  throw new UnsupportedOperationException();}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.buildArraySegement.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "buildArraySegement",
                        "code": "Segment buildArraySegement(String indexText){  final int indexTextLen=indexText.length();  final char firstChar=indexText.charAt(0);  final char lastChar=indexText.charAt(indexTextLen - 1);  int commaIndex=indexText.indexOf(',');  if (indexText.length() > 2 && firstChar == '\\'' && lastChar == '\\'') {    String propertyName=indexText.substring(1,indexTextLen - 1);    if (commaIndex == -1 || !strArrayPatternx.matcher(indexText).find()) {      return new PropertySegment(propertyName,false);    }    String[] propertyNames=propertyName.split(strArrayRegex);    return new MultiPropertySegment(propertyNames);  }  int colonIndex=indexText.indexOf(':');  if (commaIndex == -1 && colonIndex == -1) {    if (TypeUtils.isNumber(indexText)) {      try {        int index=Integer.parseInt(indexText);        return new ArrayAccessSegment(index);      } catch (      NumberFormatException ex) {        return new PropertySegment(indexText,false);      }    } else {      indexText=buildArraySegement_extraction_1(indexText);      return new PropertySegment(indexText,false);    }  }  if (commaIndex != -1) {    String[] indexesText=indexText.split(\",\");    int[] indexes=new int[indexesText.length];    buildArraySegement_extraction_2(indexesText,indexes);    return new MultiIndexSegment(indexes);  }  if (colonIndex != -1) {    return buildArraySegement_extraction_3(indexText);  }  throw new UnsupportedOperationException();}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.buildArraySegement.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "compare": {
                "original": {
                    "method_name": "compare",
                    "code": "static int compare(Object a,Object b){  if (a.getClass() == b.getClass()) {    return ((Comparable)a).compareTo(b);  }  Class typeA=a.getClass();  Class typeB=b.getClass();  if (typeA == BigDecimal.class) {    if (typeB == Integer.class) {      b=new BigDecimal((Integer)b);    } else     if (typeB == Long.class) {      b=new BigDecimal((Long)b);    } else     if (typeB == Float.class) {      b=new BigDecimal((Float)b);    } else     if (typeB == Double.class) {      b=new BigDecimal((Double)b);    }  } else   if (typeA == Long.class) {    if (typeB == Integer.class) {      b=new Long((Integer)b);    } else     if (typeB == BigDecimal.class) {      a=new BigDecimal((Long)a);    } else     if (typeB == Float.class) {      a=new Float((Long)a);    } else     if (typeB == Double.class) {      a=new Double((Long)a);    }  } else   if (typeA == Integer.class) {    if (typeB == Long.class) {      a=new Long((Integer)a);    } else     if (typeB == BigDecimal.class) {      a=new BigDecimal((Integer)a);    } else     if (typeB == Float.class) {      a=new Float((Integer)a);    } else     if (typeB == Double.class) {      a=new Double((Integer)a);    }  } else   if (typeA == Double.class) {    if (typeB == Integer.class) {      b=new Double((Integer)b);    } else     if (typeB == Long.class) {      b=new Double((Long)b);    } else     if (typeB == Float.class) {      b=new Double((Float)b);    }  } else   if (typeA == Float.class) {    if (typeB == Integer.class) {      b=new Float((Integer)b);    } else     if (typeB == Long.class) {      b=new Float((Long)b);    } else     if (typeB == Double.class) {      a=new Double((Float)a);    }  }  return ((Comparable)a).compareTo(b);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.compare.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "compare",
                        "code": "static int compare(Object a,Object b){  if (a.getClass() == b.getClass()) {    return ((Comparable)a).compareTo(b);  }  Class typeA=a.getClass();  Class typeB=b.getClass();  if (typeA == BigDecimal.class) {    if (typeB == Integer.class) {      b=new BigDecimal((Integer)b);    } else     if (typeB == Long.class) {      b=new BigDecimal((Long)b);    } else     if (typeB == Float.class) {      b=new BigDecimal((Float)b);    } else     if (typeB == Double.class) {      b=new BigDecimal((Double)b);    }  } else   if (typeA == Long.class) {    if (typeB == Integer.class) {      b=new Long((Integer)b);    } else     if (typeB == BigDecimal.class) {      a=new BigDecimal((Long)a);    } else     if (typeB == Float.class) {      a=new Float((Long)a);    } else     if (typeB == Double.class) {      a=new Double((Long)a);    }  } else   if (typeA == Integer.class) {    if (typeB == Long.class) {      a=new Long((Integer)a);    } else     if (typeB == BigDecimal.class) {      a=new BigDecimal((Integer)a);    } else     if (typeB == Float.class) {      a=new Float((Integer)a);    } else     if (typeB == Double.class) {      a=new Double((Integer)a);    }  } else   if (typeA == Double.class) {    b=compare_extraction_3(b,typeB);  } else   if (typeA == Float.class) {    if (typeB == Integer.class) {      b=new Float((Integer)b);    } else     if (typeB == Long.class) {      b=new Float((Long)b);    } else     if (typeB == Double.class) {      a=new Double((Float)a);    }  }  return ((Comparable)a).compareTo(b);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.compare.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "compare",
                        "code": "static int compare(Object a,Object b){  if (a.getClass() == b.getClass()) {    return ((Comparable)a).compareTo(b);  }  Class typeA=a.getClass();  Class typeB=b.getClass();  if (typeA == BigDecimal.class) {    if (typeB == Integer.class) {      b=new BigDecimal((Integer)b);    } else     if (typeB == Long.class) {      b=new BigDecimal((Long)b);    } else     if (typeB == Float.class) {      b=new BigDecimal((Float)b);    } else     if (typeB == Double.class) {      b=new BigDecimal((Double)b);    }  } else   if (typeA == Long.class) {    if (typeB == Integer.class) {      b=new Long((Integer)b);    } else     if (typeB == BigDecimal.class) {      a=new BigDecimal((Long)a);    } else     if (typeB == Float.class) {      a=new Float((Long)a);    } else     if (typeB == Double.class) {      a=new Double((Long)a);    }  } else   if (typeA == Integer.class) {    a=compare_extraction_2(a,typeB);  } else   if (typeA == Double.class) {    b=compare_extraction_3(b,typeB);  } else   if (typeA == Float.class) {    if (typeB == Integer.class) {      b=new Float((Integer)b);    } else     if (typeB == Long.class) {      b=new Float((Long)b);    } else     if (typeB == Double.class) {      a=new Double((Float)a);    }  }  return ((Comparable)a).compareTo(b);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.compare.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "compare",
                        "code": "static int compare(Object a,Object b){  if (a.getClass() == b.getClass()) {    return ((Comparable)a).compareTo(b);  }  Class typeA=a.getClass();  Class typeB=b.getClass();  if (typeA == BigDecimal.class) {    b=compare_extraction_1(b,typeB);  } else   if (typeA == Long.class) {    if (typeB == Integer.class) {      b=new Long((Integer)b);    } else     if (typeB == BigDecimal.class) {      a=new BigDecimal((Long)a);    } else     if (typeB == Float.class) {      a=new Float((Long)a);    } else     if (typeB == Double.class) {      a=new Double((Long)a);    }  } else   if (typeA == Integer.class) {    a=compare_extraction_2(a,typeB);  } else   if (typeA == Double.class) {    b=compare_extraction_3(b,typeB);  } else   if (typeA == Float.class) {    if (typeB == Integer.class) {      b=new Float((Integer)b);    } else     if (typeB == Long.class) {      b=new Float((Long)b);    } else     if (typeB == Double.class) {      a=new Double((Float)a);    }  }  return ((Comparable)a).compareTo(b);}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.compare.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "deepScan": {
                "original": {
                    "method_name": "deepScan",
                    "code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      if (propertyName.equals(entry.getKey())) {        if (val instanceof Collection) {          results.addAll((Collection)val);        } else {          results.add(val);        }        continue;      }      if (val == null || ParserConfig.isPrimitive2(val.getClass())) {        continue;      }      deepScan(val,propertyName,results);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    try {      FieldSerializer fieldDeser=beanSerializer.getFieldSerializer(propertyName);      if (fieldDeser != null) {        try {          Object val=fieldDeser.getPropertyValueDirect(currentObject);          results.add(val);        } catch (        InvocationTargetException ex) {          throw new JSONException(\"getFieldValue error.\" + propertyName,ex);        }catch (        IllegalAccessException ex) {          throw new JSONException(\"getFieldValue error.\" + propertyName,ex);        }        return;      }      List<Object> fieldValues=beanSerializer.getFieldValues(currentObject);      for (      Object val : fieldValues) {        deepScan(val,propertyName,results);      }      return;    } catch (    Exception e) {      throw new JSONPathException(\"jsonpath error, path \" + path + \", segement \"+ propertyName,e);    }  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.deepScan.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "deepScan",
                        "code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      if (propertyName.equals(entry.getKey())) {        if (val instanceof Collection) {          results.addAll((Collection)val);        } else {          results.add(val);        }        continue;      }      if (val == null || ParserConfig.isPrimitive2(val.getClass())) {        continue;      }      deepScan(val,propertyName,results);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    deepScan_extraction_2(currentObject,propertyName,results,beanSerializer);  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.deepScan.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "deepScan",
                        "code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      deepScan_extraction_1(propertyName,results,entry,val);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    deepScan_extraction_2(currentObject,propertyName,results,beanSerializer);  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.deepScan.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "PropertyNamingStrategy": {
            "translate": {
                "original": {
                    "method_name": "translate",
                    "code": "public String translate(String propertyName){switch (this) {case SnakeCase:{      StringBuilder buf=new StringBuilder();      for (int i=0; i < propertyName.length(); ++i) {        char ch=propertyName.charAt(i);        if (ch >= 'A' && ch <= 'Z') {          char ch_ucase=(char)(ch + 32);          if (i > 0) {            buf.append('_');          }          buf.append(ch_ucase);        } else {          buf.append(ch);        }      }      return buf.toString();    }case KebabCase:{    StringBuilder buf=new StringBuilder();    for (int i=0; i < propertyName.length(); ++i) {      char ch=propertyName.charAt(i);      if (ch >= 'A' && ch <= 'Z') {        char ch_ucase=(char)(ch + 32);        if (i > 0) {          buf.append('-');        }        buf.append(ch_ucase);      } else {        buf.append(ch);      }    }    return buf.toString();  }case PascalCase:{  char ch=propertyName.charAt(0);  if (ch >= 'a' && ch <= 'z') {    char[] chars=propertyName.toCharArray();    chars[0]-=32;    return new String(chars);  }  return propertyName;}case CamelCase:{char ch=propertyName.charAt(0);if (ch >= 'A' && ch <= 'Z') {  char[] chars=propertyName.toCharArray();  chars[0]+=32;  return new String(chars);}return propertyName;}case NoChange:case NeverUseThisValueExceptDefaultValue:default:return propertyName;}}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.PropertyNamingStrategy.translate.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "translate",
                        "code": "public String translate(String propertyName){switch (this) {case SnakeCase:{      StringBuilder buf=new StringBuilder();      for (int i=0; i < propertyName.length(); ++i) {        char ch=propertyName.charAt(i);        if (ch >= 'A' && ch <= 'Z') {          char ch_ucase=(char)(ch + 32);          if (i > 0) {            buf.append('_');          }          buf.append(ch_ucase);        } else {          buf.append(ch);        }      }      return buf.toString();    }case KebabCase:{    StringBuilder buf=translate_extraction_2(propertyName);    return buf.toString();  }case PascalCase:{  char ch=propertyName.charAt(0);  if (ch >= 'a' && ch <= 'z') {    char[] chars=propertyName.toCharArray();    chars[0]-=32;    return new String(chars);  }  return propertyName;}case CamelCase:{char ch=propertyName.charAt(0);if (ch >= 'A' && ch <= 'Z') {  char[] chars=propertyName.toCharArray();  chars[0]+=32;  return new String(chars);}return propertyName;}case NoChange:case NeverUseThisValueExceptDefaultValue:default:return propertyName;}}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.PropertyNamingStrategy.translate.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "translate",
                        "code": "public String translate(String propertyName){switch (this) {case SnakeCase:{      StringBuilder buf=translate_extraction_1(propertyName);      return buf.toString();    }case KebabCase:{    StringBuilder buf=translate_extraction_2(propertyName);    return buf.toString();  }case PascalCase:{  char ch=propertyName.charAt(0);  if (ch >= 'a' && ch <= 'z') {    char[] chars=propertyName.toCharArray();    chars[0]-=32;    return new String(chars);  }  return propertyName;}case CamelCase:{char ch=propertyName.charAt(0);if (ch >= 'A' && ch <= 'Z') {  char[] chars=propertyName.toCharArray();  chars[0]+=32;  return new String(chars);}return propertyName;}case NoChange:case NeverUseThisValueExceptDefaultValue:default:return propertyName;}}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.PropertyNamingStrategy.translate.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "fastjson.src.main.java.com.alibaba.fastjson.parser": {
        "DefaultJSONParser": {
            "handleResovleTask": {
                "original": {
                    "method_name": "handleResovleTask",
                    "code": "public void handleResovleTask(Object value){  if (resolveTaskList == null) {    return;  }  for (int i=0, size=resolveTaskList.size(); i < size; ++i) {    ResolveTask task=resolveTaskList.get(i);    String ref=task.referenceValue;    Object object=null;    if (task.ownerContext != null) {      object=task.ownerContext.object;    }    Object refValue;    if (ref.startsWith(\"$\")) {      refValue=getObject(ref);      if (refValue == null) {        try {          JSONPath jsonpath=new JSONPath(ref,SerializeConfig.getGlobalInstance(),config,true);          if (jsonpath.isRef()) {            refValue=jsonpath.eval(value);          }        } catch (        JSONPathException ex) {        }      }    } else {      refValue=task.context.object;    }    FieldDeserializer fieldDeser=task.fieldDeserializer;    if (fieldDeser != null) {      if (refValue != null && refValue.getClass() == JSONObject.class && fieldDeser.fieldInfo != null && !Map.class.isAssignableFrom(fieldDeser.fieldInfo.fieldClass)) {        Object root=this.contextArray[0].object;        JSONPath jsonpath=JSONPath.compile(ref);        if (jsonpath.isRef()) {          refValue=jsonpath.eval(root);        }      }      if (fieldDeser.getOwnerClass() != null && (!fieldDeser.getOwnerClass().isInstance(object)) && task.ownerContext.parent != null) {        for (ParseContext ctx=task.ownerContext.parent; ctx != null; ctx=ctx.parent) {          if (fieldDeser.getOwnerClass().isInstance(ctx.object)) {            object=ctx.object;            break;          }        }      }      fieldDeser.setValue(object,refValue);    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.DefaultJSONParser.handleResovleTask.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "handleResovleTask",
                        "code": "public void handleResovleTask(Object value){  if (resolveTaskList == null) {    return;  }  for (int i=0, size=resolveTaskList.size(); i < size; ++i) {    ResolveTask task=resolveTaskList.get(i);    String ref=task.referenceValue;    Object object=null;    if (task.ownerContext != null) {      object=task.ownerContext.object;    }    Object refValue;    if (ref.startsWith(\"$\")) {      refValue=getObject(ref);      if (refValue == null) {        try {          JSONPath jsonpath=new JSONPath(ref,SerializeConfig.getGlobalInstance(),config,true);          if (jsonpath.isRef()) {            refValue=jsonpath.eval(value);          }        } catch (        JSONPathException ex) {        }      }    } else {      refValue=task.context.object;    }    FieldDeserializer fieldDeser=task.fieldDeserializer;    if (fieldDeser != null) {      handleResovleTask_extraction_2(task,ref,object,refValue,fieldDeser);    }  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.DefaultJSONParser.handleResovleTask.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "handleResovleTask",
                        "code": "public void handleResovleTask(Object value){  if (resolveTaskList == null) {    return;  }  for (int i=0, size=resolveTaskList.size(); i < size; ++i) {    ResolveTask task=resolveTaskList.get(i);    String ref=task.referenceValue;    Object object=null;    if (task.ownerContext != null) {      object=task.ownerContext.object;    }    Object refValue;    if (ref.startsWith(\"$\")) {      refValue=getObject(ref);      refValue=handleResovleTask_extraction_1(value,ref,refValue);    } else {      refValue=task.context.object;    }    FieldDeserializer fieldDeser=task.fieldDeserializer;    if (fieldDeser != null) {      handleResovleTask_extraction_2(task,ref,object,refValue,fieldDeser);    }  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.DefaultJSONParser.handleResovleTask.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "parse": {
                "original": {
                    "method_name": "parse",
                    "code": "public Object parse(Object fieldName){  final JSONLexer lexer=this.lexer;switch (lexer.token()) {case SET:    lexer.nextToken();  HashSet<Object> set=new HashSet<Object>();parseArray(set,fieldName);return set;case TREE_SET:lexer.nextToken();TreeSet<Object> treeSet=new TreeSet<Object>();parseArray(treeSet,fieldName);return treeSet;case LBRACKET:Collection array=isEnabled(Feature.UseNativeJavaObject) ? new ArrayList() : new JSONArray();parseArray(array,fieldName);if (lexer.isEnabled(Feature.UseObjectArray)) {return array.toArray();}return array;case LBRACE:Map object=isEnabled(Feature.UseNativeJavaObject) ? lexer.isEnabled(Feature.OrderedField) ? new HashMap() : new LinkedHashMap() : new JSONObject(lexer.isEnabled(Feature.OrderedField));return parseObject(object,fieldName);case LITERAL_INT:Number intValue=lexer.integerValue();lexer.nextToken();return intValue;case LITERAL_FLOAT:Object value=lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));lexer.nextToken();return value;case LITERAL_STRING:String stringLiteral=lexer.stringVal();lexer.nextToken(JSONToken.COMMA);if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {JSONScanner iso8601Lexer=new JSONScanner(stringLiteral);try {if (iso8601Lexer.scanISO8601DateIfMatch()) {return iso8601Lexer.getCalendar().getTime();}}  finally {iso8601Lexer.close();}}return stringLiteral;case NULL:lexer.nextToken();return null;case UNDEFINED:lexer.nextToken();return null;case TRUE:lexer.nextToken();return Boolean.TRUE;case FALSE:lexer.nextToken();return Boolean.FALSE;case NEW:lexer.nextToken(JSONToken.IDENTIFIER);if (lexer.token() != JSONToken.IDENTIFIER) {throw new JSONException(\"syntax error\");}lexer.nextToken(JSONToken.LPAREN);accept(JSONToken.LPAREN);long time=lexer.integerValue().longValue();accept(JSONToken.LITERAL_INT);accept(JSONToken.RPAREN);return new Date(time);case EOF:if (lexer.isBlankInput()) {return null;}throw new JSONException(\"unterminated json string, \" + lexer.info());case HEX:byte[] bytes=lexer.bytesValue();lexer.nextToken();return bytes;case IDENTIFIER:String identifier=lexer.stringVal();if (\"NaN\".equals(identifier)) {lexer.nextToken();return null;}throw new JSONException(\"syntax error, \" + lexer.info());case ERROR:default:throw new JSONException(\"syntax error, \" + lexer.info());}}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.DefaultJSONParser.parse.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parse",
                        "code": "public Object parse(Object fieldName){  final JSONLexer lexer=this.lexer;switch (lexer.token()) {case SET:    lexer.nextToken();  HashSet<Object> set=new HashSet<Object>();parseArray(set,fieldName);return set;case TREE_SET:lexer.nextToken();TreeSet<Object> treeSet=new TreeSet<Object>();parseArray(treeSet,fieldName);return treeSet;case LBRACKET:Collection array=isEnabled(Feature.UseNativeJavaObject) ? new ArrayList() : new JSONArray();parseArray(array,fieldName);if (lexer.isEnabled(Feature.UseObjectArray)) {return array.toArray();}return array;case LBRACE:Map object=isEnabled(Feature.UseNativeJavaObject) ? lexer.isEnabled(Feature.OrderedField) ? new HashMap() : new LinkedHashMap() : new JSONObject(lexer.isEnabled(Feature.OrderedField));return parseObject(object,fieldName);case LITERAL_INT:Number intValue=lexer.integerValue();lexer.nextToken();return intValue;case LITERAL_FLOAT:Object value=lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));lexer.nextToken();return value;case LITERAL_STRING:String stringLiteral=lexer.stringVal();lexer.nextToken(JSONToken.COMMA);if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {JSONScanner iso8601Lexer=new JSONScanner(stringLiteral);try {if (iso8601Lexer.scanISO8601DateIfMatch()) {return iso8601Lexer.getCalendar().getTime();}}  finally {iso8601Lexer.close();}}return stringLiteral;case NULL:lexer.nextToken();return null;case UNDEFINED:lexer.nextToken();return null;case TRUE:lexer.nextToken();return Boolean.TRUE;case FALSE:lexer.nextToken();return Boolean.FALSE;case NEW:lexer.nextToken(JSONToken.IDENTIFIER);if (lexer.token() != JSONToken.IDENTIFIER) {throw new JSONException(\"syntax error\");}lexer.nextToken(JSONToken.LPAREN);accept(JSONToken.LPAREN);long time=lexer.integerValue().longValue();accept(JSONToken.LITERAL_INT);accept(JSONToken.RPAREN);return new Date(time);case EOF:if (lexer.isBlankInput()) {return null;}throw new JSONException(\"unterminated json string, \" + lexer.info());case HEX:byte[] bytes=lexer.bytesValue();lexer.nextToken();return bytes;case IDENTIFIER:String identifier=lexer.stringVal();return parse_extraction_2(lexer,identifier);case ERROR:default:throw new JSONException(\"syntax error, \" + lexer.info());}}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.DefaultJSONParser.parse.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parse",
                        "code": "public Object parse(Object fieldName){  final JSONLexer lexer=this.lexer;switch (lexer.token()) {case SET:    lexer.nextToken();  HashSet<Object> set=new HashSet<Object>();parseArray(set,fieldName);return set;case TREE_SET:lexer.nextToken();TreeSet<Object> treeSet=new TreeSet<Object>();parseArray(treeSet,fieldName);return treeSet;case LBRACKET:Collection array=isEnabled(Feature.UseNativeJavaObject) ? new ArrayList() : new JSONArray();parseArray(array,fieldName);if (lexer.isEnabled(Feature.UseObjectArray)) {return array.toArray();}return array;case LBRACE:Map object=isEnabled(Feature.UseNativeJavaObject) ? lexer.isEnabled(Feature.OrderedField) ? new HashMap() : new LinkedHashMap() : new JSONObject(lexer.isEnabled(Feature.OrderedField));return parseObject(object,fieldName);case LITERAL_INT:Number intValue=lexer.integerValue();lexer.nextToken();return intValue;case LITERAL_FLOAT:Object value=lexer.decimalValue(lexer.isEnabled(Feature.UseBigDecimal));lexer.nextToken();return value;case LITERAL_STRING:String stringLiteral=lexer.stringVal();lexer.nextToken(JSONToken.COMMA);return parse_extraction_1(lexer,stringLiteral);case NULL:lexer.nextToken();return null;case UNDEFINED:lexer.nextToken();return null;case TRUE:lexer.nextToken();return Boolean.TRUE;case FALSE:lexer.nextToken();return Boolean.FALSE;case NEW:lexer.nextToken(JSONToken.IDENTIFIER);if (lexer.token() != JSONToken.IDENTIFIER) {throw new JSONException(\"syntax error\");}lexer.nextToken(JSONToken.LPAREN);accept(JSONToken.LPAREN);long time=lexer.integerValue().longValue();accept(JSONToken.LITERAL_INT);accept(JSONToken.RPAREN);return new Date(time);case EOF:if (lexer.isBlankInput()) {return null;}throw new JSONException(\"unterminated json string, \" + lexer.info());case HEX:byte[] bytes=lexer.bytesValue();lexer.nextToken();return bytes;case IDENTIFIER:String identifier=lexer.stringVal();return parse_extraction_2(lexer,identifier);case ERROR:default:throw new JSONException(\"syntax error, \" + lexer.info());}}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.DefaultJSONParser.parse.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "JSONLexerBase": {
            "scanFieldLong": {
                "original": {
                    "method_name": "scanFieldLong",
                    "code": "public long scanFieldLong(char[] fieldName){  matchStat=UNKNOWN;  if (!charArrayCompare(fieldName)) {    matchStat=NOT_MATCH_NAME;    return 0;  }  int offset=fieldName.length;  char chLocal=charAt(bp + (offset++));  boolean negative=false;  if (chLocal == '-') {    chLocal=charAt(bp + (offset++));    negative=true;  }  long value;  if (chLocal >= '0' && chLocal <= '9') {    value=chLocal - '0';    for (; ; ) {      chLocal=charAt(bp + (offset++));      if (chLocal >= '0' && chLocal <= '9') {        value=value * 10 + (chLocal - '0');      } else       if (chLocal == '.') {        matchStat=NOT_MATCH;        return 0;      } else {        break;      }    }    boolean valid=offset - fieldName.length < 21 && (value >= 0 || (value == -9223372036854775808L && negative));    if (!valid) {      matchStat=NOT_MATCH;      return 0;    }  } else {    matchStat=NOT_MATCH;    return 0;  }  if (chLocal == ',') {    bp+=offset;    this.ch=this.charAt(bp);    matchStat=VALUE;    token=JSONToken.COMMA;    return negative ? -value : value;  }  if (chLocal == '}') {    chLocal=charAt(bp + (offset++));    if (chLocal == ',') {      token=JSONToken.COMMA;      bp+=offset;      this.ch=this.charAt(bp);    } else     if (chLocal == ']') {      token=JSONToken.RBRACKET;      bp+=offset;      this.ch=this.charAt(bp);    } else     if (chLocal == '}') {      token=JSONToken.RBRACE;      bp+=offset;      this.ch=this.charAt(bp);    } else     if (chLocal == EOI) {      token=JSONToken.EOF;      bp+=(offset - 1);      ch=EOI;    } else {      matchStat=NOT_MATCH;      return 0;    }    matchStat=END;  } else {    matchStat=NOT_MATCH;    return 0;  }  return negative ? -value : value;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanFieldLong.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "scanFieldLong",
                        "code": "public long scanFieldLong(char[] fieldName){  matchStat=UNKNOWN;  if (!charArrayCompare(fieldName)) {    matchStat=NOT_MATCH_NAME;    return 0;  }  int offset=fieldName.length;  char chLocal=charAt(bp + (offset++));  boolean negative=false;  if (chLocal == '-') {    chLocal=charAt(bp + (offset++));    negative=true;  }  long value;  if (chLocal >= '0' && chLocal <= '9') {    value=chLocal - '0';    for (; ; ) {      chLocal=charAt(bp + (offset++));      if (chLocal >= '0' && chLocal <= '9') {        value=value * 10 + (chLocal - '0');      } else       if (chLocal == '.') {        matchStat=NOT_MATCH;        return 0;      } else {        break;      }    }    boolean valid=offset - fieldName.length < 21 && (value >= 0 || (value == -9223372036854775808L && negative));    if (!valid) {      matchStat=NOT_MATCH;      return 0;    }  } else {    matchStat=NOT_MATCH;    return 0;  }  return scanFieldLong_extraction_2(offset,chLocal,negative,value);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanFieldLong.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "scanFieldLong",
                        "code": "public long scanFieldLong(char[] fieldName){  matchStat=UNKNOWN;  if (!charArrayCompare(fieldName)) {    matchStat=NOT_MATCH_NAME;    return 0;  }  int offset=fieldName.length;  char chLocal=charAt(bp + (offset++));  boolean negative=false;  if (chLocal == '-') {    chLocal=charAt(bp + (offset++));    negative=true;  }  long value;  if (chLocal >= '0' && chLocal <= '9') {    value=chLocal - '0';    for (; ; ) {      chLocal=charAt(bp + (offset++));      if (chLocal >= '0' && chLocal <= '9') {        value=value * 10 + (chLocal - '0');      } else       if (chLocal == '.') {        matchStat=NOT_MATCH;        return 0;      } else {        break;      }    }    boolean valid=scanFieldLong_extraction_1(fieldName,offset,negative,value);    if (!valid) {      matchStat=NOT_MATCH;      return 0;    }  } else {    matchStat=NOT_MATCH;    return 0;  }  return scanFieldLong_extraction_2(offset,chLocal,negative,value);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanFieldLong.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "scanStringSingleQuote": {
                "original": {
                    "method_name": "scanStringSingleQuote",
                    "code": "private void scanStringSingleQuote(){  np=bp;  hasSpecial=false;  char chLocal;  for (; ; ) {    chLocal=next();    if (chLocal == '\\'') {      break;    }    if (chLocal == EOI) {      if (!isEOF()) {        putChar((char)EOI);        continue;      }      throw new JSONException(\"unclosed single-quote string\");    }    if (chLocal == '\\\\') {      if (!hasSpecial) {        hasSpecial=true;        if (sp > sbuf.length) {          char[] newsbuf=new char[sp * 2];          System.arraycopy(sbuf,0,newsbuf,0,sbuf.length);          sbuf=newsbuf;        }        this.copyTo(np + 1,sp,sbuf);      }      chLocal=next();switch (chLocal) {case '0':        putChar('\\0');      break;case '1':    putChar('\\1');  break;case '2':putChar('\\2');break;case '3':putChar('\\3');break;case '4':putChar('\\4');break;case '5':putChar('\\5');break;case '6':putChar('\\6');break;case '7':putChar('\\7');break;case 'b':putChar('\\b');break;case 't':putChar('\\t');break;case 'n':putChar('\\n');break;case 'v':putChar('\\u000B');break;case 'f':case 'F':putChar('\\f');break;case 'r':putChar('\\r');break;case '\"':putChar('\"');break;case '\\'':putChar('\\'');break;case '/':putChar('/');break;case '\\\\':putChar('\\\\');break;case 'x':char x1=next();char x2=next();boolean hex1=(x1 >= '0' && x1 <= '9') || (x1 >= 'a' && x1 <= 'f') || (x1 >= 'A' && x1 <= 'F');boolean hex2=(x2 >= '0' && x2 <= '9') || (x2 >= 'a' && x2 <= 'f') || (x2 >= 'A' && x2 <= 'F');if (!hex1 || !hex2) {throw new JSONException(\"invalid escape character \\\\x\" + x1 + x2);}putChar((char)(digits[x1] * 16 + digits[x2]));break;case 'u':putChar((char)Integer.parseInt(new String(new char[]{next(),next(),next(),next()}),16));break;default:this.ch=chLocal;throw new JSONException(\"unclosed single-quote string\");}continue;}if (!hasSpecial) {sp++;continue;}if (sp == sbuf.length) {putChar(chLocal);} else {sbuf[sp++]=chLocal;}}token=LITERAL_STRING;this.next();}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanStringSingleQuote.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "scanStringSingleQuote",
                        "code": "private void scanStringSingleQuote(){  np=bp;  hasSpecial=false;  char chLocal;  for (; ; ) {    chLocal=next();    if (chLocal == '\\'') {      break;    }    if (chLocal == EOI) {      if (!isEOF()) {        putChar((char)EOI);        continue;      }      throw new JSONException(\"unclosed single-quote string\");    }    if (chLocal == '\\\\') {      if (!hasSpecial) {        hasSpecial=true;        if (sp > sbuf.length) {          char[] newsbuf=new char[sp * 2];          System.arraycopy(sbuf,0,newsbuf,0,sbuf.length);          sbuf=newsbuf;        }        this.copyTo(np + 1,sp,sbuf);      }      chLocal=next();      scanStringSingleQuote_extraction_2(chLocal);      continue;    }    if (!hasSpecial) {      sp++;      continue;    }    if (sp == sbuf.length) {      putChar(chLocal);    } else {      sbuf[sp++]=chLocal;    }  }  token=LITERAL_STRING;  this.next();}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanStringSingleQuote.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "scanStringSingleQuote",
                        "code": "private void scanStringSingleQuote(){  np=bp;  hasSpecial=false;  char chLocal;  for (; ; ) {    chLocal=next();    if (chLocal == '\\'') {      break;    }    if (chLocal == EOI) {      if (!isEOF()) {        putChar((char)EOI);        continue;      }      throw new JSONException(\"unclosed single-quote string\");    }    if (chLocal == '\\\\') {      scanStringSingleQuote_extraction_1();      chLocal=next();      scanStringSingleQuote_extraction_2(chLocal);      continue;    }    if (!hasSpecial) {      sp++;      continue;    }    if (sp == sbuf.length) {      putChar(chLocal);    } else {      sbuf[sp++]=chLocal;    }  }  token=LITERAL_STRING;  this.next();}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanStringSingleQuote.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "scanSymbol": {
                "original": {
                    "method_name": "scanSymbol",
                    "code": "public final String scanSymbol(final SymbolTable symbolTable,final char quote){  int hash=0;  np=bp;  sp=0;  boolean hasSpecial=false;  char chLocal;  for (; ; ) {    chLocal=next();    if (chLocal == quote) {      break;    }    if (chLocal == EOI) {      throw new JSONException(\"unclosed.str\");    }    if (chLocal == '\\\\') {      if (!hasSpecial) {        hasSpecial=true;        if (sp >= sbuf.length) {          int newCapcity=sbuf.length * 2;          if (sp > newCapcity) {            newCapcity=sp;          }          char[] newsbuf=new char[newCapcity];          System.arraycopy(sbuf,0,newsbuf,0,sbuf.length);          sbuf=newsbuf;        }        arrayCopy(np + 1,sbuf,0,sp);      }      chLocal=next();switch (chLocal) {case '0':        hash=31 * hash + (int)chLocal;      putChar('\\0');    break;case '1':  hash=31 * hash + (int)chLocal;putChar('\\1');break;case '2':hash=31 * hash + (int)chLocal;putChar('\\2');break;case '3':hash=31 * hash + (int)chLocal;putChar('\\3');break;case '4':hash=31 * hash + (int)chLocal;putChar('\\4');break;case '5':hash=31 * hash + (int)chLocal;putChar('\\5');break;case '6':hash=31 * hash + (int)chLocal;putChar('\\6');break;case '7':hash=31 * hash + (int)chLocal;putChar('\\7');break;case 'b':hash=31 * hash + (int)'\\b';putChar('\\b');break;case 't':hash=31 * hash + (int)'\\t';putChar('\\t');break;case 'n':hash=31 * hash + (int)'\\n';putChar('\\n');break;case 'v':hash=31 * hash + (int)'\\u000B';putChar('\\u000B');break;case 'f':case 'F':hash=31 * hash + (int)'\\f';putChar('\\f');break;case 'r':hash=31 * hash + (int)'\\r';putChar('\\r');break;case '\"':hash=31 * hash + (int)'\"';putChar('\"');break;case '\\'':hash=31 * hash + (int)'\\'';putChar('\\'');break;case '/':hash=31 * hash + (int)'/';putChar('/');break;case '\\\\':hash=31 * hash + (int)'\\\\';putChar('\\\\');break;case 'x':char x1=ch=next();char x2=ch=next();int x_val=digits[x1] * 16 + digits[x2];char x_char=(char)x_val;hash=31 * hash + (int)x_char;putChar(x_char);break;case 'u':char c1=chLocal=next();char c2=chLocal=next();char c3=chLocal=next();char c4=chLocal=next();int val=Integer.parseInt(new String(new char[]{c1,c2,c3,c4}),16);hash=31 * hash + val;putChar((char)val);break;default:this.ch=chLocal;throw new JSONException(\"unclosed.str.lit\");}continue;}hash=31 * hash + chLocal;if (!hasSpecial) {sp++;continue;}if (sp == sbuf.length) {putChar(chLocal);} else {sbuf[sp++]=chLocal;}}token=LITERAL_STRING;String value;if (!hasSpecial) {int offset;if (np == -1) {offset=0;} else {offset=np + 1;}value=addSymbol(offset,sp,hash,symbolTable);} else {value=symbolTable.addSymbol(sbuf,0,sp,hash);}sp=0;this.next();return value;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "scanSymbol",
                        "code": "public final String scanSymbol(final SymbolTable symbolTable,final char quote){  int hash=0;  np=bp;  sp=0;  boolean hasSpecial=false;  char chLocal;  for (; ; ) {    chLocal=next();    if (chLocal == quote) {      break;    }    if (chLocal == EOI) {      throw new JSONException(\"unclosed.str\");    }    if (chLocal == '\\\\') {      if (!hasSpecial) {        hasSpecial=true;        if (sp >= sbuf.length) {          int newCapcity=sbuf.length * 2;          if (sp > newCapcity) {            newCapcity=sp;          }          char[] newsbuf=new char[newCapcity];          System.arraycopy(sbuf,0,newsbuf,0,sbuf.length);          sbuf=newsbuf;        }        arrayCopy(np + 1,sbuf,0,sp);      }      chLocal=next();switch (chLocal) {case '0':        hash=31 * hash + (int)chLocal;      putChar('\\0');    break;case '1':  hash=31 * hash + (int)chLocal;putChar('\\1');break;case '2':hash=31 * hash + (int)chLocal;putChar('\\2');break;case '3':hash=31 * hash + (int)chLocal;putChar('\\3');break;case '4':hash=31 * hash + (int)chLocal;putChar('\\4');break;case '5':hash=31 * hash + (int)chLocal;putChar('\\5');break;case '6':hash=31 * hash + (int)chLocal;putChar('\\6');break;case '7':hash=31 * hash + (int)chLocal;putChar('\\7');break;case 'b':hash=31 * hash + (int)'\\b';putChar('\\b');break;case 't':hash=31 * hash + (int)'\\t';putChar('\\t');break;case 'n':hash=31 * hash + (int)'\\n';putChar('\\n');break;case 'v':hash=31 * hash + (int)'\\u000B';putChar('\\u000B');break;case 'f':case 'F':hash=31 * hash + (int)'\\f';putChar('\\f');break;case 'r':hash=31 * hash + (int)'\\r';putChar('\\r');break;case '\"':hash=31 * hash + (int)'\"';putChar('\"');break;case '\\'':hash=31 * hash + (int)'\\'';putChar('\\'');break;case '/':hash=31 * hash + (int)'/';putChar('/');break;case '\\\\':hash=31 * hash + (int)'\\\\';putChar('\\\\');break;case 'x':char x1=ch=next();char x2=ch=next();int x_val=digits[x1] * 16 + digits[x2];char x_char=(char)x_val;hash=31 * hash + (int)x_char;putChar(x_char);break;case 'u':char c1=chLocal=next();char c2=chLocal=next();char c3=chLocal=next();char c4=chLocal=next();int val=Integer.parseInt(new String(new char[]{c1,c2,c3,c4}),16);hash=31 * hash + val;putChar((char)val);break;default:this.ch=chLocal;throw new JSONException(\"unclosed.str.lit\");}continue;}hash=31 * hash + chLocal;if (!hasSpecial) {sp++;continue;}if (sp == sbuf.length) {putChar(chLocal);} else {sbuf[sp++]=chLocal;}}token=LITERAL_STRING;String value=scanSymbol_extraction_2(symbolTable,hash,hasSpecial);sp=0;this.next();return value;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "scanSymbol",
                        "code": "public final String scanSymbol(final SymbolTable symbolTable,final char quote){  int hash=0;  np=bp;  sp=0;  boolean hasSpecial=false;  char chLocal;  for (; ; ) {    chLocal=next();    if (chLocal == quote) {      break;    }    if (chLocal == EOI) {      throw new JSONException(\"unclosed.str\");    }    if (chLocal == '\\\\') {      hasSpecial=scanSymbol_extraction_1(hasSpecial);      chLocal=next();switch (chLocal) {case '0':        hash=31 * hash + (int)chLocal;      putChar('\\0');    break;case '1':  hash=31 * hash + (int)chLocal;putChar('\\1');break;case '2':hash=31 * hash + (int)chLocal;putChar('\\2');break;case '3':hash=31 * hash + (int)chLocal;putChar('\\3');break;case '4':hash=31 * hash + (int)chLocal;putChar('\\4');break;case '5':hash=31 * hash + (int)chLocal;putChar('\\5');break;case '6':hash=31 * hash + (int)chLocal;putChar('\\6');break;case '7':hash=31 * hash + (int)chLocal;putChar('\\7');break;case 'b':hash=31 * hash + (int)'\\b';putChar('\\b');break;case 't':hash=31 * hash + (int)'\\t';putChar('\\t');break;case 'n':hash=31 * hash + (int)'\\n';putChar('\\n');break;case 'v':hash=31 * hash + (int)'\\u000B';putChar('\\u000B');break;case 'f':case 'F':hash=31 * hash + (int)'\\f';putChar('\\f');break;case 'r':hash=31 * hash + (int)'\\r';putChar('\\r');break;case '\"':hash=31 * hash + (int)'\"';putChar('\"');break;case '\\'':hash=31 * hash + (int)'\\'';putChar('\\'');break;case '/':hash=31 * hash + (int)'/';putChar('/');break;case '\\\\':hash=31 * hash + (int)'\\\\';putChar('\\\\');break;case 'x':char x1=ch=next();char x2=ch=next();int x_val=digits[x1] * 16 + digits[x2];char x_char=(char)x_val;hash=31 * hash + (int)x_char;putChar(x_char);break;case 'u':char c1=chLocal=next();char c2=chLocal=next();char c3=chLocal=next();char c4=chLocal=next();int val=Integer.parseInt(new String(new char[]{c1,c2,c3,c4}),16);hash=31 * hash + val;putChar((char)val);break;default:this.ch=chLocal;throw new JSONException(\"unclosed.str.lit\");}continue;}hash=31 * hash + chLocal;if (!hasSpecial) {sp++;continue;}if (sp == sbuf.length) {putChar(chLocal);} else {sbuf[sp++]=chLocal;}}token=LITERAL_STRING;String value=scanSymbol_extraction_2(symbolTable,hash,hasSpecial);sp=0;this.next();return value;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONLexerBase.scanSymbol.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "JSONScanner": {
            "scanFieldStringArray": {
                "original": {
                    "method_name": "scanFieldStringArray",
                    "code": "public String[] scanFieldStringArray(char[] fieldName,int argTypesCount,SymbolTable typeSymbolTable){  int startPos=bp;  char starChar=ch;  while (isWhitespace(ch)) {    next();  }  int offset;  char ch;  if (fieldName != null) {    matchStat=UNKNOWN;    if (!charArrayCompare(fieldName)) {      matchStat=NOT_MATCH_NAME;      return null;    }    offset=bp + fieldName.length;    ch=text.charAt(offset++);    while (isWhitespace(ch)) {      ch=text.charAt(offset++);    }    if (ch == ':') {      ch=text.charAt(offset++);    } else {      matchStat=NOT_MATCH;      return null;    }    while (isWhitespace(ch)) {      ch=text.charAt(offset++);    }  } else {    offset=bp + 1;    ch=this.ch;  }  if (ch == '[') {    bp=offset;    this.ch=text.charAt(bp);  } else   if (ch == 'n' && text.startsWith(\"ull\",bp + 1)) {    bp+=4;    this.ch=text.charAt(bp);    return null;  } else {    matchStat=NOT_MATCH;    return null;  }  String[] types=argTypesCount >= 0 ? new String[argTypesCount] : new String[4];  int typeIndex=0;  for (; ; ) {    while (isWhitespace(this.ch)) {      next();    }    if (this.ch != '\\\"') {      this.bp=startPos;      this.ch=starChar;      matchStat=NOT_MATCH;      return null;    }    String type=scanSymbol(typeSymbolTable,'\"');    if (typeIndex == types.length) {      int newCapacity=types.length + (types.length >> 1) + 1;      String[] array=new String[newCapacity];      System.arraycopy(types,0,array,0,types.length);      types=array;    }    types[typeIndex++]=type;    while (isWhitespace(this.ch)) {      next();    }    if (this.ch == ',') {      next();      continue;    }    break;  }  if (types.length != typeIndex) {    String[] array=new String[typeIndex];    System.arraycopy(types,0,array,0,typeIndex);    types=array;  }  while (isWhitespace(this.ch)) {    next();  }  if (this.ch == ']') {    next();  } else {    this.bp=startPos;    this.ch=starChar;    matchStat=NOT_MATCH;    return null;  }  return types;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONScanner.scanFieldStringArray.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "scanFieldStringArray",
                        "code": "public String[] scanFieldStringArray(char[] fieldName,int argTypesCount,SymbolTable typeSymbolTable){  int startPos=bp;  char starChar=ch;  while (isWhitespace(ch)) {    next();  }  int offset;  char ch;  if (fieldName != null) {    matchStat=UNKNOWN;    if (!charArrayCompare(fieldName)) {      matchStat=NOT_MATCH_NAME;      return null;    }    offset=bp + fieldName.length;    ch=text.charAt(offset++);    while (isWhitespace(ch)) {      ch=text.charAt(offset++);    }    if (ch == ':') {      ch=text.charAt(offset++);    } else {      matchStat=NOT_MATCH;      return null;    }    while (isWhitespace(ch)) {      ch=text.charAt(offset++);    }  } else {    offset=bp + 1;    ch=this.ch;  }  if (ch == '[') {    bp=offset;    this.ch=text.charAt(bp);  } else   if (ch == 'n' && text.startsWith(\"ull\",bp + 1)) {    bp+=4;    this.ch=text.charAt(bp);    return null;  } else {    matchStat=NOT_MATCH;    return null;  }  String[] types=argTypesCount >= 0 ? new String[argTypesCount] : new String[4];  int typeIndex=0;  return scanFieldStringArray_extraction_2(typeSymbolTable,startPos,starChar,types,typeIndex);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONScanner.scanFieldStringArray.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "scanFieldStringArray",
                        "code": "public String[] scanFieldStringArray(char[] fieldName,int argTypesCount,SymbolTable typeSymbolTable){  int startPos=bp;  char starChar=ch;  while (isWhitespace(ch)) {    next();  }  int offset;  char ch;  if (fieldName != null) {    matchStat=UNKNOWN;    if (!charArrayCompare(fieldName)) {      matchStat=NOT_MATCH_NAME;      return null;    }    offset=bp + fieldName.length;    ch=text.charAt(offset++);    while (isWhitespace(ch)) {      ch=text.charAt(offset++);    }    if (ch == ':') {      ch=text.charAt(offset++);    } else {      matchStat=NOT_MATCH;      return null;    }    while (isWhitespace(ch)) {      ch=text.charAt(offset++);    }  } else {    offset=bp + 1;    ch=this.ch;  }  if (ch == '[') {    bp=offset;    this.ch=text.charAt(bp);  } else   return scanFieldStringArray_extraction_1(ch);  String[] types=argTypesCount >= 0 ? new String[argTypesCount] : new String[4];  int typeIndex=0;  return scanFieldStringArray_extraction_2(typeSymbolTable,startPos,starChar,types,typeIndex);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.JSONScanner.scanFieldStringArray.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer": {
        "ArrayListTypeFieldDeserializer": {
            "parseArray": {
                "original": {
                    "method_name": "parseArray",
                    "code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final void parseArray(DefaultJSONParser parser,Type objectType,Collection array){  Type itemType=this.itemType;  ObjectDeserializer itemTypeDeser=this.deserializer;  if (objectType instanceof ParameterizedType) {    if (itemType instanceof TypeVariable) {      TypeVariable typeVar=(TypeVariable)itemType;      ParameterizedType paramType=(ParameterizedType)objectType;      Class<?> objectClass=null;      if (paramType.getRawType() instanceof Class) {        objectClass=(Class<?>)paramType.getRawType();      }      int paramIndex=-1;      if (objectClass != null) {        for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {          TypeVariable item=objectClass.getTypeParameters()[i];          if (item.getName().equals(typeVar.getName())) {            paramIndex=i;            break;          }        }      }      if (paramIndex != -1) {        itemType=paramType.getActualTypeArguments()[paramIndex];        if (!itemType.equals(this.itemType)) {          itemTypeDeser=parser.getConfig().getDeserializer(itemType);        }      }    } else     if (itemType instanceof ParameterizedType) {      ParameterizedType parameterizedItemType=(ParameterizedType)itemType;      Type[] itemActualTypeArgs=parameterizedItemType.getActualTypeArguments();      if (itemActualTypeArgs.length == 1 && itemActualTypeArgs[0] instanceof TypeVariable) {        TypeVariable typeVar=(TypeVariable)itemActualTypeArgs[0];        ParameterizedType paramType=(ParameterizedType)objectType;        Class<?> objectClass=null;        if (paramType.getRawType() instanceof Class) {          objectClass=(Class<?>)paramType.getRawType();        }        int paramIndex=-1;        if (objectClass != null) {          for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {            TypeVariable item=objectClass.getTypeParameters()[i];            if (item.getName().equals(typeVar.getName())) {              paramIndex=i;              break;            }          }        }        if (paramIndex != -1) {          itemActualTypeArgs[0]=paramType.getActualTypeArguments()[paramIndex];          itemType=TypeReference.intern(new ParameterizedTypeImpl(itemActualTypeArgs,parameterizedItemType.getOwnerType(),parameterizedItemType.getRawType()));        }      }    }  } else   if (itemType instanceof TypeVariable && objectType instanceof Class) {    Class objectClass=(Class)objectType;    TypeVariable typeVar=(TypeVariable)itemType;    objectClass.getTypeParameters();    for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {      TypeVariable item=objectClass.getTypeParameters()[i];      if (item.getName().equals(typeVar.getName())) {        Type[] bounds=item.getBounds();        if (bounds.length == 1) {          itemType=bounds[0];        }        break;      }    }  }  final JSONLexer lexer=parser.lexer;  final int token=lexer.token();  if (token == JSONToken.LBRACKET) {    if (itemTypeDeser == null) {      itemTypeDeser=deserializer=parser.getConfig().getDeserializer(itemType);      itemFastMatchToken=deserializer.getFastMatchToken();    }    lexer.nextToken(itemFastMatchToken);    for (int i=0; ; ++i) {      if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {        while (lexer.token() == JSONToken.COMMA) {          lexer.nextToken();          continue;        }      }      if (lexer.token() == JSONToken.RBRACKET) {        break;      }      Object val=itemTypeDeser.deserialze(parser,itemType,i);      array.add(val);      parser.checkListResolve(array);      if (lexer.token() == JSONToken.COMMA) {        lexer.nextToken(itemFastMatchToken);        continue;      }    }    lexer.nextToken(JSONToken.COMMA);  } else {    if (itemTypeDeser == null) {      itemTypeDeser=deserializer=parser.getConfig().getDeserializer(itemType);    }    Object val=itemTypeDeser.deserialze(parser,itemType,0);    array.add(val);    parser.checkListResolve(array);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parseArray",
                        "code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final void parseArray(DefaultJSONParser parser,Type objectType,Collection array){  Type itemType=this.itemType;  ObjectDeserializer itemTypeDeser=this.deserializer;  if (objectType instanceof ParameterizedType) {    if (itemType instanceof TypeVariable) {      TypeVariable typeVar=(TypeVariable)itemType;      ParameterizedType paramType=(ParameterizedType)objectType;      Class<?> objectClass=null;      if (paramType.getRawType() instanceof Class) {        objectClass=(Class<?>)paramType.getRawType();      }      int paramIndex=-1;      if (objectClass != null) {        for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {          TypeVariable item=objectClass.getTypeParameters()[i];          if (item.getName().equals(typeVar.getName())) {            paramIndex=i;            break;          }        }      }      if (paramIndex != -1) {        itemType=paramType.getActualTypeArguments()[paramIndex];        if (!itemType.equals(this.itemType)) {          itemTypeDeser=parser.getConfig().getDeserializer(itemType);        }      }    } else     if (itemType instanceof ParameterizedType) {      ParameterizedType parameterizedItemType=(ParameterizedType)itemType;      Type[] itemActualTypeArgs=parameterizedItemType.getActualTypeArguments();      if (itemActualTypeArgs.length == 1 && itemActualTypeArgs[0] instanceof TypeVariable) {        TypeVariable typeVar=(TypeVariable)itemActualTypeArgs[0];        ParameterizedType paramType=(ParameterizedType)objectType;        Class<?> objectClass=null;        if (paramType.getRawType() instanceof Class) {          objectClass=(Class<?>)paramType.getRawType();        }        int paramIndex=-1;        if (objectClass != null) {          for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {            TypeVariable item=objectClass.getTypeParameters()[i];            if (item.getName().equals(typeVar.getName())) {              paramIndex=i;              break;            }          }        }        if (paramIndex != -1) {          itemActualTypeArgs[0]=paramType.getActualTypeArguments()[paramIndex];          itemType=TypeReference.intern(new ParameterizedTypeImpl(itemActualTypeArgs,parameterizedItemType.getOwnerType(),parameterizedItemType.getRawType()));        }      }    }  } else   if (itemType instanceof TypeVariable && objectType instanceof Class) {    Class objectClass=(Class)objectType;    TypeVariable typeVar=(TypeVariable)itemType;    objectClass.getTypeParameters();    for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {      TypeVariable item=objectClass.getTypeParameters()[i];      if (item.getName().equals(typeVar.getName())) {        Type[] bounds=item.getBounds();        if (bounds.length == 1) {          itemType=bounds[0];        }        break;      }    }  }  final JSONLexer lexer=parser.lexer;  final int token=lexer.token();  if (token == JSONToken.LBRACKET) {    parseArray_extraction_4(parser,array,itemType,itemTypeDeser,lexer);  } else {    if (itemTypeDeser == null) {      itemTypeDeser=deserializer=parser.getConfig().getDeserializer(itemType);    }    Object val=itemTypeDeser.deserialze(parser,itemType,0);    array.add(val);    parser.checkListResolve(array);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseArray",
                        "code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final void parseArray(DefaultJSONParser parser,Type objectType,Collection array){  Type itemType=this.itemType;  ObjectDeserializer itemTypeDeser=this.deserializer;  if (objectType instanceof ParameterizedType) {    if (itemType instanceof TypeVariable) {      TypeVariable typeVar=(TypeVariable)itemType;      ParameterizedType paramType=(ParameterizedType)objectType;      Class<?> objectClass=null;      if (paramType.getRawType() instanceof Class) {        objectClass=(Class<?>)paramType.getRawType();      }      int paramIndex=-1;      if (objectClass != null) {        for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {          TypeVariable item=objectClass.getTypeParameters()[i];          if (item.getName().equals(typeVar.getName())) {            paramIndex=i;            break;          }        }      }      if (paramIndex != -1) {        itemType=paramType.getActualTypeArguments()[paramIndex];        if (!itemType.equals(this.itemType)) {          itemTypeDeser=parser.getConfig().getDeserializer(itemType);        }      }    } else     if (itemType instanceof ParameterizedType) {      ParameterizedType parameterizedItemType=(ParameterizedType)itemType;      Type[] itemActualTypeArgs=parameterizedItemType.getActualTypeArguments();      if (itemActualTypeArgs.length == 1 && itemActualTypeArgs[0] instanceof TypeVariable) {        TypeVariable typeVar=(TypeVariable)itemActualTypeArgs[0];        ParameterizedType paramType=(ParameterizedType)objectType;        Class<?> objectClass=null;        if (paramType.getRawType() instanceof Class) {          objectClass=(Class<?>)paramType.getRawType();        }        int paramIndex=-1;        if (objectClass != null) {          for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {            TypeVariable item=objectClass.getTypeParameters()[i];            if (item.getName().equals(typeVar.getName())) {              paramIndex=i;              break;            }          }        }        if (paramIndex != -1) {          itemActualTypeArgs[0]=paramType.getActualTypeArguments()[paramIndex];          itemType=TypeReference.intern(new ParameterizedTypeImpl(itemActualTypeArgs,parameterizedItemType.getOwnerType(),parameterizedItemType.getRawType()));        }      }    }  } else   itemType=parseArray_extraction_3(objectType,itemType);  final JSONLexer lexer=parser.lexer;  final int token=lexer.token();  if (token == JSONToken.LBRACKET) {    parseArray_extraction_4(parser,array,itemType,itemTypeDeser,lexer);  } else {    if (itemTypeDeser == null) {      itemTypeDeser=deserializer=parser.getConfig().getDeserializer(itemType);    }    Object val=itemTypeDeser.deserialze(parser,itemType,0);    array.add(val);    parser.checkListResolve(array);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseArray",
                        "code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final void parseArray(DefaultJSONParser parser,Type objectType,Collection array){  Type itemType=this.itemType;  ObjectDeserializer itemTypeDeser=this.deserializer;  if (objectType instanceof ParameterizedType) {    if (itemType instanceof TypeVariable) {      TypeVariable typeVar=(TypeVariable)itemType;      ParameterizedType paramType=(ParameterizedType)objectType;      Class<?> objectClass=null;      if (paramType.getRawType() instanceof Class) {        objectClass=(Class<?>)paramType.getRawType();      }      int paramIndex=-1;      if (objectClass != null) {        for (int i=0, size=objectClass.getTypeParameters().length; i < size; ++i) {          TypeVariable item=objectClass.getTypeParameters()[i];          if (item.getName().equals(typeVar.getName())) {            paramIndex=i;            break;          }        }      }      if (paramIndex != -1) {        itemType=paramType.getActualTypeArguments()[paramIndex];        if (!itemType.equals(this.itemType)) {          itemTypeDeser=parser.getConfig().getDeserializer(itemType);        }      }    } else     if (itemType instanceof ParameterizedType) {      ParameterizedType parameterizedItemType=(ParameterizedType)itemType;      Type[] itemActualTypeArgs=parameterizedItemType.getActualTypeArguments();      itemType=parseArray_extraction_2(objectType,itemType,parameterizedItemType,itemActualTypeArgs);    }  } else   itemType=parseArray_extraction_3(objectType,itemType);  final JSONLexer lexer=parser.lexer;  final int token=lexer.token();  if (token == JSONToken.LBRACKET) {    parseArray_extraction_4(parser,array,itemType,itemTypeDeser,lexer);  } else {    if (itemTypeDeser == null) {      itemTypeDeser=deserializer=parser.getConfig().getDeserializer(itemType);    }    Object val=itemTypeDeser.deserialze(parser,itemType,0);    array.add(val);    parser.checkListResolve(array);  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseArray",
                        "code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public final void parseArray(DefaultJSONParser parser,Type objectType,Collection array){  Type itemType=this.itemType;  ObjectDeserializer itemTypeDeser=this.deserializer;  if (objectType instanceof ParameterizedType) {    if (itemType instanceof TypeVariable) {      TypeVariable typeVar=(TypeVariable)itemType;      ParameterizedType paramType=(ParameterizedType)objectType;      int paramIndex=parseArray_extraction_1(typeVar,paramType);      if (paramIndex != -1) {        itemType=paramType.getActualTypeArguments()[paramIndex];        if (!itemType.equals(this.itemType)) {          itemTypeDeser=parser.getConfig().getDeserializer(itemType);        }      }    } else     if (itemType instanceof ParameterizedType) {      ParameterizedType parameterizedItemType=(ParameterizedType)itemType;      Type[] itemActualTypeArgs=parameterizedItemType.getActualTypeArguments();      itemType=parseArray_extraction_2(objectType,itemType,parameterizedItemType,itemActualTypeArgs);    }  } else   itemType=parseArray_extraction_3(objectType,itemType);  final JSONLexer lexer=parser.lexer;  final int token=lexer.token();  if (token == JSONToken.LBRACKET) {    parseArray_extraction_4(parser,array,itemType,itemTypeDeser,lexer);  } else {    if (itemTypeDeser == null) {      itemTypeDeser=deserializer=parser.getConfig().getDeserializer(itemType);    }    Object val=itemTypeDeser.deserialze(parser,itemType,0);    array.add(val);    parser.checkListResolve(array);  }}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer.parseArray.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "JavaBeanDeserializer": {
            "smartMatch": {
                "original": {
                    "method_name": "smartMatch",
                    "code": "public FieldDeserializer smartMatch(String key,int[] setFlags){  if (key == null) {    return null;  }  FieldDeserializer fieldDeserializer=getFieldDeserializer(key,setFlags);  if (fieldDeserializer == null) {    if (this.smartMatchHashArray == null) {      long[] hashArray=new long[sortedFieldDeserializers.length];      for (int i=0; i < sortedFieldDeserializers.length; i++) {        hashArray[i]=sortedFieldDeserializers[i].fieldInfo.nameHashCode;      }      Arrays.sort(hashArray);      this.smartMatchHashArray=hashArray;    }    long smartKeyHash=TypeUtils.fnv1a_64_lower(key);    int pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash);    if (pos < 0) {      long smartKeyHash1=TypeUtils.fnv1a_64_extract(key);      pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash1);    }    boolean is=false;    if (pos < 0 && (is=key.startsWith(\"is\"))) {      smartKeyHash=TypeUtils.fnv1a_64_extract(key.substring(2));      pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash);    }    if (pos >= 0) {      if (smartMatchHashArrayMapping == null) {        short[] mapping=new short[smartMatchHashArray.length];        Arrays.fill(mapping,(short)-1);        for (int i=0; i < sortedFieldDeserializers.length; i++) {          int p=Arrays.binarySearch(smartMatchHashArray,sortedFieldDeserializers[i].fieldInfo.nameHashCode);          if (p >= 0) {            mapping[p]=(short)i;          }        }        smartMatchHashArrayMapping=mapping;      }      int deserIndex=smartMatchHashArrayMapping[pos];      if (deserIndex != -1) {        if (!isSetFlag(deserIndex,setFlags)) {          fieldDeserializer=sortedFieldDeserializers[deserIndex];        }      }    }    if (fieldDeserializer != null) {      FieldInfo fieldInfo=fieldDeserializer.fieldInfo;      if ((fieldInfo.parserFeatures & Feature.DisableFieldSmartMatch.mask) != 0) {        return null;      }      Class fieldClass=fieldInfo.fieldClass;      if (is && (fieldClass != boolean.class && fieldClass != Boolean.class)) {        fieldDeserializer=null;      }    }  }  return fieldDeserializer;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.smartMatch.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "smartMatch",
                        "code": "public FieldDeserializer smartMatch(String key,int[] setFlags){  if (key == null) {    return null;  }  FieldDeserializer fieldDeserializer=getFieldDeserializer(key,setFlags);  if (fieldDeserializer == null) {    if (this.smartMatchHashArray == null) {      long[] hashArray=new long[sortedFieldDeserializers.length];      for (int i=0; i < sortedFieldDeserializers.length; i++) {        hashArray[i]=sortedFieldDeserializers[i].fieldInfo.nameHashCode;      }      Arrays.sort(hashArray);      this.smartMatchHashArray=hashArray;    }    long smartKeyHash=TypeUtils.fnv1a_64_lower(key);    int pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash);    if (pos < 0) {      long smartKeyHash1=TypeUtils.fnv1a_64_extract(key);      pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash1);    }    boolean is=false;    if (pos < 0 && (is=key.startsWith(\"is\"))) {      smartKeyHash=TypeUtils.fnv1a_64_extract(key.substring(2));      pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash);    }    fieldDeserializer=smartMatch_extraction_2(setFlags,fieldDeserializer,pos);    if (fieldDeserializer != null) {      FieldInfo fieldInfo=fieldDeserializer.fieldInfo;      if ((fieldInfo.parserFeatures & Feature.DisableFieldSmartMatch.mask) != 0) {        return null;      }      Class fieldClass=fieldInfo.fieldClass;      if (is && (fieldClass != boolean.class && fieldClass != Boolean.class)) {        fieldDeserializer=null;      }    }  }  return fieldDeserializer;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.smartMatch.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "smartMatch",
                        "code": "public FieldDeserializer smartMatch(String key,int[] setFlags){  if (key == null) {    return null;  }  FieldDeserializer fieldDeserializer=getFieldDeserializer(key,setFlags);  if (fieldDeserializer == null) {    long smartKeyHash;    int pos=smartMatch_extraction_1(key);    boolean is=false;    if (pos < 0 && (is=key.startsWith(\"is\"))) {      smartKeyHash=TypeUtils.fnv1a_64_extract(key.substring(2));      pos=Arrays.binarySearch(smartMatchHashArray,smartKeyHash);    }    fieldDeserializer=smartMatch_extraction_2(setFlags,fieldDeserializer,pos);    if (fieldDeserializer != null) {      FieldInfo fieldInfo=fieldDeserializer.fieldInfo;      if ((fieldInfo.parserFeatures & Feature.DisableFieldSmartMatch.mask) != 0) {        return null;      }      Class fieldClass=fieldInfo.fieldClass;      if (is && (fieldClass != boolean.class && fieldClass != Boolean.class)) {        fieldDeserializer=null;      }    }  }  return fieldDeserializer;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.smartMatch.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "MapDeserializer": {
            "parseMap": {
                "original": {
                    "method_name": "parseMap",
                    "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key;      if (lexer.token() == JSONToken.LITERAL_STRING && keyDeserializer instanceof JavaBeanDeserializer) {        String keyStrValue=lexer.stringVal();        lexer.nextToken();        DefaultJSONParser keyParser=new DefaultJSONParser(keyStrValue,parser.getConfig(),parser.getLexer().getFeatures());        keyParser.setDateFormat(parser.getDateFomartPattern());        key=keyDeserializer.deserialze(keyParser,keyType,null);      } else {        key=keyDeserializer.deserialze(parser,keyType,null);      }      if (lexer.token() != JSONToken.COLON) {        throw new JSONException(\"syntax error, expect :, actual \" + lexer.token());      }      lexer.nextToken(valueDeserializer.getFastMatchToken());      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      if (lexer.token() == JSONToken.COMMA) {        lexer.nextToken(keyDeserializer.getFastMatchToken());      }    }  }  finally {    parser.setContext(context);  }  return map;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parseMap",
                        "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key;      if (lexer.token() == JSONToken.LITERAL_STRING && keyDeserializer instanceof JavaBeanDeserializer) {        String keyStrValue=lexer.stringVal();        lexer.nextToken();        DefaultJSONParser keyParser=new DefaultJSONParser(keyStrValue,parser.getConfig(),parser.getLexer().getFeatures());        keyParser.setDateFormat(parser.getDateFomartPattern());        key=keyDeserializer.deserialze(keyParser,keyType,null);      } else {        key=keyDeserializer.deserialze(parser,keyType,null);      }      if (lexer.token() != JSONToken.COLON) {        throw new JSONException(\"syntax error, expect :, actual \" + lexer.token());      }      lexer.nextToken(valueDeserializer.getFastMatchToken());      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_extraction_3(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseMap",
                        "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        if (lexer.token() == JSONToken.LITERAL_STRING) {          String ref=lexer.stringVal();          if (\"..\".equals(ref)) {            ParseContext parentContext=context.parent;            object=parentContext.object;          } else           if (\"$\".equals(ref)) {            ParseContext rootContext=context;            while (rootContext.parent != null) {              rootContext=rootContext.parent;            }            object=rootContext.object;          } else {            parser.addResolveTask(new ResolveTask(context,ref));            parser.setResolveStatus(DefaultJSONParser.NeedToResolve);          }        } else {          throw new JSONException(\"illegal ref, \" + JSONToken.name(lexer.token()));        }        lexer.nextToken(JSONToken.RBRACE);        if (lexer.token() != JSONToken.RBRACE) {          throw new JSONException(\"illegal ref\");        }        lexer.nextToken(JSONToken.COMMA);        return object;      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key=parseMap_extraction_2(parser,keyType,lexer,keyDeserializer,valueDeserializer);      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_extraction_3(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseMap",
                        "code": "public static Object parseMap(DefaultJSONParser parser,Map<Object,Object> map,Type keyType,Type valueType,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {    throw new JSONException(\"syntax error, expect {, actual \" + lexer.tokenName());  }  ObjectDeserializer keyDeserializer=parser.getConfig().getDeserializer(keyType);  ObjectDeserializer valueDeserializer=parser.getConfig().getDeserializer(valueType);  lexer.nextToken(keyDeserializer.getFastMatchToken());  ParseContext context=parser.getContext();  try {    for (; ; ) {      if (lexer.token() == JSONToken.RBRACE) {        lexer.nextToken(JSONToken.COMMA);        break;      }      if (lexer.token() == JSONToken.LITERAL_STRING && lexer.isRef() && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        Object object=null;        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        return parseMap_extraction_1(parser,lexer,context,object);      }      if (map.size() == 0 && lexer.token() == JSONToken.LITERAL_STRING && JSON.DEFAULT_TYPE_KEY.equals(lexer.stringVal()) && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);        lexer.nextToken(JSONToken.COMMA);        if (lexer.token() == JSONToken.RBRACE) {          lexer.nextToken();          return map;        }        lexer.nextToken(keyDeserializer.getFastMatchToken());      }      Object key=parseMap_extraction_2(parser,keyType,lexer,keyDeserializer,valueDeserializer);      Object value=valueDeserializer.deserialze(parser,valueType,key);      parser.checkMapResolve(map,key);      map.put(key,value);      parseMap_extraction_3(lexer,keyDeserializer);    }  }  finally {    parser.setContext(context);  }  return map;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.MapDeserializer.parseMap.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "TimeDeserializer": {
            "deserialze": {
                "original": {
                    "method_name": "deserialze",
                    "code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    if (lexer.token() != JSONToken.LITERAL_STRING) {      throw new JSONException(\"syntax error\");    }    lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    if (lexer.token() != JSONToken.LITERAL_INT) {      throw new JSONException(\"syntax error\");    }    long time=lexer.longValue();    lexer.nextToken(JSONToken.RBRACE);    if (lexer.token() != JSONToken.RBRACE) {      throw new JSONException(\"syntax error\");    }    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=true;      for (int i=0; i < strVal.length(); ++i) {        char ch=strVal.charAt(i);        if (ch < '0' || ch > '9') {          isDigit=false;          break;        }      }      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "deserialze",
                        "code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    if (lexer.token() != JSONToken.LITERAL_STRING) {      throw new JSONException(\"syntax error\");    }    lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    if (lexer.token() != JSONToken.LITERAL_INT) {      throw new JSONException(\"syntax error\");    }    long time=lexer.longValue();    lexer.nextToken(JSONToken.RBRACE);    if (lexer.token() != JSONToken.RBRACE) {      throw new JSONException(\"syntax error\");    }    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=deserialze_extraction_2(strVal);      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "deserialze",
                        "code": "@SuppressWarnings(\"unchecked\") public <T>T deserialze(DefaultJSONParser parser,Type clazz,Object fieldName){  JSONLexer lexer=parser.lexer;  if (lexer.token() == JSONToken.COMMA) {    lexer.nextToken(JSONToken.LITERAL_STRING);    long time=deserialze_extraction_1(lexer);    lexer.nextToken(JSONToken.COMMA);    return (T)new java.sql.Time(time);  }  Object val=parser.parse();  if (val == null) {    return null;  }  if (val instanceof java.sql.Time) {    return (T)val;  } else   if (val instanceof BigDecimal) {    return (T)new java.sql.Time(TypeUtils.longValue((BigDecimal)val));  } else   if (val instanceof Number) {    return (T)new java.sql.Time(((Number)val).longValue());  } else   if (val instanceof String) {    String strVal=(String)val;    if (strVal.length() == 0) {      return null;    }    long longVal;    JSONScanner dateLexer=new JSONScanner(strVal);    if (dateLexer.scanISO8601DateIfMatch()) {      longVal=dateLexer.getCalendar().getTimeInMillis();    } else {      boolean isDigit=deserialze_extraction_2(strVal);      if (!isDigit) {        dateLexer.close();        return (T)java.sql.Time.valueOf(strVal);      }      longVal=Long.parseLong(strVal);    }    dateLexer.close();    return (T)new java.sql.Time(longVal);  }  throw new JSONException(\"parse error\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.parser.deserializer.TimeDeserializer.deserialze.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "fastjson.src.main.java.com.alibaba.fastjson.serializer": {
        "ASMSerializerFactory": {
            "generateWriteMethod": {
                "original": {
                    "method_name": "generateWriteMethod",
                    "code": "private void generateWriteMethod(Class<?> clazz,MethodVisitor mw,FieldInfo[] getters,Context context) throws Exception {  Label end=new Label();  int size=getters.length;  if (!context.writeDirect) {    Label endSupper_=new Label();    Label supper_=new Label();    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitLdcInsn(SerializerFeature.PrettyFormat.mask);    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");    mw.visitJumpInsn(IFNE,supper_);    boolean hasMethod=false;    for (    FieldInfo getter : getters) {      if (getter.method != null) {        hasMethod=true;        break;      }    }    if (hasMethod) {      mw.visitVarInsn(ALOAD,context.var(\"out\"));      mw.visitLdcInsn(SerializerFeature.IgnoreErrorGetter.mask);      mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");      mw.visitJumpInsn(IFEQ,endSupper_);    } else {      mw.visitJumpInsn(GOTO,endSupper_);    }    mw.visitLabel(supper_);    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,1);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKESPECIAL,JavaBeanSerializer,\"write\",\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);    mw.visitLabel(endSupper_);  }  if (!context.nonContext) {    Label endRef_=new Label();    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitVarInsn(ILOAD,Context.features);    mw.visitMethodInsn(INVOKEVIRTUAL,JavaBeanSerializer,\"writeReference\",\"(L\" + JSONSerializer + \";Ljava/lang/Object;I)Z\");    mw.visitJumpInsn(IFEQ,endRef_);    mw.visitInsn(RETURN);    mw.visitLabel(endRef_);  }  final String writeAsArrayMethodName;  if (context.writeDirect) {    if (context.nonContext) {      writeAsArrayMethodName=\"writeAsArrayNonContext\";    } else {      writeAsArrayMethodName=\"writeAsArray\";    }  } else {    writeAsArrayMethodName=\"writeAsArrayNormal\";  }  if ((context.beanInfo.features & SerializerFeature.BeanToArray.mask) == 0) {    Label endWriteAsArray_=new Label();    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitLdcInsn(SerializerFeature.BeanToArray.mask);    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");    mw.visitJumpInsn(IFEQ,endWriteAsArray_);    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKEVIRTUAL,context.className,writeAsArrayMethodName,\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);    mw.visitLabel(endWriteAsArray_);  } else {    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKEVIRTUAL,context.className,writeAsArrayMethodName,\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);  }  if (!context.nonContext) {    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"getContext\",\"()\" + SerialContext_desc);    mw.visitVarInsn(ASTORE,context.var(\"parent\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,context.var(\"parent\"));    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitVarInsn(ALOAD,Context.paramFieldName);    mw.visitLdcInsn(context.beanInfo.features);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"setContext\",\"(\" + SerialContext_desc + \"Ljava/lang/Object;Ljava/lang/Object;I)V\");  }  boolean writeClasName=(context.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0;  if (writeClasName || !context.writeDirect) {    Label end_=new Label();    Label else_=new Label();    Label writeClass_=new Label();    if (!writeClasName) {      mw.visitVarInsn(ALOAD,Context.serializer);      mw.visitVarInsn(ALOAD,Context.paramFieldType);      mw.visitVarInsn(ALOAD,Context.obj);      mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"isWriteClassName\",\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\");      mw.visitJumpInsn(IFEQ,else_);    }    mw.visitVarInsn(ALOAD,Context.paramFieldType);    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitMethodInsn(INVOKEVIRTUAL,\"java/lang/Object\",\"getClass\",\"()Ljava/lang/Class;\");    mw.visitJumpInsn(IF_ACMPEQ,else_);    mw.visitLabel(writeClass_);    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitVarInsn(BIPUSH,'{');    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    if (context.beanInfo.typeKey != null) {      mw.visitLdcInsn(context.beanInfo.typeKey);    } else {      mw.visitInsn(ACONST_NULL);    }    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitMethodInsn(INVOKEVIRTUAL,JavaBeanSerializer,\"writeClassName\",\"(L\" + JSONSerializer + \";Ljava/lang/String;Ljava/lang/Object;)V\");    mw.visitVarInsn(BIPUSH,',');    mw.visitJumpInsn(GOTO,end_);    mw.visitLabel(else_);    mw.visitVarInsn(BIPUSH,'{');    mw.visitLabel(end_);  } else {    mw.visitVarInsn(BIPUSH,'{');  }  mw.visitVarInsn(ISTORE,context.var(\"seperator\"));  if (!context.writeDirect) {    _before(mw,context);  }  if (!context.writeDirect) {    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isNotWriteDefaultValue\",\"()Z\");    mw.visitVarInsn(ISTORE,context.var(\"notWriteDefaultValue\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,0);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"checkValue\",\"(\" + SerializeFilterable_desc + \")Z\");    mw.visitVarInsn(ISTORE,context.var(\"checkValue\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,0);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"hasNameFilters\",\"(\" + SerializeFilterable_desc + \")Z\");    mw.visitVarInsn(ISTORE,context.var(\"hasNameFilters\"));  }  for (int i=0; i < size; ++i) {    FieldInfo property=getters[i];    Class<?> propertyClass=property.fieldClass;    mw.visitLdcInsn(property.name);    mw.visitVarInsn(ASTORE,Context.fieldName);    if (propertyClass == byte.class || propertyClass == short.class || propertyClass == int.class) {      _int(clazz,mw,property,context,context.var(propertyClass.getName()),'I');    } else     if (propertyClass == long.class) {      _long(clazz,mw,property,context);    } else     if (propertyClass == float.class) {      _float(clazz,mw,property,context);    } else     if (propertyClass == double.class) {      _double(clazz,mw,property,context);    } else     if (propertyClass == boolean.class) {      _int(clazz,mw,property,context,context.var(\"boolean\"),'Z');    } else     if (propertyClass == char.class) {      _int(clazz,mw,property,context,context.var(\"char\"),'C');    } else     if (propertyClass == String.class) {      _string(clazz,mw,property,context);    } else     if (propertyClass == BigDecimal.class) {      _decimal(clazz,mw,property,context);    } else     if (List.class.isAssignableFrom(propertyClass)) {      _list(clazz,mw,property,context);    } else     if (propertyClass.isEnum()) {      _enum(clazz,mw,property,context);    } else {      _object(clazz,mw,property,context);    }  }  if (!context.writeDirect) {    _after(mw,context);  }  Label _else=new Label();  Label _end_if=new Label();  mw.visitVarInsn(ILOAD,context.var(\"seperator\"));  mw.visitIntInsn(BIPUSH,'{');  mw.visitJumpInsn(IF_ICMPNE,_else);  mw.visitVarInsn(ALOAD,context.var(\"out\"));  mw.visitVarInsn(BIPUSH,'{');  mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");  mw.visitLabel(_else);  mw.visitVarInsn(ALOAD,context.var(\"out\"));  mw.visitVarInsn(BIPUSH,'}');  mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");  mw.visitLabel(_end_if);  mw.visitLabel(end);  if (!context.nonContext) {    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,context.var(\"parent\"));    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"setContext\",\"(\" + SerialContext_desc + \")V\");  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteMethod.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "generateWriteMethod",
                        "code": "private void generateWriteMethod(Class<?> clazz,MethodVisitor mw,FieldInfo[] getters,Context context) throws Exception {  Label end=new Label();  int size=getters.length;  if (!context.writeDirect) {    Label endSupper_=new Label();    Label supper_=new Label();    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitLdcInsn(SerializerFeature.PrettyFormat.mask);    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");    mw.visitJumpInsn(IFNE,supper_);    boolean hasMethod=false;    for (    FieldInfo getter : getters) {      if (getter.method != null) {        hasMethod=true;        break;      }    }    if (hasMethod) {      mw.visitVarInsn(ALOAD,context.var(\"out\"));      mw.visitLdcInsn(SerializerFeature.IgnoreErrorGetter.mask);      mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");      mw.visitJumpInsn(IFEQ,endSupper_);    } else {      mw.visitJumpInsn(GOTO,endSupper_);    }    mw.visitLabel(supper_);    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,1);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKESPECIAL,JavaBeanSerializer,\"write\",\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);    mw.visitLabel(endSupper_);  }  if (!context.nonContext) {    Label endRef_=new Label();    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitVarInsn(ILOAD,Context.features);    mw.visitMethodInsn(INVOKEVIRTUAL,JavaBeanSerializer,\"writeReference\",\"(L\" + JSONSerializer + \";Ljava/lang/Object;I)Z\");    mw.visitJumpInsn(IFEQ,endRef_);    mw.visitInsn(RETURN);    mw.visitLabel(endRef_);  }  final String writeAsArrayMethodName;  if (context.writeDirect) {    if (context.nonContext) {      writeAsArrayMethodName=\"writeAsArrayNonContext\";    } else {      writeAsArrayMethodName=\"writeAsArray\";    }  } else {    writeAsArrayMethodName=\"writeAsArrayNormal\";  }  if ((context.beanInfo.features & SerializerFeature.BeanToArray.mask) == 0) {    Label endWriteAsArray_=new Label();    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitLdcInsn(SerializerFeature.BeanToArray.mask);    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");    mw.visitJumpInsn(IFEQ,endWriteAsArray_);    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKEVIRTUAL,context.className,writeAsArrayMethodName,\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);    mw.visitLabel(endWriteAsArray_);  } else {    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKEVIRTUAL,context.className,writeAsArrayMethodName,\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);  }  if (!context.nonContext) {    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"getContext\",\"()\" + SerialContext_desc);    mw.visitVarInsn(ASTORE,context.var(\"parent\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,context.var(\"parent\"));    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitVarInsn(ALOAD,Context.paramFieldName);    mw.visitLdcInsn(context.beanInfo.features);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"setContext\",\"(\" + SerialContext_desc + \"Ljava/lang/Object;Ljava/lang/Object;I)V\");  }  boolean writeClasName=(context.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0;  if (writeClasName || !context.writeDirect) {    Label end_=new Label();    Label else_=new Label();    Label writeClass_=new Label();    if (!writeClasName) {      mw.visitVarInsn(ALOAD,Context.serializer);      mw.visitVarInsn(ALOAD,Context.paramFieldType);      mw.visitVarInsn(ALOAD,Context.obj);      mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"isWriteClassName\",\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\");      mw.visitJumpInsn(IFEQ,else_);    }    mw.visitVarInsn(ALOAD,Context.paramFieldType);    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitMethodInsn(INVOKEVIRTUAL,\"java/lang/Object\",\"getClass\",\"()Ljava/lang/Class;\");    mw.visitJumpInsn(IF_ACMPEQ,else_);    mw.visitLabel(writeClass_);    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitVarInsn(BIPUSH,'{');    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    if (context.beanInfo.typeKey != null) {      mw.visitLdcInsn(context.beanInfo.typeKey);    } else {      mw.visitInsn(ACONST_NULL);    }    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitMethodInsn(INVOKEVIRTUAL,JavaBeanSerializer,\"writeClassName\",\"(L\" + JSONSerializer + \";Ljava/lang/String;Ljava/lang/Object;)V\");    mw.visitVarInsn(BIPUSH,',');    mw.visitJumpInsn(GOTO,end_);    mw.visitLabel(else_);    mw.visitVarInsn(BIPUSH,'{');    mw.visitLabel(end_);  } else {    mw.visitVarInsn(BIPUSH,'{');  }  mw.visitVarInsn(ISTORE,context.var(\"seperator\"));  if (!context.writeDirect) {    _before(mw,context);  }  if (!context.writeDirect) {    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isNotWriteDefaultValue\",\"()Z\");    mw.visitVarInsn(ISTORE,context.var(\"notWriteDefaultValue\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,0);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"checkValue\",\"(\" + SerializeFilterable_desc + \")Z\");    mw.visitVarInsn(ISTORE,context.var(\"checkValue\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,0);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"hasNameFilters\",\"(\" + SerializeFilterable_desc + \")Z\");    mw.visitVarInsn(ISTORE,context.var(\"hasNameFilters\"));  }  Label _end_if=generateWriteMethod_extraction_2(clazz,mw,getters,context,size);  mw.visitVarInsn(ALOAD,context.var(\"out\"));  mw.visitVarInsn(BIPUSH,'}');  mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");  mw.visitLabel(_end_if);  mw.visitLabel(end);  if (!context.nonContext) {    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,context.var(\"parent\"));    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"setContext\",\"(\" + SerialContext_desc + \")V\");  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteMethod.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "generateWriteMethod",
                        "code": "private void generateWriteMethod(Class<?> clazz,MethodVisitor mw,FieldInfo[] getters,Context context) throws Exception {  Label end=new Label();  int size=getters.length;  final String writeAsArrayMethodName=generateWriteMethod_extraction_1(mw,getters,context);  if ((context.beanInfo.features & SerializerFeature.BeanToArray.mask) == 0) {    Label endWriteAsArray_=new Label();    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitLdcInsn(SerializerFeature.BeanToArray.mask);    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isEnabled\",\"(I)Z\");    mw.visitJumpInsn(IFEQ,endWriteAsArray_);    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKEVIRTUAL,context.className,writeAsArrayMethodName,\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);    mw.visitLabel(endWriteAsArray_);  } else {    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,2);    mw.visitVarInsn(ALOAD,3);    mw.visitVarInsn(ALOAD,4);    mw.visitVarInsn(ILOAD,5);    mw.visitMethodInsn(INVOKEVIRTUAL,context.className,writeAsArrayMethodName,\"(L\" + JSONSerializer + \";Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V\");    mw.visitInsn(RETURN);  }  if (!context.nonContext) {    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"getContext\",\"()\" + SerialContext_desc);    mw.visitVarInsn(ASTORE,context.var(\"parent\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,context.var(\"parent\"));    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitVarInsn(ALOAD,Context.paramFieldName);    mw.visitLdcInsn(context.beanInfo.features);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"setContext\",\"(\" + SerialContext_desc + \"Ljava/lang/Object;Ljava/lang/Object;I)V\");  }  boolean writeClasName=(context.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0;  if (writeClasName || !context.writeDirect) {    Label end_=new Label();    Label else_=new Label();    Label writeClass_=new Label();    if (!writeClasName) {      mw.visitVarInsn(ALOAD,Context.serializer);      mw.visitVarInsn(ALOAD,Context.paramFieldType);      mw.visitVarInsn(ALOAD,Context.obj);      mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"isWriteClassName\",\"(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z\");      mw.visitJumpInsn(IFEQ,else_);    }    mw.visitVarInsn(ALOAD,Context.paramFieldType);    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitMethodInsn(INVOKEVIRTUAL,\"java/lang/Object\",\"getClass\",\"()Ljava/lang/Class;\");    mw.visitJumpInsn(IF_ACMPEQ,else_);    mw.visitLabel(writeClass_);    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitVarInsn(BIPUSH,'{');    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");    mw.visitVarInsn(ALOAD,0);    mw.visitVarInsn(ALOAD,Context.serializer);    if (context.beanInfo.typeKey != null) {      mw.visitLdcInsn(context.beanInfo.typeKey);    } else {      mw.visitInsn(ACONST_NULL);    }    mw.visitVarInsn(ALOAD,Context.obj);    mw.visitMethodInsn(INVOKEVIRTUAL,JavaBeanSerializer,\"writeClassName\",\"(L\" + JSONSerializer + \";Ljava/lang/String;Ljava/lang/Object;)V\");    mw.visitVarInsn(BIPUSH,',');    mw.visitJumpInsn(GOTO,end_);    mw.visitLabel(else_);    mw.visitVarInsn(BIPUSH,'{');    mw.visitLabel(end_);  } else {    mw.visitVarInsn(BIPUSH,'{');  }  mw.visitVarInsn(ISTORE,context.var(\"seperator\"));  if (!context.writeDirect) {    _before(mw,context);  }  if (!context.writeDirect) {    mw.visitVarInsn(ALOAD,context.var(\"out\"));    mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"isNotWriteDefaultValue\",\"()Z\");    mw.visitVarInsn(ISTORE,context.var(\"notWriteDefaultValue\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,0);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"checkValue\",\"(\" + SerializeFilterable_desc + \")Z\");    mw.visitVarInsn(ISTORE,context.var(\"checkValue\"));    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,0);    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"hasNameFilters\",\"(\" + SerializeFilterable_desc + \")Z\");    mw.visitVarInsn(ISTORE,context.var(\"hasNameFilters\"));  }  Label _end_if=generateWriteMethod_extraction_2(clazz,mw,getters,context,size);  mw.visitVarInsn(ALOAD,context.var(\"out\"));  mw.visitVarInsn(BIPUSH,'}');  mw.visitMethodInsn(INVOKEVIRTUAL,SerializeWriter,\"write\",\"(I)V\");  mw.visitLabel(_end_if);  mw.visitLabel(end);  if (!context.nonContext) {    mw.visitVarInsn(ALOAD,Context.serializer);    mw.visitVarInsn(ALOAD,context.var(\"parent\"));    mw.visitMethodInsn(INVOKEVIRTUAL,JSONSerializer,\"setContext\",\"(\" + SerialContext_desc + \")V\");  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.ASMSerializerFactory.generateWriteMethod.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "AwtCodec": {
            "parseFont": {
                "original": {
                    "method_name": "parseFont",
                    "code": "protected Font parseFont(DefaultJSONParser parser){  JSONLexer lexer=parser.lexer;  int size=0, style=0;  String name=null;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    if (key.equalsIgnoreCase(\"name\")) {      if (lexer.token() == JSONToken.LITERAL_STRING) {        name=lexer.stringVal();        lexer.nextToken();      } else {        throw new JSONException(\"syntax error\");      }    } else     if (key.equalsIgnoreCase(\"style\")) {      if (lexer.token() == JSONToken.LITERAL_INT) {        style=lexer.intValue();        lexer.nextToken();      } else {        throw new JSONException(\"syntax error\");      }    } else     if (key.equalsIgnoreCase(\"size\")) {      if (lexer.token() == JSONToken.LITERAL_INT) {        size=lexer.intValue();        lexer.nextToken();      } else {        throw new JSONException(\"syntax error\");      }    } else {      throw new JSONException(\"syntax error, \" + key);    }    if (lexer.token() == JSONToken.COMMA) {      lexer.nextToken(JSONToken.LITERAL_STRING);    }  }  return new Font(name,style,size);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parseFont.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parseFont",
                        "code": "protected Font parseFont(DefaultJSONParser parser){  JSONLexer lexer=parser.lexer;  int size=0, style=0;  String name=null;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    if (key.equalsIgnoreCase(\"name\")) {      if (lexer.token() == JSONToken.LITERAL_STRING) {        name=lexer.stringVal();        lexer.nextToken();      } else {        throw new JSONException(\"syntax error\");      }    } else     if (key.equalsIgnoreCase(\"style\")) {      if (lexer.token() == JSONToken.LITERAL_INT) {        style=lexer.intValue();        lexer.nextToken();      } else {        throw new JSONException(\"syntax error\");      }    } else     size=parseFont_extraction_2(lexer,size,key);    if (lexer.token() == JSONToken.COMMA) {      lexer.nextToken(JSONToken.LITERAL_STRING);    }  }  return new Font(name,style,size);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parseFont.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseFont",
                        "code": "protected Font parseFont(DefaultJSONParser parser){  JSONLexer lexer=parser.lexer;  int size=0, style=0;  String name=null;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    if (key.equalsIgnoreCase(\"name\")) {      if (lexer.token() == JSONToken.LITERAL_STRING) {        name=lexer.stringVal();        lexer.nextToken();      } else {        throw new JSONException(\"syntax error\");      }    } else     if (key.equalsIgnoreCase(\"style\")) {      style=parseFont_extraction_1(lexer,style);    } else     size=parseFont_extraction_2(lexer,size,key);    if (lexer.token() == JSONToken.COMMA) {      lexer.nextToken(JSONToken.LITERAL_STRING);    }  }  return new Font(name,style,size);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parseFont.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "parsePoint": {
                "original": {
                    "method_name": "parsePoint",
                    "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     if (key.equalsIgnoreCase(\"y\")) {      y=val;    } else {      throw new JSONException(\"syntax error, \" + key);    }    if (lexer.token() == JSONToken.COMMA) {      lexer.nextToken(JSONToken.LITERAL_STRING);    }  }  return new Point(x,y);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parsePoint",
                        "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     if (key.equalsIgnoreCase(\"y\")) {      y=val;    } else {      throw new JSONException(\"syntax error, \" + key);    }    parsePoint_extraction_3(lexer);  }  return new Point(x,y);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parsePoint",
                        "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val;    if (token == JSONToken.LITERAL_INT) {      val=lexer.intValue();      lexer.nextToken();    } else     if (token == JSONToken.LITERAL_FLOAT) {      val=(int)lexer.floatValue();      lexer.nextToken();    } else {      throw new JSONException(\"syntax error : \" + lexer.tokenName());    }    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     y=parsePoint_extraction_2(y,key,val);    parsePoint_extraction_3(lexer);  }  return new Point(x,y);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parsePoint",
                        "code": "protected Point parsePoint(DefaultJSONParser parser,Object fieldName){  JSONLexer lexer=parser.lexer;  int x=0, y=0;  for (; ; ) {    if (lexer.token() == JSONToken.RBRACE) {      lexer.nextToken();      break;    }    String key;    if (lexer.token() == JSONToken.LITERAL_STRING) {      key=lexer.stringVal();      if (JSON.DEFAULT_TYPE_KEY.equals(key)) {        parser.acceptType(\"java.awt.Point\");        continue;      }      if (\"$ref\".equals(key)) {        return (Point)parseRef(parser,fieldName);      }      lexer.nextTokenWithColon(JSONToken.LITERAL_INT);    } else {      throw new JSONException(\"syntax error\");    }    int token=lexer.token();    int val=parsePoint_extraction_1(lexer,token);    if (key.equalsIgnoreCase(\"x\")) {      x=val;    } else     y=parsePoint_extraction_2(y,key,val);    parsePoint_extraction_3(lexer);  }  return new Point(x,y);}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.AwtCodec.parsePoint.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "JSONSerializer": {
            "writeWithFormat": {
                "original": {
                    "method_name": "writeWithFormat",
                    "code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    if (\"unixtime\".equals(format)) {      long seconds=((Date)object).getTime() / 1000L;      out.writeInt((int)seconds);      return;    }    if (\"millis\".equals(format)) {      out.writeLong(((Date)object).getTime());      return;    }    DateFormat dateFormat=this.getDateFormat();    if (dateFormat == null) {      if (format != null) {        try {          dateFormat=this.generateDateFormat(format);        } catch (        IllegalArgumentException e) {          String format2=format.replaceAll(\"T\",\"'T'\");          dateFormat=this.generateDateFormat(format2);        }      } else       if (fastJsonConfigDateFormatPattern != null) {        dateFormat=this.generateDateFormat(fastJsonConfigDateFormatPattern);      } else {        dateFormat=this.generateDateFormat(JSON.DEFFAULT_DATE_FORMAT);      }    }    String text=dateFormat.format((Date)object);    out.writeString(text);    return;  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  if (object instanceof Collection) {    Collection collection=(Collection)object;    Iterator iterator=collection.iterator();    out.write('[');    for (int i=0; i < collection.size(); i++) {      Object item=iterator.next();      if (i != 0) {        out.write(',');      }      writeWithFormat(item,format);    }    out.write(']');    return;  }  write(object);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "writeWithFormat",
                        "code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    if (\"unixtime\".equals(format)) {      long seconds=((Date)object).getTime() / 1000L;      out.writeInt((int)seconds);      return;    }    if (\"millis\".equals(format)) {      out.writeLong(((Date)object).getTime());      return;    }    DateFormat dateFormat=this.getDateFormat();    if (dateFormat == null) {      if (format != null) {        try {          dateFormat=this.generateDateFormat(format);        } catch (        IllegalArgumentException e) {          String format2=format.replaceAll(\"T\",\"'T'\");          dateFormat=this.generateDateFormat(format2);        }      } else       if (fastJsonConfigDateFormatPattern != null) {        dateFormat=this.generateDateFormat(fastJsonConfigDateFormatPattern);      } else {        dateFormat=this.generateDateFormat(JSON.DEFFAULT_DATE_FORMAT);      }    }    String text=dateFormat.format((Date)object);    out.writeString(text);    return;  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  writeWithFormat_extraction_2(object,format);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "writeWithFormat",
                        "code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    writeWithFormat_extraction_1(object,format);  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  writeWithFormat_extraction_2(object,format);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "SerialContext": {
            "toString": {
                "original": {
                    "method_name": "toString",
                    "code": "protected void toString(StringBuilder buf){  if (parent == null) {    buf.append('$');  } else {    parent.toString(buf);    if (fieldName == null) {      buf.append(\".null\");    } else     if (fieldName instanceof Integer) {      buf.append('[');      buf.append(((Integer)fieldName).intValue());      buf.append(']');    } else {      buf.append('.');      String fieldName=this.fieldName.toString();      boolean special=false;      for (int i=0; i < fieldName.length(); ++i) {        char ch=fieldName.charAt(i);        if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')|| ch > 128) {          continue;        }        special=true;        break;      }      if (special) {        for (int i=0; i < fieldName.length(); ++i) {          char ch=fieldName.charAt(i);          if (ch == '\\\\') {            buf.append('\\\\');            buf.append('\\\\');            buf.append('\\\\');          } else           if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')|| ch > 128) {            buf.append(ch);            continue;          } else           if (ch == '\\\"') {            buf.append('\\\\');            buf.append('\\\\');            buf.append('\\\\');          } else {            buf.append('\\\\');            buf.append('\\\\');          }          buf.append(ch);        }      } else {        buf.append(fieldName);      }    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.SerialContext.toString.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "toString",
                        "code": "protected void toString(StringBuilder buf){  if (parent == null) {    buf.append('$');  } else {    parent.toString(buf);    if (fieldName == null) {      buf.append(\".null\");    } else     if (fieldName instanceof Integer) {      buf.append('[');      buf.append(((Integer)fieldName).intValue());      buf.append(']');    } else {      buf.append('.');      String fieldName=this.fieldName.toString();      boolean special=false;      for (int i=0; i < fieldName.length(); ++i) {        char ch=fieldName.charAt(i);        if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')|| ch > 128) {          continue;        }        special=true;        break;      }      if (special) {        for (int i=0; i < fieldName.length(); ++i) {          char ch=fieldName.charAt(i);          toString_extraction_2(buf,ch);        }      } else {        buf.append(fieldName);      }    }  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.SerialContext.toString.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "toString",
                        "code": "protected void toString(StringBuilder buf){  if (parent == null) {    buf.append('$');  } else {    parent.toString(buf);    if (fieldName == null) {      buf.append(\".null\");    } else     if (fieldName instanceof Integer) {      buf.append('[');      buf.append(((Integer)fieldName).intValue());      buf.append(']');    } else {      buf.append('.');      String fieldName=this.fieldName.toString();      boolean special=false;      special=toString_extraction_1(fieldName,special);      if (special) {        for (int i=0; i < fieldName.length(); ++i) {          char ch=fieldName.charAt(i);          toString_extraction_2(buf,ch);        }      } else {        buf.append(fieldName);      }    }  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.SerialContext.toString.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "SerializeWriter": {
            "write": {
                "original": {
                    "method_name": "write",
                    "code": "public void write(List<String> list){  if (list.isEmpty()) {    write(\"[]\");    return;  }  int offset=count;  final int initOffset=offset;  for (int i=0, list_size=list.size(); i < list_size; ++i) {    String text=list.get(i);    boolean hasSpecial=false;    if (text == null) {      hasSpecial=true;    } else {      for (int j=0, len=text.length(); j < len; ++j) {        char ch=text.charAt(j);        if (hasSpecial=(ch < ' ' || ch > '~' || ch == '\"' || ch == '\\\\')) {          break;        }      }    }    if (hasSpecial) {      count=initOffset;      write('[');      for (int j=0; j < list.size(); ++j) {        text=list.get(j);        if (j != 0) {          write(',');        }        if (text == null) {          write(\"null\");        } else {          writeStringWithDoubleQuote(text,(char)0);        }      }      write(']');      return;    }    int newcount=offset + text.length() + 3;    if (i == list.size() - 1) {      newcount++;    }    if (newcount > buf.length) {      count=offset;      expandCapacity(newcount);    }    if (i == 0) {      buf[offset++]='[';    } else {      buf[offset++]=',';    }    buf[offset++]='\"';    text.getChars(0,text.length(),buf,offset);    offset+=text.length();    buf[offset++]='\"';  }  buf[offset++]=']';  count=offset;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.SerializeWriter.write.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "write",
                        "code": "public void write(List<String> list){  if (list.isEmpty()) {    write(\"[]\");    return;  }  int offset=count;  final int initOffset=offset;  for (int i=0, list_size=list.size(); i < list_size; ++i) {    String text=list.get(i);    boolean hasSpecial=false;    if (text == null) {      hasSpecial=true;    } else {      for (int j=0, len=text.length(); j < len; ++j) {        char ch=text.charAt(j);        if (hasSpecial=(ch < ' ' || ch > '~' || ch == '\"' || ch == '\\\\')) {          break;        }      }    }    if (hasSpecial) {      count=initOffset;      write('[');      for (int j=0; j < list.size(); ++j) {        text=list.get(j);        if (j != 0) {          write(',');        }        if (text == null) {          write(\"null\");        } else {          writeStringWithDoubleQuote(text,(char)0);        }      }      write(']');      return;    }    int newcount=offset + text.length() + 3;    offset=write_extraction_2(list,offset,i,newcount);    text.getChars(0,text.length(),buf,offset);    offset+=text.length();    buf[offset++]='\"';  }  buf[offset++]=']';  count=offset;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.SerializeWriter.write.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "write",
                        "code": "public void write(List<String> list){  if (list.isEmpty()) {    write(\"[]\");    return;  }  int offset=count;  final int initOffset=offset;  for (int i=0, list_size=list.size(); i < list_size; ++i) {    String text=list.get(i);    boolean hasSpecial=false;    if (text == null) {      hasSpecial=true;    } else {      for (int j=0, len=text.length(); j < len; ++j) {        char ch=text.charAt(j);        if (hasSpecial=(ch < ' ' || ch > '~' || ch == '\"' || ch == '\\\\')) {          break;        }      }    }    if (hasSpecial) {      count=initOffset;      write('[');      text=write_extraction_1(list,text);      write(']');      return;    }    int newcount=offset + text.length() + 3;    offset=write_extraction_2(list,offset,i,newcount);    text.getChars(0,text.length(),buf,offset);    offset+=text.length();    buf[offset++]='\"';  }  buf[offset++]=']';  count=offset;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.SerializeWriter.write.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "fastjson.src.main.java.com.alibaba.fastjson.support.hsf": {
        "HSFJSONUtils": {
            "parseInvocationArguments": {
                "original": {
                    "method_name": "parseInvocationArguments",
                    "code": "public static Object[] parseInvocationArguments(String json,MethodLocator methodLocator){  DefaultJSONParser parser=new DefaultJSONParser(json);  JSONLexerBase lexer=(JSONLexerBase)parser.getLexer();  ParseContext rootContext=parser.setContext(null,null);  Object[] values;  int token=lexer.token();  if (token == JSONToken.LBRACE) {    String[] typeNames=lexer.scanFieldStringArray(fieldName_argsTypes,-1,typeSymbolTable);    if (typeNames == null && lexer.matchStat == NOT_MATCH_NAME) {      String type=lexer.scanFieldString(fieldName_type);      if (\"com.alibaba.fastjson.JSONObject\".equals(type)) {        typeNames=lexer.scanFieldStringArray(fieldName_argsTypes,-1,typeSymbolTable);      }    }    Method method=methodLocator.findMethod(typeNames);    if (method == null) {      lexer.close();      JSONObject jsonObject=JSON.parseObject(json);      typeNames=jsonObject.getObject(\"argsTypes\",String[].class);      method=methodLocator.findMethod(typeNames);      JSONArray argsObjs=jsonObject.getJSONArray(\"argsObjs\");      if (argsObjs == null) {        values=null;      } else {        Type[] argTypes=method.getGenericParameterTypes();        values=new Object[argTypes.length];        for (int i=0; i < argTypes.length; i++) {          Type type=argTypes[i];          values[i]=argsObjs.getObject(i,type);        }      }    } else {      Type[] argTypes=method.getGenericParameterTypes();      lexer.skipWhitespace();      if (lexer.getCurrent() == ',') {        lexer.next();      }      if (lexer.matchField2(fieldName_argsObjs)) {        lexer.nextToken();        ParseContext context=parser.setContext(rootContext,null,\"argsObjs\");        values=parser.parseArray(argTypes);        context.object=values;        parser.accept(JSONToken.RBRACE);        parser.handleResovleTask(null);      } else {        values=null;      }      parser.close();    }  } else   if (token == JSONToken.LBRACKET) {    String[] typeNames=lexer.scanFieldStringArray(null,-1,typeSymbolTable);    lexer.skipWhitespace();    char ch=lexer.getCurrent();    if (ch == ']') {      Method method=methodLocator.findMethod(null);      Type[] argTypes=method.getGenericParameterTypes();      values=new Object[typeNames.length];      for (int i=0; i < typeNames.length; ++i) {        Type argType=argTypes[i];        String typeName=typeNames[i];        if (argType != String.class) {          values[i]=TypeUtils.cast(typeName,argType,parser.getConfig());        } else {          values[i]=typeName;        }      }      return values;    }    if (ch == ',') {      lexer.next();      lexer.skipWhitespace();    }    lexer.nextToken(JSONToken.LBRACKET);    Method method=methodLocator.findMethod(typeNames);    Type[] argTypes=method.getGenericParameterTypes();    values=parser.parseArray(argTypes);    lexer.close();  } else {    values=null;  }  return values;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.support.hsf.HSFJSONUtils.parseInvocationArguments.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parseInvocationArguments",
                        "code": "public static Object[] parseInvocationArguments(String json,MethodLocator methodLocator){  DefaultJSONParser parser=new DefaultJSONParser(json);  JSONLexerBase lexer=(JSONLexerBase)parser.getLexer();  ParseContext rootContext=parser.setContext(null,null);  Object[] values;  int token=lexer.token();  if (token == JSONToken.LBRACE) {    String[] typeNames=lexer.scanFieldStringArray(fieldName_argsTypes,-1,typeSymbolTable);    if (typeNames == null && lexer.matchStat == NOT_MATCH_NAME) {      String type=lexer.scanFieldString(fieldName_type);      if (\"com.alibaba.fastjson.JSONObject\".equals(type)) {        typeNames=lexer.scanFieldStringArray(fieldName_argsTypes,-1,typeSymbolTable);      }    }    Method method=methodLocator.findMethod(typeNames);    if (method == null) {      lexer.close();      JSONObject jsonObject=JSON.parseObject(json);      typeNames=jsonObject.getObject(\"argsTypes\",String[].class);      method=methodLocator.findMethod(typeNames);      JSONArray argsObjs=jsonObject.getJSONArray(\"argsObjs\");      if (argsObjs == null) {        values=null;      } else {        Type[] argTypes=method.getGenericParameterTypes();        values=new Object[argTypes.length];        for (int i=0; i < argTypes.length; i++) {          Type type=argTypes[i];          values[i]=argsObjs.getObject(i,type);        }      }    } else {      Type[] argTypes=method.getGenericParameterTypes();      lexer.skipWhitespace();      if (lexer.getCurrent() == ',') {        lexer.next();      }      if (lexer.matchField2(fieldName_argsObjs)) {        lexer.nextToken();        ParseContext context=parser.setContext(rootContext,null,\"argsObjs\");        values=parser.parseArray(argTypes);        context.object=values;        parser.accept(JSONToken.RBRACE);        parser.handleResovleTask(null);      } else {        values=null;      }      parser.close();    }  } else   if (token == JSONToken.LBRACKET) {    String[] typeNames=lexer.scanFieldStringArray(null,-1,typeSymbolTable);    lexer.skipWhitespace();    char ch=lexer.getCurrent();    if (ch == ']') {      Method method=methodLocator.findMethod(null);      return parseInvocationArguments_extraction_2(parser,typeNames,method);    }    if (ch == ',') {      lexer.next();      lexer.skipWhitespace();    }    lexer.nextToken(JSONToken.LBRACKET);    Method method=methodLocator.findMethod(typeNames);    Type[] argTypes=method.getGenericParameterTypes();    values=parser.parseArray(argTypes);    lexer.close();  } else {    values=null;  }  return values;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.support.hsf.HSFJSONUtils.parseInvocationArguments.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseInvocationArguments",
                        "code": "public static Object[] parseInvocationArguments(String json,MethodLocator methodLocator){  DefaultJSONParser parser=new DefaultJSONParser(json);  JSONLexerBase lexer=(JSONLexerBase)parser.getLexer();  ParseContext rootContext=parser.setContext(null,null);  Object[] values;  int token=lexer.token();  if (token == JSONToken.LBRACE) {    String[] typeNames=lexer.scanFieldStringArray(fieldName_argsTypes,-1,typeSymbolTable);    if (typeNames == null && lexer.matchStat == NOT_MATCH_NAME) {      String type=lexer.scanFieldString(fieldName_type);      if (\"com.alibaba.fastjson.JSONObject\".equals(type)) {        typeNames=lexer.scanFieldStringArray(fieldName_argsTypes,-1,typeSymbolTable);      }    }    Method method=methodLocator.findMethod(typeNames);    values=parseInvocationArguments_extraction_1(json,methodLocator,parser,lexer,rootContext,method);  } else   if (token == JSONToken.LBRACKET) {    String[] typeNames=lexer.scanFieldStringArray(null,-1,typeSymbolTable);    lexer.skipWhitespace();    char ch=lexer.getCurrent();    if (ch == ']') {      Method method=methodLocator.findMethod(null);      return parseInvocationArguments_extraction_2(parser,typeNames,method);    }    if (ch == ',') {      lexer.next();      lexer.skipWhitespace();    }    lexer.nextToken(JSONToken.LBRACKET);    Method method=methodLocator.findMethod(typeNames);    Type[] argTypes=method.getGenericParameterTypes();    values=parser.parseArray(argTypes);    lexer.close();  } else {    values=null;  }  return values;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.support.hsf.HSFJSONUtils.parseInvocationArguments.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "fastjson.src.main.java.com.alibaba.fastjson.util": {
        "JavaBeanInfo": {
            "computeFields": {
                "original": {
                    "method_name": "computeFields",
                    "code": "private static void computeFields(Class<?> clazz,Type type,PropertyNamingStrategy propertyNamingStrategy,List<FieldInfo> fieldList,Field[] fields){  Map<TypeVariable,Type> genericInfo=buildGenericInfo(clazz);  for (  Field field : fields) {    int modifiers=field.getModifiers();    if ((modifiers & Modifier.STATIC) != 0) {      continue;    }    if ((modifiers & Modifier.FINAL) != 0) {      Class<?> fieldType=field.getType();      boolean supportReadOnly=Map.class.isAssignableFrom(fieldType) || Collection.class.isAssignableFrom(fieldType) || AtomicLong.class.equals(fieldType)|| AtomicInteger.class.equals(fieldType)|| AtomicBoolean.class.equals(fieldType);      if (!supportReadOnly) {        continue;      }    }    boolean contains=false;    for (    FieldInfo item : fieldList) {      if (item.name.equals(field.getName())) {        contains=true;        break;      }    }    if (contains) {      continue;    }    int ordinal=0, serialzeFeatures=0, parserFeatures=0;    String propertyName=field.getName();    JSONField fieldAnnotation=TypeUtils.getAnnotation(field,JSONField.class);    if (fieldAnnotation != null) {      if (!fieldAnnotation.deserialize()) {        continue;      }      ordinal=fieldAnnotation.ordinal();      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());      parserFeatures=Feature.of(fieldAnnotation.parseFeatures());      if (fieldAnnotation.name().length() != 0) {        propertyName=fieldAnnotation.name();      }    }    if (propertyNamingStrategy != null) {      propertyName=propertyNamingStrategy.translate(propertyName);    }    add(fieldList,new FieldInfo(propertyName,null,field,clazz,type,ordinal,serialzeFeatures,parserFeatures,null,fieldAnnotation,null,genericInfo));  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "fastjson.src.main.java.com.alibaba.fastjson.util.JavaBeanInfo.computeFields.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "computeFields",
                        "code": "private static void computeFields(Class<?> clazz,Type type,PropertyNamingStrategy propertyNamingStrategy,List<FieldInfo> fieldList,Field[] fields){  Map<TypeVariable,Type> genericInfo=buildGenericInfo(clazz);  for (  Field field : fields) {    int modifiers=field.getModifiers();    if ((modifiers & Modifier.STATIC) != 0) {      continue;    }    if ((modifiers & Modifier.FINAL) != 0) {      Class<?> fieldType=field.getType();      boolean supportReadOnly=Map.class.isAssignableFrom(fieldType) || Collection.class.isAssignableFrom(fieldType) || AtomicLong.class.equals(fieldType)|| AtomicInteger.class.equals(fieldType)|| AtomicBoolean.class.equals(fieldType);      if (!supportReadOnly) {        continue;      }    }    boolean contains=false;    for (    FieldInfo item : fieldList) {      if (item.name.equals(field.getName())) {        contains=true;        break;      }    }    if (contains) {      continue;    }    int ordinal=0, serialzeFeatures=0, parserFeatures=0;    String propertyName=field.getName();    JSONField fieldAnnotation=TypeUtils.getAnnotation(field,JSONField.class);    if (fieldAnnotation != null) {      if (!fieldAnnotation.deserialize()) {        continue;      }      ordinal=fieldAnnotation.ordinal();      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());      parserFeatures=Feature.of(fieldAnnotation.parseFeatures());      if (fieldAnnotation.name().length() != 0) {        propertyName=fieldAnnotation.name();      }    }    propertyName=computeFields_extraction_4(clazz,type,propertyNamingStrategy,fieldList,genericInfo,field,ordinal,serialzeFeatures,parserFeatures,propertyName,fieldAnnotation);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.util.JavaBeanInfo.computeFields.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "computeFields",
                        "code": "private static void computeFields(Class<?> clazz,Type type,PropertyNamingStrategy propertyNamingStrategy,List<FieldInfo> fieldList,Field[] fields){  Map<TypeVariable,Type> genericInfo=buildGenericInfo(clazz);  for (  Field field : fields) {    int modifiers=field.getModifiers();    if ((modifiers & Modifier.STATIC) != 0) {      continue;    }    if ((modifiers & Modifier.FINAL) != 0) {      Class<?> fieldType=field.getType();      boolean supportReadOnly=Map.class.isAssignableFrom(fieldType) || Collection.class.isAssignableFrom(fieldType) || AtomicLong.class.equals(fieldType)|| AtomicInteger.class.equals(fieldType)|| AtomicBoolean.class.equals(fieldType);      if (!supportReadOnly) {        continue;      }    }    boolean contains=false;    for (    FieldInfo item : fieldList) {      if (item.name.equals(field.getName())) {        contains=true;        break;      }    }    if (contains) {      continue;    }    int ordinal=0, serialzeFeatures=0, parserFeatures=0;    String propertyName=field.getName();    JSONField fieldAnnotation=TypeUtils.getAnnotation(field,JSONField.class);    if (fieldAnnotation != null) {      if (!fieldAnnotation.deserialize()) {        continue;      }      ordinal=fieldAnnotation.ordinal();      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());      parserFeatures=Feature.of(fieldAnnotation.parseFeatures());      propertyName=computeFields_extraction_3(propertyName,fieldAnnotation);    }    propertyName=computeFields_extraction_4(clazz,type,propertyNamingStrategy,fieldList,genericInfo,field,ordinal,serialzeFeatures,parserFeatures,propertyName,fieldAnnotation);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.util.JavaBeanInfo.computeFields.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "computeFields",
                        "code": "private static void computeFields(Class<?> clazz,Type type,PropertyNamingStrategy propertyNamingStrategy,List<FieldInfo> fieldList,Field[] fields){  Map<TypeVariable,Type> genericInfo=buildGenericInfo(clazz);  for (  Field field : fields) {    int modifiers=field.getModifiers();    if ((modifiers & Modifier.STATIC) != 0) {      continue;    }    if ((modifiers & Modifier.FINAL) != 0) {      Class<?> fieldType=field.getType();      boolean supportReadOnly=Map.class.isAssignableFrom(fieldType) || Collection.class.isAssignableFrom(fieldType) || AtomicLong.class.equals(fieldType)|| AtomicInteger.class.equals(fieldType)|| AtomicBoolean.class.equals(fieldType);      if (!supportReadOnly) {        continue;      }    }    boolean contains=computeFields_extraction_2(fieldList,field);    if (contains) {      continue;    }    int ordinal=0, serialzeFeatures=0, parserFeatures=0;    String propertyName=field.getName();    JSONField fieldAnnotation=TypeUtils.getAnnotation(field,JSONField.class);    if (fieldAnnotation != null) {      if (!fieldAnnotation.deserialize()) {        continue;      }      ordinal=fieldAnnotation.ordinal();      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());      parserFeatures=Feature.of(fieldAnnotation.parseFeatures());      propertyName=computeFields_extraction_3(propertyName,fieldAnnotation);    }    propertyName=computeFields_extraction_4(clazz,type,propertyNamingStrategy,fieldList,genericInfo,field,ordinal,serialzeFeatures,parserFeatures,propertyName,fieldAnnotation);  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.util.JavaBeanInfo.computeFields.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "computeFields",
                        "code": "private static void computeFields(Class<?> clazz,Type type,PropertyNamingStrategy propertyNamingStrategy,List<FieldInfo> fieldList,Field[] fields){  Map<TypeVariable,Type> genericInfo=buildGenericInfo(clazz);  for (  Field field : fields) {    int modifiers=field.getModifiers();    if ((modifiers & Modifier.STATIC) != 0) {      continue;    }    if ((modifiers & Modifier.FINAL) != 0) {      boolean supportReadOnly=computeFields_extraction_1(field);      if (!supportReadOnly) {        continue;      }    }    boolean contains=computeFields_extraction_2(fieldList,field);    if (contains) {      continue;    }    int ordinal=0, serialzeFeatures=0, parserFeatures=0;    String propertyName=field.getName();    JSONField fieldAnnotation=TypeUtils.getAnnotation(field,JSONField.class);    if (fieldAnnotation != null) {      if (!fieldAnnotation.deserialize()) {        continue;      }      ordinal=fieldAnnotation.ordinal();      serialzeFeatures=SerializerFeature.of(fieldAnnotation.serialzeFeatures());      parserFeatures=Feature.of(fieldAnnotation.parseFeatures());      propertyName=computeFields_extraction_3(propertyName,fieldAnnotation);    }    propertyName=computeFields_extraction_4(clazz,type,propertyNamingStrategy,fieldList,genericInfo,field,ordinal,serialzeFeatures,parserFeatures,propertyName,fieldAnnotation);  }}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.util.JavaBeanInfo.computeFields.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "jedis.src.main.java.redis.clients.jedis": {
        "JedisClusterCommand": {
            "runWithRetries": {
                "original": {
                    "method_name": "runWithRetries",
                    "code": "private T runWithRetries(final int slot){  Instant deadline=Instant.now().plus(maxTotalRetriesDuration);  JedisRedirectionException redirect=null;  int consecutiveConnectionFailures=0;  Exception lastException=null;  for (int attemptsLeft=this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {    Jedis connection=null;    try {      if (redirect != null) {        connection=connectionHandler.getConnectionFromNode(redirect.getTargetNode());        if (redirect instanceof JedisAskDataException) {          connection.asking();        }      } else {        connection=connectionHandler.getConnectionFromSlot(slot);      }      return execute(connection);    } catch (    JedisConnectionException jce) {      lastException=jce;      ++consecutiveConnectionFailures;      LOG.debug(\"Failed connecting to Redis: {}\",connection,jce);      boolean reset=handleConnectionProblem(attemptsLeft - 1,consecutiveConnectionFailures,deadline);      if (reset) {        consecutiveConnectionFailures=0;        redirect=null;      }    }catch (    JedisRedirectionException jre) {      if (lastException == null || lastException instanceof JedisRedirectionException) {        lastException=jre;      }      LOG.debug(\"Redirected by server to {}\",jre.getTargetNode());      consecutiveConnectionFailures=0;      redirect=jre;      if (jre instanceof JedisMovedDataException) {        this.connectionHandler.renewSlotCache(connection);      }    } finally {      releaseConnection(connection);    }    if (Instant.now().isAfter(deadline)) {      throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\");    }  }  JedisClusterMaxAttemptsException maxAttemptsException=new JedisClusterMaxAttemptsException(\"No more cluster attempts left.\");  maxAttemptsException.addSuppressed(lastException);  throw maxAttemptsException;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "jedis.src.main.java.redis.clients.jedis.JedisClusterCommand.runWithRetries.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "runWithRetries",
                        "code": "private T runWithRetries(final int slot){  Instant deadline=Instant.now().plus(maxTotalRetriesDuration);  JedisRedirectionException redirect=null;  int consecutiveConnectionFailures=0;  Exception lastException=null;  for (int attemptsLeft=this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {    Jedis connection=null;    try {      if (redirect != null) {        connection=connectionHandler.getConnectionFromNode(redirect.getTargetNode());        if (redirect instanceof JedisAskDataException) {          connection.asking();        }      } else {        connection=connectionHandler.getConnectionFromSlot(slot);      }      return execute(connection);    } catch (    JedisConnectionException jce) {      lastException=jce;      ++consecutiveConnectionFailures;      LOG.debug(\"Failed connecting to Redis: {}\",connection,jce);      boolean reset=handleConnectionProblem(attemptsLeft - 1,consecutiveConnectionFailures,deadline);      runWithRetries_extraction_2(reset);    }catch (    JedisRedirectionException jre) {      if (lastException == null || lastException instanceof JedisRedirectionException) {        lastException=jre;      }      LOG.debug(\"Redirected by server to {}\",jre.getTargetNode());      consecutiveConnectionFailures=0;      redirect=jre;      if (jre instanceof JedisMovedDataException) {        this.connectionHandler.renewSlotCache(connection);      }    } finally {      releaseConnection(connection);    }    if (Instant.now().isAfter(deadline)) {      throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\");    }  }  JedisClusterMaxAttemptsException maxAttemptsException=new JedisClusterMaxAttemptsException(\"No more cluster attempts left.\");  maxAttemptsException.addSuppressed(lastException);  throw maxAttemptsException;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jedis.src.main.java.redis.clients.jedis.JedisClusterCommand.runWithRetries.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "runWithRetries",
                        "code": "private T runWithRetries(final int slot){  Instant deadline=Instant.now().plus(maxTotalRetriesDuration);  JedisRedirectionException redirect=null;  int consecutiveConnectionFailures=0;  Exception lastException=null;  for (int attemptsLeft=this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {    Jedis connection=null;    try {      connection=runWithRetries_extraction_1(slot,redirect);      return execute(connection);    } catch (    JedisConnectionException jce) {      lastException=jce;      ++consecutiveConnectionFailures;      LOG.debug(\"Failed connecting to Redis: {}\",connection,jce);      boolean reset=handleConnectionProblem(attemptsLeft - 1,consecutiveConnectionFailures,deadline);      runWithRetries_extraction_2(reset);    }catch (    JedisRedirectionException jre) {      if (lastException == null || lastException instanceof JedisRedirectionException) {        lastException=jre;      }      LOG.debug(\"Redirected by server to {}\",jre.getTargetNode());      consecutiveConnectionFailures=0;      redirect=jre;      if (jre instanceof JedisMovedDataException) {        this.connectionHandler.renewSlotCache(connection);      }    } finally {      releaseConnection(connection);    }    if (Instant.now().isAfter(deadline)) {      throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\");    }  }  JedisClusterMaxAttemptsException maxAttemptsException=new JedisClusterMaxAttemptsException(\"No more cluster attempts left.\");  maxAttemptsException.addSuppressed(lastException);  throw maxAttemptsException;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jedis.src.main.java.redis.clients.jedis.JedisClusterCommand.runWithRetries.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead": {
        "MOEADD": {
            "deleteCrowdRegion2": {
                "original": {
                    "method_name": "deleteCrowdRegion2",
                    "code": "/**  * delete a solution from the most crowded subregion (this function happens when: it should delete the solution in the 'parentLocation' subregion, but since this subregion only has one solution, it should be kept) */public void deleteCrowdRegion2(S indiv,int location){  double indivFitness=fitnessFunction(indiv,lambda[location]);  ArrayList<Integer> crowdList=new ArrayList<>();  int crowdIdx;  int nicheCount=countOnes(0);  if (location == 0) {    nicheCount++;  }  crowdList.add(0);  for (int i=1; i < populationSize; i++) {    int curSize=countOnes(i);    if (location == i) {      curSize++;    }    if (curSize > nicheCount) {      crowdList.clear();      nicheCount=curSize;      crowdList.add(i);    } else     if (curSize == nicheCount) {      crowdList.add(i);    }  }  if (crowdList.size() == 1) {    crowdIdx=crowdList.get(0);  } else {    int listLength=crowdList.size();    crowdIdx=crowdList.get(0);    double sumFitness=sumFitness(crowdIdx);    if (crowdIdx == location) {      sumFitness=sumFitness + indivFitness;    }    for (int i=1; i < listLength; i++) {      int curIdx=crowdList.get(i);      double curFitness=sumFitness(curIdx);      if (curIdx == location) {        curFitness=curFitness + indivFitness;      }      if (curFitness > sumFitness) {        crowdIdx=curIdx;        sumFitness=curFitness;      }    }  }  ArrayList<Integer> indList=new ArrayList<>();  for (int i=0; i < populationSize; i++) {    if (subregionIdx[crowdIdx][i] == 1) {      indList.add(i);    }  }  if (crowdIdx == location) {    int temp=-1;    indList.add(temp);  }  ArrayList<Integer> maxRankList=new ArrayList<>();  int maxRank=(int)population.get(indList.get(0)).getAttribute(ranking.getAttributeIdentifier());  maxRankList.add(indList.get(0));  for (int i=1; i < indList.size(); i++) {    int curRank;    if (indList.get(i) == -1) {      curRank=(int)indiv.getAttribute(ranking.getAttributeIdentifier());    } else {      curRank=(int)population.get(indList.get(i)).getAttribute(ranking.getAttributeIdentifier());    }    if (curRank > maxRank) {      maxRankList.clear();      maxRank=curRank;      maxRankList.add(indList.get(i));    } else     if (curRank == maxRank) {      maxRankList.add(indList.get(i));    }  }  double maxFitness;  int rankSize=maxRankList.size();  int targetIdx=maxRankList.get(0);  if (targetIdx == -1) {    maxFitness=indivFitness;  } else {    maxFitness=fitnessFunction(population.get(targetIdx),lambda[crowdIdx]);  }  for (int i=1; i < rankSize; i++) {    double curFitness;    int curIdx=maxRankList.get(i);    if (curIdx == -1) {      curFitness=indivFitness;    } else {      curFitness=fitnessFunction(population.get(curIdx),lambda[crowdIdx]);    }    if (curFitness > maxFitness) {      targetIdx=curIdx;      maxFitness=curFitness;    }  }  if (targetIdx == -1) {    nondominated_sorting_delete(indiv);  } else {    int indivRank=(int)indiv.getAttribute(ranking.getAttributeIdentifier());    int targetRank=(int)population.get(targetIdx).getAttribute(ranking.getAttributeIdentifier());    rankIdx[targetRank][targetIdx]=0;    rankIdx[indivRank][targetIdx]=1;    S targetSol=population.get(targetIdx);    replace(targetIdx,indiv);    subregionIdx[crowdIdx][targetIdx]=0;    subregionIdx[location][targetIdx]=1;    nondominated_sorting_delete(targetSol);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.deleteCrowdRegion2.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "deleteCrowdRegion2",
                        "code": "/**  * delete a solution from the most crowded subregion (this function happens when: it should delete the solution in the 'parentLocation' subregion, but since this subregion only has one solution, it should be kept) */public void deleteCrowdRegion2(S indiv,int location){  double indivFitness=fitnessFunction(indiv,lambda[location]);  ArrayList<Integer> crowdList=new ArrayList<>();  int crowdIdx;  int nicheCount=countOnes(0);  if (location == 0) {    nicheCount++;  }  crowdList.add(0);  for (int i=1; i < populationSize; i++) {    int curSize=countOnes(i);    if (location == i) {      curSize++;    }    if (curSize > nicheCount) {      crowdList.clear();      nicheCount=curSize;      crowdList.add(i);    } else     if (curSize == nicheCount) {      crowdList.add(i);    }  }  if (crowdList.size() == 1) {    crowdIdx=crowdList.get(0);  } else {    int listLength=crowdList.size();    crowdIdx=crowdList.get(0);    double sumFitness=sumFitness(crowdIdx);    if (crowdIdx == location) {      sumFitness=sumFitness + indivFitness;    }    for (int i=1; i < listLength; i++) {      int curIdx=crowdList.get(i);      double curFitness=sumFitness(curIdx);      if (curIdx == location) {        curFitness=curFitness + indivFitness;      }      if (curFitness > sumFitness) {        crowdIdx=curIdx;        sumFitness=curFitness;      }    }  }  ArrayList<Integer> indList=new ArrayList<>();  for (int i=0; i < populationSize; i++) {    if (subregionIdx[crowdIdx][i] == 1) {      indList.add(i);    }  }  if (crowdIdx == location) {    int temp=-1;    indList.add(temp);  }  ArrayList<Integer> maxRankList=new ArrayList<>();  int maxRank=(int)population.get(indList.get(0)).getAttribute(ranking.getAttributeIdentifier());  int targetIdx=deleteCrowdRegion2_extraction_2(indiv,indivFitness,crowdIdx,indList,maxRankList,maxRank);  if (targetIdx == -1) {    nondominated_sorting_delete(indiv);  } else {    int indivRank=(int)indiv.getAttribute(ranking.getAttributeIdentifier());    int targetRank=(int)population.get(targetIdx).getAttribute(ranking.getAttributeIdentifier());    rankIdx[targetRank][targetIdx]=0;    rankIdx[indivRank][targetIdx]=1;    S targetSol=population.get(targetIdx);    replace(targetIdx,indiv);    subregionIdx[crowdIdx][targetIdx]=0;    subregionIdx[location][targetIdx]=1;    nondominated_sorting_delete(targetSol);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.deleteCrowdRegion2.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "deleteCrowdRegion2",
                        "code": "/**  * delete a solution from the most crowded subregion (this function happens when: it should delete the solution in the 'parentLocation' subregion, but since this subregion only has one solution, it should be kept) */public void deleteCrowdRegion2(S indiv,int location){  double indivFitness=fitnessFunction(indiv,lambda[location]);  ArrayList<Integer> crowdList=new ArrayList<>();  int crowdIdx;  int nicheCount=countOnes(0);  if (location == 0) {    nicheCount++;  }  crowdList.add(0);  for (int i=1; i < populationSize; i++) {    int curSize=countOnes(i);    if (location == i) {      curSize++;    }    if (curSize > nicheCount) {      crowdList.clear();      nicheCount=curSize;      crowdList.add(i);    } else     if (curSize == nicheCount) {      crowdList.add(i);    }  }  if (crowdList.size() == 1) {    crowdIdx=crowdList.get(0);  } else {    int listLength=crowdList.size();    crowdIdx=crowdList.get(0);    crowdIdx=deleteCrowdRegion2_extraction_1(location,indivFitness,crowdList,crowdIdx,listLength);  }  ArrayList<Integer> indList=new ArrayList<>();  for (int i=0; i < populationSize; i++) {    if (subregionIdx[crowdIdx][i] == 1) {      indList.add(i);    }  }  if (crowdIdx == location) {    int temp=-1;    indList.add(temp);  }  ArrayList<Integer> maxRankList=new ArrayList<>();  int maxRank=(int)population.get(indList.get(0)).getAttribute(ranking.getAttributeIdentifier());  int targetIdx=deleteCrowdRegion2_extraction_2(indiv,indivFitness,crowdIdx,indList,maxRankList,maxRank);  if (targetIdx == -1) {    nondominated_sorting_delete(indiv);  } else {    int indivRank=(int)indiv.getAttribute(ranking.getAttributeIdentifier());    int targetRank=(int)population.get(targetIdx).getAttribute(ranking.getAttributeIdentifier());    rankIdx[targetRank][targetIdx]=0;    rankIdx[indivRank][targetIdx]=1;    S targetSol=population.get(targetIdx);    replace(targetIdx,indiv);    subregionIdx[crowdIdx][targetIdx]=0;    subregionIdx[location][targetIdx]=1;    nondominated_sorting_delete(targetSol);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.deleteCrowdRegion2.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "deleteRankOne": {
                "original": {
                    "method_name": "deleteRankOne",
                    "code": "/**  * if there is only one non-domination level (i.e., all solutions are non-dominated with each other), we should delete a solution from the most crowded subregion */public void deleteRankOne(S indiv,int location){  double indivFitness=fitnessFunction(indiv,lambda[location]);  ArrayList<Integer> crowdList=new ArrayList<>();  int crowdIdx;  int nicheCount=countOnes(0);  if (location == 0) {    nicheCount++;  }  crowdList.add(0);  for (int i=1; i < populationSize; i++) {    int curSize=countOnes(i);    if (location == i) {      curSize++;    }    if (curSize > nicheCount) {      crowdList.clear();      nicheCount=curSize;      crowdList.add(i);    } else     if (curSize == nicheCount) {      crowdList.add(i);    }  }  if (crowdList.size() == 1) {    crowdIdx=crowdList.get(0);  } else {    int listLength=crowdList.size();    crowdIdx=crowdList.get(0);    double sumFitness=sumFitness(crowdIdx);    if (crowdIdx == location) {      sumFitness=sumFitness + indivFitness;    }    for (int i=1; i < listLength; i++) {      int curIdx=crowdList.get(i);      double curFitness=sumFitness(curIdx);      if (curIdx == location) {        curFitness=curFitness + indivFitness;      }      if (curFitness > sumFitness) {        crowdIdx=curIdx;        sumFitness=curFitness;      }    }  }switch (nicheCount) {case 0:    System.out.println(\"Empty subregion!!!\");  break;case 1:int targetIdx;for (targetIdx=0; targetIdx < populationSize; targetIdx++) {if (subregionIdx[location][targetIdx] == 1) {  break;}}double prev_func=fitnessFunction(population.get(targetIdx),lambda[location]);if (indivFitness < prev_func) {replace(targetIdx,indiv);}break;default:if (location == crowdIdx) {deleteCrowdIndiv_same(location,nicheCount,indivFitness,indiv);} else {int curNC=countOnes(location);int crowdNC=countOnes(crowdIdx);if (crowdNC > (curNC + 1)) {deleteCrowdIndiv_diff(crowdIdx,location,crowdNC,indiv);} else if (crowdNC < (curNC + 1)) {deleteCrowdIndiv_same(location,curNC,indivFitness,indiv);} else {if (curNC == 0) {deleteCrowdIndiv_diff(crowdIdx,location,crowdNC,indiv);} else {double rnd=randomGenerator.nextDouble();if (rnd < 0.5) {deleteCrowdIndiv_diff(crowdIdx,location,crowdNC,indiv);} else {deleteCrowdIndiv_same(location,curNC,indivFitness,indiv);}}}}break;}}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.deleteRankOne.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "deleteRankOne",
                        "code": "/**  * if there is only one non-domination level (i.e., all solutions are non-dominated with each other), we should delete a solution from the most crowded subregion */public void deleteRankOne(S indiv,int location){  double indivFitness=fitnessFunction(indiv,lambda[location]);  ArrayList<Integer> crowdList=new ArrayList<>();  int crowdIdx;  int nicheCount=countOnes(0);  if (location == 0) {    nicheCount++;  }  crowdList.add(0);  for (int i=1; i < populationSize; i++) {    int curSize=countOnes(i);    if (location == i) {      curSize++;    }    if (curSize > nicheCount) {      crowdList.clear();      nicheCount=curSize;      crowdList.add(i);    } else     if (curSize == nicheCount) {      crowdList.add(i);    }  }  if (crowdList.size() == 1) {    crowdIdx=crowdList.get(0);  } else {    int listLength=crowdList.size();    crowdIdx=crowdList.get(0);    double sumFitness=sumFitness(crowdIdx);    if (crowdIdx == location) {      sumFitness=sumFitness + indivFitness;    }    for (int i=1; i < listLength; i++) {      int curIdx=crowdList.get(i);      double curFitness=sumFitness(curIdx);      if (curIdx == location) {        curFitness=curFitness + indivFitness;      }      if (curFitness > sumFitness) {        crowdIdx=curIdx;        sumFitness=curFitness;      }    }  }switch (nicheCount) {case 0:    System.out.println(\"Empty subregion!!!\");  break;case 1:int targetIdx;for (targetIdx=0; targetIdx < populationSize; targetIdx++) {if (subregionIdx[location][targetIdx] == 1) {  break;}}double prev_func=fitnessFunction(population.get(targetIdx),lambda[location]);if (indivFitness < prev_func) {replace(targetIdx,indiv);}break;default:deleteRankOne_extraction_2(indiv,location,indivFitness,crowdIdx,nicheCount);break;}}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.deleteRankOne.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "deleteRankOne",
                        "code": "/**  * if there is only one non-domination level (i.e., all solutions are non-dominated with each other), we should delete a solution from the most crowded subregion */public void deleteRankOne(S indiv,int location){  double indivFitness=fitnessFunction(indiv,lambda[location]);  ArrayList<Integer> crowdList=new ArrayList<>();  int crowdIdx;  int nicheCount=countOnes(0);  if (location == 0) {    nicheCount++;  }  crowdList.add(0);  for (int i=1; i < populationSize; i++) {    int curSize=countOnes(i);    if (location == i) {      curSize++;    }    if (curSize > nicheCount) {      crowdList.clear();      nicheCount=curSize;      crowdList.add(i);    } else     if (curSize == nicheCount) {      crowdList.add(i);    }  }  crowdIdx=deleteRankOne_extraction_1(location,indivFitness,crowdList);switch (nicheCount) {case 0:    System.out.println(\"Empty subregion!!!\");  break;case 1:int targetIdx;for (targetIdx=0; targetIdx < populationSize; targetIdx++) {if (subregionIdx[location][targetIdx] == 1) {  break;}}double prev_func=fitnessFunction(population.get(targetIdx),lambda[location]);if (indivFitness < prev_func) {replace(targetIdx,indiv);}break;default:deleteRankOne_extraction_2(indiv,location,indivFitness,crowdIdx,nicheCount);break;}}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.deleteRankOne.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "matingSelection": {
                "original": {
                    "method_name": "matingSelection",
                    "code": "/**  * Select two parents for reproduction */public List<S> matingSelection(int cid,int type){  int rnd1, rnd2;  List<S> parents=new ArrayList<>(2);  int nLength=neighborhood[cid].length;  ArrayList<Integer> activeList=new ArrayList<>();  if (type == 1) {    for (int i=0; i < nLength; i++) {      int idx=neighborhood[cid][i];      for (int j=0; j < populationSize; j++) {        if (subregionIdx[idx][j] == 1) {          activeList.add(idx);          break;        }      }    }    if (activeList.size() < 2) {      activeList.clear();      for (int i=0; i < populationSize; i++) {        for (int j=0; j < populationSize; j++) {          if (subregionIdx[i][j] == 1) {            activeList.add(i);            break;          }        }      }    }    int activeSize=activeList.size();    rnd1=randomGenerator.nextInt(0,activeSize - 1);    do {      rnd2=randomGenerator.nextInt(0,activeSize - 1);    } while (rnd1 == rnd2);    ArrayList<Integer> list1=new ArrayList<>();    ArrayList<Integer> list2=new ArrayList<>();    int id1=activeList.get(rnd1);    int id2=activeList.get(rnd2);    for (int i=0; i < populationSize; i++) {      if (subregionIdx[id1][i] == 1) {        list1.add(i);      }      if (subregionIdx[id2][i] == 1) {        list2.add(i);      }    }    int p1=randomGenerator.nextInt(0,list1.size() - 1);    int p2=randomGenerator.nextInt(0,list2.size() - 1);    parents.add(population.get(list1.get(p1)));    parents.add(population.get(list2.get(p2)));  } else {    for (int i=0; i < populationSize; i++) {      for (int j=0; j < populationSize; j++) {        if (subregionIdx[i][j] == 1) {          activeList.add(i);          break;        }      }    }    int activeSize=activeList.size();    rnd1=randomGenerator.nextInt(0,activeSize - 1);    do {      rnd2=randomGenerator.nextInt(0,activeSize - 1);    } while (rnd1 == rnd2);    ArrayList<Integer> list1=new ArrayList<>();    ArrayList<Integer> list2=new ArrayList<>();    int id1=activeList.get(rnd1);    int id2=activeList.get(rnd2);    for (int i=0; i < populationSize; i++) {      if (subregionIdx[id1][i] == 1) {        list1.add(i);      }      if (subregionIdx[id2][i] == 1) {        list2.add(i);      }    }    int p1=randomGenerator.nextInt(0,list1.size() - 1);    int p2=randomGenerator.nextInt(0,list2.size() - 1);    parents.add(population.get(list1.get(p1)));    parents.add(population.get(list2.get(p2)));  }  return parents;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.matingSelection.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "matingSelection",
                        "code": "/**  * Select two parents for reproduction */public List<S> matingSelection(int cid,int type){  int rnd1, rnd2;  List<S> parents=new ArrayList<>(2);  int nLength=neighborhood[cid].length;  ArrayList<Integer> activeList=new ArrayList<>();  if (type == 1) {    for (int i=0; i < nLength; i++) {      int idx=neighborhood[cid][i];      for (int j=0; j < populationSize; j++) {        if (subregionIdx[idx][j] == 1) {          activeList.add(idx);          break;        }      }    }    if (activeList.size() < 2) {      activeList.clear();      for (int i=0; i < populationSize; i++) {        for (int j=0; j < populationSize; j++) {          if (subregionIdx[i][j] == 1) {            activeList.add(i);            break;          }        }      }    }    int activeSize=activeList.size();    rnd1=randomGenerator.nextInt(0,activeSize - 1);    do {      rnd2=randomGenerator.nextInt(0,activeSize - 1);    } while (rnd1 == rnd2);    ArrayList<Integer> list1=new ArrayList<>();    ArrayList<Integer> list2=new ArrayList<>();    int id1=activeList.get(rnd1);    int id2=activeList.get(rnd2);    for (int i=0; i < populationSize; i++) {      if (subregionIdx[id1][i] == 1) {        list1.add(i);      }      if (subregionIdx[id2][i] == 1) {        list2.add(i);      }    }    int p1=randomGenerator.nextInt(0,list1.size() - 1);    int p2=randomGenerator.nextInt(0,list2.size() - 1);    parents.add(population.get(list1.get(p1)));    parents.add(population.get(list2.get(p2)));  } else {    matingSelection_extraction_3(parents,activeList);  }  return parents;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.matingSelection.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "matingSelection",
                        "code": "/**  * Select two parents for reproduction */public List<S> matingSelection(int cid,int type){  int rnd1, rnd2;  List<S> parents=new ArrayList<>(2);  int nLength=neighborhood[cid].length;  ArrayList<Integer> activeList=new ArrayList<>();  if (type == 1) {    for (int i=0; i < nLength; i++) {      int idx=neighborhood[cid][i];      for (int j=0; j < populationSize; j++) {        if (subregionIdx[idx][j] == 1) {          activeList.add(idx);          break;        }      }    }    if (activeList.size() < 2) {      activeList.clear();      for (int i=0; i < populationSize; i++) {        for (int j=0; j < populationSize; j++) {          if (subregionIdx[i][j] == 1) {            activeList.add(i);            break;          }        }      }    }    int activeSize=activeList.size();    matingSelection_extraction_2(parents,activeList,activeSize);  } else {    matingSelection_extraction_3(parents,activeList);  }  return parents;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.matingSelection.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "matingSelection",
                        "code": "/**  * Select two parents for reproduction */public List<S> matingSelection(int cid,int type){  int rnd1, rnd2;  List<S> parents=new ArrayList<>(2);  int nLength=neighborhood[cid].length;  ArrayList<Integer> activeList=new ArrayList<>();  if (type == 1) {    for (int i=0; i < nLength; i++) {      int idx=neighborhood[cid][i];      for (int j=0; j < populationSize; j++) {        if (subregionIdx[idx][j] == 1) {          activeList.add(idx);          break;        }      }    }    if (activeList.size() < 2) {      activeList.clear();      matingSelection_extraction_1(activeList);    }    int activeSize=activeList.size();    matingSelection_extraction_2(parents,activeList,activeSize);  } else {    matingSelection_extraction_3(parents,activeList);  }  return parents;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.multiobjective.moead.MOEADD.matingSelection.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.knowage.document.export.cockpit.converter": {
        "SelectionsConverter": {
            "convert": {
                "original": {
                    "method_name": "convert",
                    "code": "@Override public JSONObject convert(JSONArray widgetFilters){  ;  JSONObject selections=new JSONObject();  JSONObject datasetFilters=new JSONObject();  if (filters != null) {    JSONObject obj=filters.optJSONObject(dataSetLabel);    if (obj != null) {      String[] names=JSONObject.getNames(obj);      if (names != null) {        for (int i=0; i < names.length; i++) {          String filter=names[i];          JSONArray array=new JSONArray();          try {            array.put(\"('\" + obj.get(filter) + \"')\");            datasetFilters.put(filter,array);          } catch (          JSONException e) {          }        }      }    }  }  if (widgetFilters != null) {    for (int i=0; i < widgetFilters.length(); i++) {      JSONObject widgetFilter;      try {        widgetFilter=widgetFilters.getJSONObject(i);        JSONArray filterVals=widgetFilter.getJSONArray(\"filterVals\");        if (filterVals.length() > 0) {          String colName=widgetFilter.getString(\"colName\");          JSONArray values=new JSONArray();          for (int j=0; j < filterVals.length(); j++) {            Object filterVal=filterVals.get(j);            values.put(\"('\" + filterVal + \"')\");          }          String filterOperator=widgetFilter.getString(\"filterOperator\");          if (filterOperator != null) {            JSONObject filter=new JSONObject();            filter.put(\"filterOperator\",filterOperator);            filter.put(\"filterVals\",values);            datasetFilters.put(colName,filter);          } else {            datasetFilters.put(colName,values);          }        }      } catch (      JSONException e) {      }    }  }  try {    selections.put(dataSetLabel,datasetFilters);  } catch (  JSONException e) {  }  return selections;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.knowage.document.export.cockpit.converter.SelectionsConverter.convert.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "convert",
                        "code": "@Override public JSONObject convert(JSONArray widgetFilters){  ;  JSONObject selections=new JSONObject();  JSONObject datasetFilters=new JSONObject();  if (filters != null) {    JSONObject obj=filters.optJSONObject(dataSetLabel);    if (obj != null) {      String[] names=JSONObject.getNames(obj);      if (names != null) {        for (int i=0; i < names.length; i++) {          String filter=names[i];          JSONArray array=new JSONArray();          try {            array.put(\"('\" + obj.get(filter) + \"')\");            datasetFilters.put(filter,array);          } catch (          JSONException e) {          }        }      }    }  }  if (widgetFilters != null) {    for (int i=0; i < widgetFilters.length(); i++) {      JSONObject widgetFilter;      convert_extraction_2(widgetFilters,datasetFilters,i);    }  }  try {    selections.put(dataSetLabel,datasetFilters);  } catch (  JSONException e) {  }  return selections;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.knowage.document.export.cockpit.converter.SelectionsConverter.convert.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "convert",
                        "code": "@Override public JSONObject convert(JSONArray widgetFilters){  ;  JSONObject selections=new JSONObject();  JSONObject datasetFilters=new JSONObject();  if (filters != null) {    JSONObject obj=filters.optJSONObject(dataSetLabel);    if (obj != null) {      String[] names=JSONObject.getNames(obj);      if (names != null) {        for (int i=0; i < names.length; i++) {          String filter=names[i];          JSONArray array=new JSONArray();          convert_extraction_1(datasetFilters,obj,filter,array);        }      }    }  }  if (widgetFilters != null) {    for (int i=0; i < widgetFilters.length(); i++) {      JSONObject widgetFilter;      convert_extraction_2(widgetFilters,datasetFilters,i);    }  }  try {    selections.put(dataSetLabel,datasetFilters);  } catch (  JSONException e) {  }  return selections;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.knowage.document.export.cockpit.converter.SelectionsConverter.convert.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document": {
        "AnalyticalModelDocumentManagementAPI": {
            "saveDocumentMetadataProperties": {
                "original": {
                    "method_name": "saveDocumentMetadataProperties",
                    "code": "/**  * @param documentDescriptor The descriptor of the target document * @param subObjectId        The id of the target subobject (optional). If it is nos specified the metadata properties will be applied to the main object * @param metadata           The metadata properties to add. They are encoded as an array of object like the following one <code>{ meta_id: NUMBER , meta_name: STRING , meta_content: STRING } </code>                at least one between attributes meta_id and meta_name must be set. TODO use this method to refactor class SaveMetadataAction */public void saveDocumentMetadataProperties(Object documentDescriptor,Integer subObjectId,List<MetadataDTO> metadata){  logger.debug(\"IN\");  try {    Assert.assertNotNull(documentDescriptor,\"Input parameter [documentDescriptor] cannot be null\");    Assert.assertNotNull(metadata,\"Input parameter [metadata] cannot be null\");    BIObject document=getDocument(documentDescriptor);    if (document == null) {      throw new SpagoBIRuntimeException(\"Impossible to resolve document [\" + documentDescriptor + \"]\");    }    for (    MetadataDTO metadataDTO : metadata) {      Integer metadataPropertyId=null;      if (metadataDTO.getMetaId() != null) {        metadataPropertyId=metadataDTO.getMetaId();      }      String metadataPropertyName=metadataDTO.getName();      if (metadataPropertyId == null && metadataPropertyName == null) {        throw new SpagoBIRuntimeException(\"Attributes [\" + MetadataJSONSerializer.METADATA_ID + \"] and [\"+ MetadataJSONSerializer.NAME+ \"] cannot be both null\");      }      if (metadataPropertyId == null) {        ObjMetadata metadataProperty=getMetadataProperty(metadataPropertyName);        if (metadataProperty != null) {          metadataPropertyId=metadataProperty.getObjMetaId();        }        if (metadataPropertyId == null) {          logger.warn(\"Impossible to resolve metadata property [\" + metadataPropertyName + \"]\");          continue;        }      }      String documentMetadataPropertyValue=metadataDTO.getText();      if (documentMetadataPropertyValue == null) {        throw new SpagoBIRuntimeException(\"Attributes [\" + MetadataJSONSerializer.TEXT + \"] of metadata property cannot [\"+ metadataPropertyId+ \"] be null\");      }      ObjMetacontent documentMatadataProperty=documentMetadataPropertyDAO.loadObjMetacontent(metadataPropertyId,document.getId(),subObjectId);      if (documentMatadataProperty == null) {        logger.debug(\"ObjMetacontent for metadata id = \" + metadataPropertyId + \", biobject id = \"+ document.getId()+ \", subobject id = \"+ subObjectId+ \" was not found, creating a new one...\");        documentMatadataProperty=new ObjMetacontent();        documentMatadataProperty.setObjmetaId(metadataPropertyId);        documentMatadataProperty.setBiobjId(document.getId());        documentMatadataProperty.setSubobjId(subObjectId);        documentMatadataProperty.setContent(documentMetadataPropertyValue.getBytes(\"UTF-8\"));        documentMatadataProperty.setCreationDate(new Date());        documentMatadataProperty.setLastChangeDate(new Date());        documentMetadataPropertyDAO.insertObjMetacontent(documentMatadataProperty);      } else {        logger.debug(\"ObjMetacontent for metadata id = \" + metadataPropertyId + \", biobject id = \"+ document.getId()+ \", subobject id = \"+ subObjectId+ \" was found, it will be modified...\");        documentMatadataProperty.setContent(documentMetadataPropertyValue.getBytes(\"UTF-8\"));        documentMatadataProperty.setLastChangeDate(new Date());        documentMetadataPropertyDAO.modifyObjMetacontent(documentMatadataProperty);      }    }  } catch (  Throwable e) {    throw new SpagoBIRuntimeException(\"Exception occurred while saving metadata\",e);  } finally {    logger.debug(\"OUT\");  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.AnalyticalModelDocumentManagementAPI.saveDocumentMetadataProperties.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "saveDocumentMetadataProperties",
                        "code": "/**  * @param documentDescriptor The descriptor of the target document * @param subObjectId        The id of the target subobject (optional). If it is nos specified the metadata properties will be applied to the main object * @param metadata           The metadata properties to add. They are encoded as an array of object like the following one <code>{ meta_id: NUMBER , meta_name: STRING , meta_content: STRING } </code>                at least one between attributes meta_id and meta_name must be set. TODO use this method to refactor class SaveMetadataAction */public void saveDocumentMetadataProperties(Object documentDescriptor,Integer subObjectId,List<MetadataDTO> metadata){  logger.debug(\"IN\");  try {    Assert.assertNotNull(documentDescriptor,\"Input parameter [documentDescriptor] cannot be null\");    Assert.assertNotNull(metadata,\"Input parameter [metadata] cannot be null\");    BIObject document=getDocument(documentDescriptor);    if (document == null) {      throw new SpagoBIRuntimeException(\"Impossible to resolve document [\" + documentDescriptor + \"]\");    }    for (    MetadataDTO metadataDTO : metadata) {      Integer metadataPropertyId=null;      if (metadataDTO.getMetaId() != null) {        metadataPropertyId=metadataDTO.getMetaId();      }      String metadataPropertyName=metadataDTO.getName();      if (metadataPropertyId == null && metadataPropertyName == null) {        throw new SpagoBIRuntimeException(\"Attributes [\" + MetadataJSONSerializer.METADATA_ID + \"] and [\"+ MetadataJSONSerializer.NAME+ \"] cannot be both null\");      }      if (metadataPropertyId == null) {        ObjMetadata metadataProperty=getMetadataProperty(metadataPropertyName);        if (metadataProperty != null) {          metadataPropertyId=metadataProperty.getObjMetaId();        }        if (metadataPropertyId == null) {          logger.warn(\"Impossible to resolve metadata property [\" + metadataPropertyName + \"]\");          continue;        }      }      String documentMetadataPropertyValue=metadataDTO.getText();      if (documentMetadataPropertyValue == null) {        throw new SpagoBIRuntimeException(\"Attributes [\" + MetadataJSONSerializer.TEXT + \"] of metadata property cannot [\"+ metadataPropertyId+ \"] be null\");      }      ObjMetacontent documentMatadataProperty=documentMetadataPropertyDAO.loadObjMetacontent(metadataPropertyId,document.getId(),subObjectId);      documentMatadataProperty=saveDocumentMetadataProperties_extraction_2(subObjectId,document,metadataPropertyId,documentMetadataPropertyValue,documentMatadataProperty);    }  } catch (  Throwable e) {    throw new SpagoBIRuntimeException(\"Exception occurred while saving metadata\",e);  } finally {    logger.debug(\"OUT\");  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.AnalyticalModelDocumentManagementAPI.saveDocumentMetadataProperties.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "saveDocumentMetadataProperties",
                        "code": "/**  * @param documentDescriptor The descriptor of the target document * @param subObjectId        The id of the target subobject (optional). If it is nos specified the metadata properties will be applied to the main object * @param metadata           The metadata properties to add. They are encoded as an array of object like the following one <code>{ meta_id: NUMBER , meta_name: STRING , meta_content: STRING } </code>                at least one between attributes meta_id and meta_name must be set. TODO use this method to refactor class SaveMetadataAction */public void saveDocumentMetadataProperties(Object documentDescriptor,Integer subObjectId,List<MetadataDTO> metadata){  logger.debug(\"IN\");  try {    Assert.assertNotNull(documentDescriptor,\"Input parameter [documentDescriptor] cannot be null\");    Assert.assertNotNull(metadata,\"Input parameter [metadata] cannot be null\");    BIObject document=getDocument(documentDescriptor);    if (document == null) {      throw new SpagoBIRuntimeException(\"Impossible to resolve document [\" + documentDescriptor + \"]\");    }    for (    MetadataDTO metadataDTO : metadata) {      Integer metadataPropertyId=null;      if (metadataDTO.getMetaId() != null) {        metadataPropertyId=metadataDTO.getMetaId();      }      String metadataPropertyName=metadataDTO.getName();      saveDocumentMetadataProperties_extraction_1(metadataPropertyId,metadataPropertyName);      if (metadataPropertyId == null) {        ObjMetadata metadataProperty=getMetadataProperty(metadataPropertyName);        if (metadataProperty != null) {          metadataPropertyId=metadataProperty.getObjMetaId();        }        if (metadataPropertyId == null) {          logger.warn(\"Impossible to resolve metadata property [\" + metadataPropertyName + \"]\");          continue;        }      }      String documentMetadataPropertyValue=metadataDTO.getText();      if (documentMetadataPropertyValue == null) {        throw new SpagoBIRuntimeException(\"Attributes [\" + MetadataJSONSerializer.TEXT + \"] of metadata property cannot [\"+ metadataPropertyId+ \"] be null\");      }      ObjMetacontent documentMatadataProperty=documentMetadataPropertyDAO.loadObjMetacontent(metadataPropertyId,document.getId(),subObjectId);      documentMatadataProperty=saveDocumentMetadataProperties_extraction_2(subObjectId,document,metadataPropertyId,documentMetadataPropertyValue,documentMatadataProperty);    }  } catch (  Throwable e) {    throw new SpagoBIRuntimeException(\"Exception occurred while saving metadata\",e);  } finally {    logger.debug(\"OUT\");  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.AnalyticalModelDocumentManagementAPI.saveDocumentMetadataProperties.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "BusinessModelOpenUtils": {
            "getChildrenForTreeLov": {
                "original": {
                    "method_name": "getChildrenForTreeLov",
                    "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          for (int s=0; s < columns.size(); s++) {            SourceBeanAttribute attributes=(SourceBeanAttribute)columns.get(s);            if (attributes.getKey().equalsIgnoreCase(treeLovNodeNameBen)) {              valueJSON.put(\"description\",attributes.getValue());            }          }          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.BusinessModelOpenUtils.getChildrenForTreeLov.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          notNullNode=getChildrenForTreeLov_extraction_3(treeLovNodeLevel,treeLovNodeNameBen,valueJSON,columns,attribute);        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.BusinessModelOpenUtils.getChildrenForTreeLov.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          notNullNode=getChildrenForTreeLov_extraction_3(treeLovNodeLevel,treeLovNodeNameBen,valueJSON,columns,attribute);        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.BusinessModelOpenUtils.getChildrenForTreeLov.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        addNode=getChildrenForTreeLov_extraction_1(treeLovNodeValue,addNode,treeLovParentNodeName,attribute);        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          notNullNode=getChildrenForTreeLov_extraction_3(treeLovNodeLevel,treeLovNodeNameBen,valueJSON,columns,attribute);        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.BusinessModelOpenUtils.getChildrenForTreeLov.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "DocumentExecutionUtils": {
            "getChildrenForTreeLov": {
                "original": {
                    "method_name": "getChildrenForTreeLov",
                    "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          for (int s=0; s < columns.size(); s++) {            SourceBeanAttribute attributes=(SourceBeanAttribute)columns.get(s);            if (attributes.getKey().equalsIgnoreCase(treeLovNodeNameBen)) {              valueJSON.put(\"description\",attributes.getValue());            }          }          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.DocumentExecutionUtils.getChildrenForTreeLov.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          notNullNode=getChildrenForTreeLov_extraction_3(treeLovNodeLevel,treeLovNodeNameBen,valueJSON,columns,attribute);        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.DocumentExecutionUtils.getChildrenForTreeLov.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          notNullNode=getChildrenForTreeLov_extraction_3(treeLovNodeLevel,treeLovNodeNameBen,valueJSON,columns,attribute);        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.DocumentExecutionUtils.getChildrenForTreeLov.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private static JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,Integer treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  String treeLovNodeNameBen=\"\";  try {    if (treeLovNodeValue != null && treeLovNodeValue.equalsIgnoreCase(\"lovroot\")) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(0).getSecond();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();      treeLovNodeNameBen=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getSecond();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        addNode=getChildrenForTreeLov_extraction_1(treeLovNodeValue,addNode,treeLovParentNodeName,attribute);        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"value\",attribute.getValue());          notNullNode=getChildrenForTreeLov_extraction_3(treeLovNodeLevel,treeLovNodeNameBen,valueJSON,columns,attribute);        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.DocumentExecutionUtils.getChildrenForTreeLov.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers": {
        "AbstractBIResourceRuntime": {
            "refreshParameter": {
                "original": {
                    "method_name": "refreshParameter",
                    "code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    Object o=jsonObject.opt(nameUrl);    if (o != null) {      if (o instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)o;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            values.add(anObject.toString());          }        }      } else       if (o.toString().startsWith(\"{;{}\")) {      } else {        String valToInsert=o.toString();        valToInsert=valToInsert.trim();        if (!valToInsert.isEmpty()) {          values.add(valToInsert);        }      }    }    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        StringTokenizer stk=new StringTokenizer((String)oDescr,\";\");        while (stk.hasMoreTokens()) {          descrs.add(stk.nextToken());        }      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.AbstractBIResourceRuntime.refreshParameter.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "refreshParameter",
                        "code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    Object o=jsonObject.opt(nameUrl);    if (o != null) {      if (o instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)o;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            values.add(anObject.toString());          }        }      } else       if (o.toString().startsWith(\"{;{}\")) {      } else {        String valToInsert=o.toString();        valToInsert=valToInsert.trim();        if (!valToInsert.isEmpty()) {          values.add(valToInsert);        }      }    }    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        refreshParameter_extraction_2(descrs,oDescr);      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.AbstractBIResourceRuntime.refreshParameter.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "refreshParameter",
                        "code": "private void refreshParameter(AbstractDriver biparam,JSONObject jsonObject,boolean transientMode){  logger.debug(\"IN\");  Assert.assertNotNull(biparam,\"Parameter in input is null!!\");  Assert.assertNotNull(jsonObject,\"JSONObject in input is null!!\");  String nameUrl=biparam.getParameterUrlName();  List values=new ArrayList();  List descrs=new ArrayList();  try {    refreshParameter_extraction_1(jsonObject,nameUrl,values);    Object oDescr=jsonObject.opt(nameUrl + \"_field_visible_description\");    if (oDescr != null) {      if (oDescr instanceof JSONArray) {        JSONArray jsonArray=(JSONArray)oDescr;        for (int c=0; c < jsonArray.length(); c++) {          Object anObject=jsonArray.get(c);          if (anObject != null) {            descrs.add(anObject.toString());          }        }      } else       if (oDescr instanceof Number) {        descrs.add(oDescr);      } else {        refreshParameter_extraction_2(descrs,oDescr);      }    }  } catch (  JSONException e) {    logger.error(\"Cannot get \" + nameUrl + \" values from JSON object\",e);    throw new SpagoBIServiceException(\"Cannot retrieve values for biparameter \" + biparam.getLabel(),e);  }  if (values.size() > 0) {    logger.debug(\"Updating values of biparameter \" + biparam.getLabel() + \" to \"+ values.toString());    biparam.setParameterValues(values);    biparam.setParameterValuesDescription(descrs);  } else {    logger.debug(\"Erasing values of biparameter \" + biparam.getLabel());    biparam.setParameterValues(null);    biparam.setParameterValuesDescription(null);  }  biparam.setTransientParmeters(transientMode);  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.AbstractBIResourceRuntime.refreshParameter.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "DocumentRuntime": {
            "getExecutionUrl": {
                "original": {
                    "method_name": "getExecutionUrl",
                    "code": "public String getExecutionUrl(BIObject obj,String executionModality,String role){  logger.debug(\"IN\");  Monitor getExecutionUrlMonitor=MonitorFactory.start(\"Knowage.DocumentRuntime.getExecutionUrl\");  String url=null;  Engine engine=obj.getEngine();  Domain engineType;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());  } catch (  EMFUserError e) {    throw new SpagoBIServiceException(\"Impossible to load engine type domain\",e);  }  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    String driverClassName=engine.getDriverName();    IEngineDriver aEngineDriver=null;    try {      aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();    } catch (    Exception e) {      throw new SpagoBIServiceException(\"Cannot istantiate engine driver class: \" + driverClassName,e);    }    Map mapPars=aEngineDriver.getParameterMap(obj,this.getUserProfile(),role);    addSystemParametersForExternalEngines(mapPars,this.getLocale(),obj,executionModality,role);    url=GeneralUtilities.getUrl(engine.getUrl(),mapPars);  } else {    StringBuffer buffer=new StringBuffer();    buffer.append(GeneralUtilities.getSpagoBIProfileBaseUrl(((UserProfile)this.getUserProfile()).getUserId().toString()));    buffer.append(\"&PAGE=ExecuteBIObjectPage\");    buffer.append(\"&\" + SpagoBIConstants.TITLE_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + SpagoBIConstants.TOOLBAR_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + ObjectsTreeConstants.OBJECT_LABEL + \"=\"+ obj.getLabel());    buffer.append(\"&\" + SpagoBIConstants.ROLE + \"=\"+ role);    buffer.append(\"&\" + SpagoBIConstants.RUN_ANYWAY + \"=TRUE\");    buffer.append(\"&\" + SpagoBIConstants.IGNORE_SUBOBJECTS_VIEWPOINTS_SNAPSHOTS + \"=TRUE\");    String kpiClassName=KpiDriver.class.getCanonicalName();    if (engine.getClassName().equals(kpiClassName)) {      Integer auditId=createAuditId(obj,executionModality,role);      if (auditId != null) {        buffer.append(\"&\" + AuditManager.AUDIT_ID + \"=\"+ auditId);      }    }    UUIDGenerator uuidGen=UUIDGenerator.getInstance();    UUID uuid=uuidGen.generateRandomBasedUUID();    buffer.append(\"&\" + LightNavigationConstants.LIGHT_NAVIGATOR_ID + \"=\"+ uuid.toString());    List parameters=obj.getDrivers();    if (parameters != null && parameters.size() > 0) {      Iterator it=parameters.iterator();      while (it.hasNext()) {        BIObjectParameter aParameter=(BIObjectParameter)it.next();        List list=aParameter.getParameterValues();        if (list != null && !list.isEmpty()) {          Iterator r=list.iterator();          while (r.hasNext()) {            String value=(String)r.next();            if (value != null && !value.equals(\"\")) {              try {                value=URLEncoder.encode(value,\"UTF-8\");              } catch (              UnsupportedEncodingException e) {                logger.warn(\"UTF-8 encoding is not supported!!!\",e);                logger.warn(\"Using system encoding...\");                value=URLEncoder.encode(value);              }              buffer.append(\"&\" + aParameter.getParameterUrlName() + \"=\"+ value);            }          }        }      }    }    url=buffer.toString();  }  logger.debug(\"OUT: returning url = [\" + url + \"]\");  getExecutionUrlMonitor.stop();  return url;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.DocumentRuntime.getExecutionUrl.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getExecutionUrl",
                        "code": "public String getExecutionUrl(BIObject obj,String executionModality,String role){  logger.debug(\"IN\");  Monitor getExecutionUrlMonitor=MonitorFactory.start(\"Knowage.DocumentRuntime.getExecutionUrl\");  String url=null;  Engine engine=obj.getEngine();  Domain engineType;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());  } catch (  EMFUserError e) {    throw new SpagoBIServiceException(\"Impossible to load engine type domain\",e);  }  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    String driverClassName=engine.getDriverName();    IEngineDriver aEngineDriver=null;    try {      aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();    } catch (    Exception e) {      throw new SpagoBIServiceException(\"Cannot istantiate engine driver class: \" + driverClassName,e);    }    Map mapPars=aEngineDriver.getParameterMap(obj,this.getUserProfile(),role);    addSystemParametersForExternalEngines(mapPars,this.getLocale(),obj,executionModality,role);    url=GeneralUtilities.getUrl(engine.getUrl(),mapPars);  } else {    StringBuffer buffer=new StringBuffer();    buffer.append(GeneralUtilities.getSpagoBIProfileBaseUrl(((UserProfile)this.getUserProfile()).getUserId().toString()));    buffer.append(\"&PAGE=ExecuteBIObjectPage\");    buffer.append(\"&\" + SpagoBIConstants.TITLE_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + SpagoBIConstants.TOOLBAR_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + ObjectsTreeConstants.OBJECT_LABEL + \"=\"+ obj.getLabel());    buffer.append(\"&\" + SpagoBIConstants.ROLE + \"=\"+ role);    buffer.append(\"&\" + SpagoBIConstants.RUN_ANYWAY + \"=TRUE\");    buffer.append(\"&\" + SpagoBIConstants.IGNORE_SUBOBJECTS_VIEWPOINTS_SNAPSHOTS + \"=TRUE\");    String kpiClassName=KpiDriver.class.getCanonicalName();    if (engine.getClassName().equals(kpiClassName)) {      Integer auditId=createAuditId(obj,executionModality,role);      if (auditId != null) {        buffer.append(\"&\" + AuditManager.AUDIT_ID + \"=\"+ auditId);      }    }    UUIDGenerator uuidGen=UUIDGenerator.getInstance();    UUID uuid=uuidGen.generateRandomBasedUUID();    buffer.append(\"&\" + LightNavigationConstants.LIGHT_NAVIGATOR_ID + \"=\"+ uuid.toString());    List parameters=obj.getDrivers();    if (parameters != null && parameters.size() > 0) {      Iterator it=parameters.iterator();      while (it.hasNext()) {        BIObjectParameter aParameter=(BIObjectParameter)it.next();        List list=aParameter.getParameterValues();        getExecutionUrl_extraction_2(buffer,aParameter,list);      }    }    url=buffer.toString();  }  logger.debug(\"OUT: returning url = [\" + url + \"]\");  getExecutionUrlMonitor.stop();  return url;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.DocumentRuntime.getExecutionUrl.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getExecutionUrl",
                        "code": "public String getExecutionUrl(BIObject obj,String executionModality,String role){  logger.debug(\"IN\");  Monitor getExecutionUrlMonitor=MonitorFactory.start(\"Knowage.DocumentRuntime.getExecutionUrl\");  String url=null;  Engine engine=obj.getEngine();  Domain engineType;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());  } catch (  EMFUserError e) {    throw new SpagoBIServiceException(\"Impossible to load engine type domain\",e);  }  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    String driverClassName=engine.getDriverName();    IEngineDriver aEngineDriver=null;    try {      aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();    } catch (    Exception e) {      throw new SpagoBIServiceException(\"Cannot istantiate engine driver class: \" + driverClassName,e);    }    Map mapPars=aEngineDriver.getParameterMap(obj,this.getUserProfile(),role);    addSystemParametersForExternalEngines(mapPars,this.getLocale(),obj,executionModality,role);    url=GeneralUtilities.getUrl(engine.getUrl(),mapPars);  } else {    StringBuffer buffer=new StringBuffer();    buffer.append(GeneralUtilities.getSpagoBIProfileBaseUrl(((UserProfile)this.getUserProfile()).getUserId().toString()));    buffer.append(\"&PAGE=ExecuteBIObjectPage\");    buffer.append(\"&\" + SpagoBIConstants.TITLE_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + SpagoBIConstants.TOOLBAR_VISIBLE + \"=FALSE\");    UUID uuid=getExecutionUrl_extraction_1(obj,executionModality,role,engine,buffer);    buffer.append(\"&\" + LightNavigationConstants.LIGHT_NAVIGATOR_ID + \"=\"+ uuid.toString());    List parameters=obj.getDrivers();    if (parameters != null && parameters.size() > 0) {      Iterator it=parameters.iterator();      while (it.hasNext()) {        BIObjectParameter aParameter=(BIObjectParameter)it.next();        List list=aParameter.getParameterValues();        getExecutionUrl_extraction_2(buffer,aParameter,list);      }    }    url=buffer.toString();  }  logger.debug(\"OUT: returning url = [\" + url + \"]\");  getExecutionUrlMonitor.stop();  return url;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.DocumentRuntime.getExecutionUrl.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "ExecutionInstance": {
            "applyViewpoint": {
                "original": {
                    "method_name": "applyViewpoint",
                    "code": "public void applyViewpoint(String userProvidedParametersStr,boolean transientMode){  logger.debug(\"IN\");  if (userProvidedParametersStr != null) {    List biparameters=object.getDrivers();    if (biparameters == null) {      logger.error(\"BIParameters list cannot be null!!!\");      return;    }    userProvidedParametersStr=JavaScript.unescape(userProvidedParametersStr);    String[] userProvidedParameters=userProvidedParametersStr.split(\"&\");    for (int i=0; i < userProvidedParameters.length; i++) {      String[] chunks=userProvidedParameters[i].split(\"=\");      if (chunks == null || chunks.length > 2) {        logger.warn(\"User provided parameter [\" + userProvidedParameters[i] + \"] cannot be splitted in \"+ \"[parameter url name=parameter value] by '=' characters.\");        continue;      }      String parUrlName=chunks[0];      if (parUrlName == null || parUrlName.trim().equals(\"\"))       continue;      BIObjectParameter biparameter=null;      Iterator it=biparameters.iterator();      while (it.hasNext()) {        BIObjectParameter temp=(BIObjectParameter)it.next();        if (temp.getParameterUrlName().equals(parUrlName)) {          biparameter=temp;          break;        }      }      if (biparameter == null) {        logger.warn(\"No BIObjectParameter with url name = ['\" + parUrlName + \"'] was found.\");        continue;      }      String parValue=\"\";      if (chunks.length == 2) {        parValue=chunks[1];      }      if (parValue != null && parValue.equalsIgnoreCase(\"NULL\")) {        biparameter.setParameterValues(null);      } else {        List parameterValues=new ArrayList();        String[] values=parValue.split(\";\");        for (int m=0; m < values.length; m++) {          parameterValues.add(values[m]);        }        biparameter.setParameterValues(parameterValues);      }      biparameter.setTransientParmeters(transientMode);    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.applyViewpoint.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "applyViewpoint",
                        "code": "public void applyViewpoint(String userProvidedParametersStr,boolean transientMode){  logger.debug(\"IN\");  if (userProvidedParametersStr != null) {    List biparameters=object.getDrivers();    if (biparameters == null) {      logger.error(\"BIParameters list cannot be null!!!\");      return;    }    userProvidedParametersStr=JavaScript.unescape(userProvidedParametersStr);    String[] userProvidedParameters=userProvidedParametersStr.split(\"&\");    for (int i=0; i < userProvidedParameters.length; i++) {      String[] chunks=userProvidedParameters[i].split(\"=\");      if (chunks == null || chunks.length > 2) {        logger.warn(\"User provided parameter [\" + userProvidedParameters[i] + \"] cannot be splitted in \"+ \"[parameter url name=parameter value] by '=' characters.\");        continue;      }      String parUrlName=chunks[0];      if (parUrlName == null || parUrlName.trim().equals(\"\"))       continue;      BIObjectParameter biparameter=null;      Iterator it=biparameters.iterator();      while (it.hasNext()) {        BIObjectParameter temp=(BIObjectParameter)it.next();        if (temp.getParameterUrlName().equals(parUrlName)) {          biparameter=temp;          break;        }      }      String parValue=applyViewpoint_extraction_2(transientMode,chunks,parUrlName,biparameter);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.applyViewpoint.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "applyViewpoint",
                        "code": "public void applyViewpoint(String userProvidedParametersStr,boolean transientMode){  logger.debug(\"IN\");  if (userProvidedParametersStr != null) {    List biparameters=object.getDrivers();    if (biparameters == null) {      logger.error(\"BIParameters list cannot be null!!!\");      return;    }    userProvidedParametersStr=JavaScript.unescape(userProvidedParametersStr);    String[] userProvidedParameters=userProvidedParametersStr.split(\"&\");    for (int i=0; i < userProvidedParameters.length; i++) {      String[] chunks=userProvidedParameters[i].split(\"=\");      if (chunks == null || chunks.length > 2) {        logger.warn(\"User provided parameter [\" + userProvidedParameters[i] + \"] cannot be splitted in \"+ \"[parameter url name=parameter value] by '=' characters.\");        continue;      }      String parUrlName=chunks[0];      if (parUrlName == null || parUrlName.trim().equals(\"\"))       continue;      BIObjectParameter biparameter=null;      Iterator it=biparameters.iterator();      biparameter=applyViewpoint_extraction_1(parUrlName,biparameter,it);      String parValue=applyViewpoint_extraction_2(transientMode,chunks,parUrlName,biparameter);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.applyViewpoint.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "getExecutionUrl": {
                "original": {
                    "method_name": "getExecutionUrl",
                    "code": "public String getExecutionUrl(Locale locale){  logger.debug(\"IN\");  String url=null;  Engine engine=this.getBIObject().getEngine();  Domain engineType;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());  } catch (  EMFUserError e) {    throw new SpagoBIServiceException(\"Impossible to load engine type domain\",e);  }  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    String driverClassName=engine.getDriverName();    IEngineDriver aEngineDriver=null;    try {      aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();    } catch (    Exception e) {      throw new SpagoBIServiceException(\"Cannot istantiate engine driver class: \" + driverClassName,e);    }    Map mapPars=aEngineDriver.getParameterMap(object,userProfile,executionRole);    addSystemParametersForExternalEngines(mapPars,locale);    url=GeneralUtilities.getUrl(engine.getUrl(),mapPars);  } else {    StringBuffer buffer=new StringBuffer();    buffer.append(GeneralUtilities.getSpagoBIProfileBaseUrl(((UserProfile)userProfile).getUserId().toString()));    buffer.append(\"&PAGE=ExecuteBIObjectPage\");    buffer.append(\"&\" + SpagoBIConstants.TITLE_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + SpagoBIConstants.TOOLBAR_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + ObjectsTreeConstants.OBJECT_LABEL + \"=\"+ object.getLabel());    buffer.append(\"&\" + SpagoBIConstants.ROLE + \"=\"+ executionRole);    buffer.append(\"&\" + SpagoBIConstants.RUN_ANYWAY + \"=TRUE\");    buffer.append(\"&\" + SpagoBIConstants.IGNORE_SUBOBJECTS_VIEWPOINTS_SNAPSHOTS + \"=TRUE\");    buffer.append(\"&SBI_EXECUTION_ID=\" + this.executionId);    String kpiClassName=KpiDriver.class.getCanonicalName();    if (engine.getClassName().equals(kpiClassName)) {      Integer auditId=createAuditId();      if (auditId != null) {        buffer.append(\"&\" + AuditManager.AUDIT_ID + \"=\"+ auditId);      }    }    UUIDGenerator uuidGen=UUIDGenerator.getInstance();    UUID uuid=uuidGen.generateRandomBasedUUID();    buffer.append(\"&\" + LightNavigationConstants.LIGHT_NAVIGATOR_ID + \"=\"+ uuid.toString());    List parameters=object.getDrivers();    if (parameters != null && parameters.size() > 0) {      Iterator it=parameters.iterator();      while (it.hasNext()) {        BIObjectParameter aParameter=(BIObjectParameter)it.next();        List list=aParameter.getParameterValues();        if (list != null && !list.isEmpty()) {          Iterator r=list.iterator();          while (r.hasNext()) {            String value=(String)r.next();            if (value != null && !value.equals(\"\")) {              try {                value=URLEncoder.encode(value,\"UTF-8\");              } catch (              UnsupportedEncodingException e) {                logger.warn(\"UTF-8 encoding is not supported!!!\",e);                logger.warn(\"Using system encoding...\");                value=URLEncoder.encode(value);              }              buffer.append(\"&\" + aParameter.getParameterUrlName() + \"=\"+ value);            }          }        }      }    }    url=buffer.toString();  }  logger.debug(\"OUT: returning url = [\" + url + \"]\");  return url;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.getExecutionUrl.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getExecutionUrl",
                        "code": "public String getExecutionUrl(Locale locale){  logger.debug(\"IN\");  String url=null;  Engine engine=this.getBIObject().getEngine();  Domain engineType;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());  } catch (  EMFUserError e) {    throw new SpagoBIServiceException(\"Impossible to load engine type domain\",e);  }  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    String driverClassName=engine.getDriverName();    IEngineDriver aEngineDriver=null;    try {      aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();    } catch (    Exception e) {      throw new SpagoBIServiceException(\"Cannot istantiate engine driver class: \" + driverClassName,e);    }    Map mapPars=aEngineDriver.getParameterMap(object,userProfile,executionRole);    addSystemParametersForExternalEngines(mapPars,locale);    url=GeneralUtilities.getUrl(engine.getUrl(),mapPars);  } else {    StringBuffer buffer=new StringBuffer();    buffer.append(GeneralUtilities.getSpagoBIProfileBaseUrl(((UserProfile)userProfile).getUserId().toString()));    buffer.append(\"&PAGE=ExecuteBIObjectPage\");    buffer.append(\"&\" + SpagoBIConstants.TITLE_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + SpagoBIConstants.TOOLBAR_VISIBLE + \"=FALSE\");    buffer.append(\"&\" + ObjectsTreeConstants.OBJECT_LABEL + \"=\"+ object.getLabel());    buffer.append(\"&\" + SpagoBIConstants.ROLE + \"=\"+ executionRole);    buffer.append(\"&\" + SpagoBIConstants.RUN_ANYWAY + \"=TRUE\");    buffer.append(\"&\" + SpagoBIConstants.IGNORE_SUBOBJECTS_VIEWPOINTS_SNAPSHOTS + \"=TRUE\");    buffer.append(\"&SBI_EXECUTION_ID=\" + this.executionId);    String kpiClassName=KpiDriver.class.getCanonicalName();    if (engine.getClassName().equals(kpiClassName)) {      Integer auditId=createAuditId();      if (auditId != null) {        buffer.append(\"&\" + AuditManager.AUDIT_ID + \"=\"+ auditId);      }    }    UUIDGenerator uuidGen=UUIDGenerator.getInstance();    UUID uuid=uuidGen.generateRandomBasedUUID();    buffer.append(\"&\" + LightNavigationConstants.LIGHT_NAVIGATOR_ID + \"=\"+ uuid.toString());    List parameters=object.getDrivers();    if (parameters != null && parameters.size() > 0) {      Iterator it=parameters.iterator();      while (it.hasNext()) {        getExecutionUrl_extraction_2(buffer,it);      }    }    url=buffer.toString();  }  logger.debug(\"OUT: returning url = [\" + url + \"]\");  return url;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.getExecutionUrl.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getExecutionUrl",
                        "code": "public String getExecutionUrl(Locale locale){  logger.debug(\"IN\");  String url=null;  Engine engine=this.getBIObject().getEngine();  Domain engineType;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());  } catch (  EMFUserError e) {    throw new SpagoBIServiceException(\"Impossible to load engine type domain\",e);  }  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    String driverClassName=engine.getDriverName();    IEngineDriver aEngineDriver=null;    try {      aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();    } catch (    Exception e) {      throw new SpagoBIServiceException(\"Cannot istantiate engine driver class: \" + driverClassName,e);    }    Map mapPars=aEngineDriver.getParameterMap(object,userProfile,executionRole);    addSystemParametersForExternalEngines(mapPars,locale);    url=GeneralUtilities.getUrl(engine.getUrl(),mapPars);  } else {    StringBuffer buffer=new StringBuffer();    buffer.append(GeneralUtilities.getSpagoBIProfileBaseUrl(((UserProfile)userProfile).getUserId().toString()));    buffer.append(\"&PAGE=ExecuteBIObjectPage\");    getExecutionUrl_extraction_1(engine,buffer);    UUIDGenerator uuidGen=UUIDGenerator.getInstance();    UUID uuid=uuidGen.generateRandomBasedUUID();    buffer.append(\"&\" + LightNavigationConstants.LIGHT_NAVIGATOR_ID + \"=\"+ uuid.toString());    List parameters=object.getDrivers();    if (parameters != null && parameters.size() > 0) {      Iterator it=parameters.iterator();      while (it.hasNext()) {        getExecutionUrl_extraction_2(buffer,it);      }    }    url=buffer.toString();  }  logger.debug(\"OUT: returning url = [\" + url + \"]\");  return url;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.getExecutionUrl.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "setParameterValues": {
                "original": {
                    "method_name": "setParameterValues",
                    "code": "public void setParameterValues(String userProvidedParametersStr,boolean transientMode){  logger.debug(\"IN\");  if (userProvidedParametersStr != null) {    ParameterValuesDecoder decoder=new ParameterValuesDecoder();    List biparameters=object.getDrivers();    if (biparameters == null) {      logger.error(\"BIParameters list cannot be null!!!\");      return;    }    userProvidedParametersStr=JavaScript.unescape(userProvidedParametersStr);    String[] userProvidedParameters=userProvidedParametersStr.split(\"&\");    for (int i=0; i < userProvidedParameters.length; i++) {      String[] chunks=userProvidedParameters[i].split(\"=\");      if (chunks == null || chunks.length > 2) {        logger.warn(\"User provided parameter [\" + userProvidedParameters[i] + \"] cannot be splitted in \"+ \"[parameter url name=parameter value] by '=' characters.\");        continue;      }      String parUrlName=chunks[0];      if (parUrlName == null || parUrlName.trim().equals(\"\"))       continue;      BIObjectParameter biparameter=null;      Iterator it=biparameters.iterator();      while (it.hasNext()) {        BIObjectParameter temp=(BIObjectParameter)it.next();        if (temp.getParameterUrlName().equals(parUrlName)) {          biparameter=temp;          break;        }      }      if (biparameter == null) {        logger.warn(\"No BIObjectParameter with url name = ['\" + parUrlName + \"'] was found.\");        continue;      }      String parValue=\"\";      if (chunks.length == 2) {        parValue=chunks[1];      }      if (parValue != null && parValue.equalsIgnoreCase(\"NULL\")) {        biparameter.setParameterValues(null);      } else {        List parameterValues=decoder.decode(parValue);        biparameter.setParameterValues(parameterValues);      }      biparameter.setTransientParmeters(transientMode);    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.setParameterValues.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "setParameterValues",
                        "code": "public void setParameterValues(String userProvidedParametersStr,boolean transientMode){  logger.debug(\"IN\");  if (userProvidedParametersStr != null) {    ParameterValuesDecoder decoder=new ParameterValuesDecoder();    List biparameters=object.getDrivers();    if (biparameters == null) {      logger.error(\"BIParameters list cannot be null!!!\");      return;    }    userProvidedParametersStr=JavaScript.unescape(userProvidedParametersStr);    String[] userProvidedParameters=userProvidedParametersStr.split(\"&\");    for (int i=0; i < userProvidedParameters.length; i++) {      String[] chunks=userProvidedParameters[i].split(\"=\");      if (chunks == null || chunks.length > 2) {        logger.warn(\"User provided parameter [\" + userProvidedParameters[i] + \"] cannot be splitted in \"+ \"[parameter url name=parameter value] by '=' characters.\");        continue;      }      String parUrlName=chunks[0];      if (parUrlName == null || parUrlName.trim().equals(\"\"))       continue;      BIObjectParameter biparameter=null;      Iterator it=biparameters.iterator();      while (it.hasNext()) {        BIObjectParameter temp=(BIObjectParameter)it.next();        if (temp.getParameterUrlName().equals(parUrlName)) {          biparameter=temp;          break;        }      }      String parValue=setParameterValues_extraction_2(transientMode,decoder,chunks,parUrlName,biparameter);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.setParameterValues.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "setParameterValues",
                        "code": "public void setParameterValues(String userProvidedParametersStr,boolean transientMode){  logger.debug(\"IN\");  if (userProvidedParametersStr != null) {    ParameterValuesDecoder decoder=new ParameterValuesDecoder();    List biparameters=object.getDrivers();    if (biparameters == null) {      logger.error(\"BIParameters list cannot be null!!!\");      return;    }    userProvidedParametersStr=JavaScript.unescape(userProvidedParametersStr);    String[] userProvidedParameters=userProvidedParametersStr.split(\"&\");    for (int i=0; i < userProvidedParameters.length; i++) {      String[] chunks=userProvidedParameters[i].split(\"=\");      if (chunks == null || chunks.length > 2) {        logger.warn(\"User provided parameter [\" + userProvidedParameters[i] + \"] cannot be splitted in \"+ \"[parameter url name=parameter value] by '=' characters.\");        continue;      }      String parUrlName=chunks[0];      if (parUrlName == null || parUrlName.trim().equals(\"\"))       continue;      BIObjectParameter biparameter=null;      Iterator it=biparameters.iterator();      biparameter=setParameterValues_extraction_1(parUrlName,biparameter,it);      String parValue=setParameterValues_extraction_2(transientMode,decoder,chunks,parUrlName,biparameter);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.handlers.ExecutionInstance.setParameterValues.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service": {
        "ExecuteBIObjectModule": {
            "execute": {
                "original": {
                    "method_name": "execute",
                    "code": "/**  * Based on the object type launches the right execution mechanism. For objects executed by an external engine instantiates the driver for execution, gets the execution call parameters map, adds in reponse the map of the parameters. For objects executed by an internal engine, instantiates the engine class and launches execution method. * @param instance The execution instance * @param subObj The SubObjectDetail subObject to be executed (in case it is not null) * @param response The response Source Bean */private void execute(ExecutionInstance instance,SubObject subObj,String[] vpParameters,SourceBean response){  logger.debug(\"IN\");  EMFErrorHandler errorHandler=getErrorHandler();  BIObject obj=instance.getBIObject();  Engine engine=obj.getEngine();  Domain engineType=null;  Domain compatibleBiobjType=null;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());    compatibleBiobjType=DAOFactory.getDomainDAO().loadDomainById(engine.getBiobjTypeId());  } catch (  EMFUserError error) {    logger.error(\"Error retrieving document's engine information\",error);    errorHandler.addError(error);    return;  }  String compatibleBiobjTypeCd=compatibleBiobjType.getValueCd();  String biobjTypeCd=obj.getBiObjectTypeCode();  if (!compatibleBiobjTypeCd.equalsIgnoreCase(biobjTypeCd)) {    logger.warn(\"Engine cannot execute input document type: \" + \"the engine \" + engine.getName() + \" can execute '\"+ compatibleBiobjTypeCd+ \"' type documents \"+ \"while the input document is a '\"+ biobjTypeCd+ \"'.\");    Vector params=new Vector();    params.add(engine.getName());    params.add(compatibleBiobjTypeCd);    params.add(biobjTypeCd);    errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,2002,params));    return;  }  IEngUserProfile profile=getUserProfile();  if (!canExecute(profile,obj))   return;  String executionRole=instance.getExecutionRole();  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    try {      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageExecution\");      String driverClassName=obj.getEngine().getDriverName();      IEngineDriver aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();      Map mapPars=null;      if (subObj != null)       mapPars=aEngineDriver.getParameterMap(obj,subObj,profile,executionRole); else       mapPars=aEngineDriver.getParameterMap(obj,profile,executionRole);      if (vpParameters != null) {        for (int i=0; i < vpParameters.length; i++) {          String param=vpParameters[i];          String name=param.substring(0,param.indexOf(\"=\"));          String value=param.substring(param.indexOf(\"=\") + 1);          if (mapPars.get(name) != null) {            mapPars.remove(name);            mapPars.put(name,value);          } else           mapPars.put(name,value);        }      }      if (contextManager.get(\"docConfig\") != null)       mapPars.put(\"docConfig\",contextManager.get(\"docConfig\"));      response.setAttribute(ObjectsTreeConstants.REPORT_CALL_URL,mapPars);      if (subObj != null) {        response.setAttribute(SpagoBIConstants.SUBOBJECT,subObj);      }    } catch (    Exception e) {      logger.error(\"Error During object execution\",e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));    }  } else {    String className=engine.getClassName();    logger.debug(\"Try instantiating class \" + className + \" for internal engine \"+ engine.getName()+ \"...\");    InternalEngineIFace internalEngine=null;    try {      if (className == null && className.trim().equals(\"\"))       throw new ClassNotFoundException();      internalEngine=(InternalEngineIFace)Class.forName(className).newInstance();    } catch (    ClassNotFoundException cnfe) {      logger.error(\"The class ['\" + className + \"'] for internal engine \"+ engine.getName()+ \" was not found.\",cnfe);      Vector params=new Vector();      params.add(className);      params.add(engine.getName());      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,2001,params));      return;    }catch (    Exception e) {      logger.error(\"Error while instantiating class \" + className,e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));      return;    }    logger.debug(\"Class \" + className + \" instantiated successfully. Now engine's execution starts.\");    try {      if (subObj != null)       internalEngine.executeSubObject(this.getRequestContainer(),obj,response,subObj); else       internalEngine.execute(this.getRequestContainer(),obj,response);    } catch (    EMFUserError e) {      logger.error(\"Error while engine execution\",e);      errorHandler.addError(e);    }catch (    Exception e) {      logger.error(\"Error while engine execution\",e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.execute.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "execute",
                        "code": "/**  * Based on the object type launches the right execution mechanism. For objects executed by an external engine instantiates the driver for execution, gets the execution call parameters map, adds in reponse the map of the parameters. For objects executed by an internal engine, instantiates the engine class and launches execution method. * @param instance The execution instance * @param subObj The SubObjectDetail subObject to be executed (in case it is not null) * @param response The response Source Bean */private void execute(ExecutionInstance instance,SubObject subObj,String[] vpParameters,SourceBean response){  logger.debug(\"IN\");  EMFErrorHandler errorHandler=getErrorHandler();  BIObject obj=instance.getBIObject();  Engine engine=obj.getEngine();  Domain engineType=null;  Domain compatibleBiobjType=null;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());    compatibleBiobjType=DAOFactory.getDomainDAO().loadDomainById(engine.getBiobjTypeId());  } catch (  EMFUserError error) {    logger.error(\"Error retrieving document's engine information\",error);    errorHandler.addError(error);    return;  }  String compatibleBiobjTypeCd=compatibleBiobjType.getValueCd();  String biobjTypeCd=obj.getBiObjectTypeCode();  if (!compatibleBiobjTypeCd.equalsIgnoreCase(biobjTypeCd)) {    logger.warn(\"Engine cannot execute input document type: \" + \"the engine \" + engine.getName() + \" can execute '\"+ compatibleBiobjTypeCd+ \"' type documents \"+ \"while the input document is a '\"+ biobjTypeCd+ \"'.\");    Vector params=new Vector();    params.add(engine.getName());    params.add(compatibleBiobjTypeCd);    params.add(biobjTypeCd);    errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,2002,params));    return;  }  IEngUserProfile profile=getUserProfile();  if (!canExecute(profile,obj))   return;  String executionRole=instance.getExecutionRole();  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    try {      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageExecution\");      String driverClassName=obj.getEngine().getDriverName();      IEngineDriver aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();      Map mapPars=null;      if (subObj != null)       mapPars=aEngineDriver.getParameterMap(obj,subObj,profile,executionRole); else       mapPars=aEngineDriver.getParameterMap(obj,profile,executionRole);      if (vpParameters != null) {        for (int i=0; i < vpParameters.length; i++) {          String param=vpParameters[i];          String name=param.substring(0,param.indexOf(\"=\"));          String value=param.substring(param.indexOf(\"=\") + 1);          if (mapPars.get(name) != null) {            mapPars.remove(name);            mapPars.put(name,value);          } else           mapPars.put(name,value);        }      }      if (contextManager.get(\"docConfig\") != null)       mapPars.put(\"docConfig\",contextManager.get(\"docConfig\"));      response.setAttribute(ObjectsTreeConstants.REPORT_CALL_URL,mapPars);      if (subObj != null) {        response.setAttribute(SpagoBIConstants.SUBOBJECT,subObj);      }    } catch (    Exception e) {      logger.error(\"Error During object execution\",e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));    }  } else {    String className=engine.getClassName();    logger.debug(\"Try instantiating class \" + className + \" for internal engine \"+ engine.getName()+ \"...\");    InternalEngineIFace internalEngine=null;    try {      if (className == null && className.trim().equals(\"\"))       throw new ClassNotFoundException();      internalEngine=(InternalEngineIFace)Class.forName(className).newInstance();    } catch (    ClassNotFoundException cnfe) {      logger.error(\"The class ['\" + className + \"'] for internal engine \"+ engine.getName()+ \" was not found.\",cnfe);      Vector params=new Vector();      params.add(className);      params.add(engine.getName());      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,2001,params));      return;    }catch (    Exception e) {      logger.error(\"Error while instantiating class \" + className,e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));      return;    }    logger.debug(\"Class \" + className + \" instantiated successfully. Now engine's execution starts.\");    execute_extraction_2(subObj,response,errorHandler,obj,internalEngine);  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.execute.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "execute",
                        "code": "/**  * Based on the object type launches the right execution mechanism. For objects executed by an external engine instantiates the driver for execution, gets the execution call parameters map, adds in reponse the map of the parameters. For objects executed by an internal engine, instantiates the engine class and launches execution method. * @param instance The execution instance * @param subObj The SubObjectDetail subObject to be executed (in case it is not null) * @param response The response Source Bean */private void execute(ExecutionInstance instance,SubObject subObj,String[] vpParameters,SourceBean response){  logger.debug(\"IN\");  EMFErrorHandler errorHandler=getErrorHandler();  BIObject obj=instance.getBIObject();  Engine engine=obj.getEngine();  Domain engineType=null;  Domain compatibleBiobjType=null;  try {    engineType=DAOFactory.getDomainDAO().loadDomainById(engine.getEngineTypeId());    compatibleBiobjType=DAOFactory.getDomainDAO().loadDomainById(engine.getBiobjTypeId());  } catch (  EMFUserError error) {    logger.error(\"Error retrieving document's engine information\",error);    errorHandler.addError(error);    return;  }  String compatibleBiobjTypeCd=compatibleBiobjType.getValueCd();  String biobjTypeCd=obj.getBiObjectTypeCode();  if (!compatibleBiobjTypeCd.equalsIgnoreCase(biobjTypeCd)) {    logger.warn(\"Engine cannot execute input document type: \" + \"the engine \" + engine.getName() + \" can execute '\"+ compatibleBiobjTypeCd+ \"' type documents \"+ \"while the input document is a '\"+ biobjTypeCd+ \"'.\");    Vector params=new Vector();    params.add(engine.getName());    params.add(compatibleBiobjTypeCd);    params.add(biobjTypeCd);    errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,2002,params));    return;  }  IEngUserProfile profile=getUserProfile();  if (!canExecute(profile,obj))   return;  String executionRole=instance.getExecutionRole();  if (\"EXT\".equalsIgnoreCase(engineType.getValueCd())) {    try {      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageExecution\");      String driverClassName=obj.getEngine().getDriverName();      IEngineDriver aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();      Map mapPars=null;      execute_extraction_1(subObj,vpParameters,response,obj,profile,executionRole,aEngineDriver);    } catch (    Exception e) {      logger.error(\"Error During object execution\",e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));    }  } else {    String className=engine.getClassName();    logger.debug(\"Try instantiating class \" + className + \" for internal engine \"+ engine.getName()+ \"...\");    InternalEngineIFace internalEngine=null;    try {      if (className == null && className.trim().equals(\"\"))       throw new ClassNotFoundException();      internalEngine=(InternalEngineIFace)Class.forName(className).newInstance();    } catch (    ClassNotFoundException cnfe) {      logger.error(\"The class ['\" + className + \"'] for internal engine \"+ engine.getName()+ \" was not found.\",cnfe);      Vector params=new Vector();      params.add(className);      params.add(engine.getName());      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,2001,params));      return;    }catch (    Exception e) {      logger.error(\"Error while instantiating class \" + className,e);      errorHandler.addError(new EMFUserError(EMFErrorSeverity.ERROR,100));      return;    }    logger.debug(\"Class \" + className + \" instantiated successfully. Now engine's execution starts.\");    execute_extraction_2(subObj,response,errorHandler,obj,internalEngine);  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.execute.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "executionHandler": {
                "original": {
                    "method_name": "executionHandler",
                    "code": "/**  * Handles the final execution of the object * @param request The request SourceBean * @param response The response SourceBean */private void executionHandler(SourceBean request,SourceBean response) throws Exception {  logger.debug(\"IN\");  ExecutionInstance instance=getExecutionInstance();  instance.refreshParametersValues(request,false);  String pendingDelete=(String)request.getAttribute(\"PENDING_DELETE\");  HashMap paramsDescriptionMap=(HashMap)contextManager.get(\"PARAMS_DESCRIPTION_MAP\");  if (pendingDelete != null && !pendingDelete.trim().equals(\"\")) {    BIObject object=instance.getBIObject();    List biparams=object.getDrivers();    Iterator iterParams=biparams.iterator();    while (iterParams.hasNext()) {      BIObjectParameter biparam=(BIObjectParameter)iterParams.next();      if (paramsDescriptionMap.get(biparam.getParameterUrlName()) != null)       paramsDescriptionMap.put(biparam.getParameterUrlName(),\"\");    }    response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageParameter\");    return;  }  Object lookupObjParId=request.getAttribute(\"LOOKUP_OBJ_PAR_ID\");  if (isLookupCall(request)) {    BIObjectParameter lookupBIParameter=getLookedUpParameter(request);    if (lookupBIParameter == null) {      logger.error(\"The BIParameter with id = \" + getLookedUpParameterId(request).toString() + \" does not exist.\");      throw new EMFUserError(EMFErrorSeverity.ERROR,1041);    }    ModalitiesValue modVal=lookupBIParameter.getParameter().getModalityValue();    String lookupType=(String)request.getAttribute(\"LOOKUP_TYPE\");    if (lookupType == null)     lookupType=\"LIST\";    if (lookupType.equalsIgnoreCase(\"CHECK_LIST\")) {      response.setAttribute(\"CHECKLIST\",\"true\");      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ChecklistLookupPublisher\");    } else     if (lookupType.equalsIgnoreCase(\"LIST\")) {      response.setAttribute(\"LIST\",\"true\");      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"LookupPublisher\");    } else {      response.setAttribute(\"LIST\",\"true\");      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"LookupPublisher\");    }    response.setAttribute(\"mod_val_id\",modVal.getId().toString());    response.setAttribute(\"LOOKUP_PARAMETER_NAME\",lookupBIParameter.getParameterUrlName());    response.setAttribute(\"LOOKUP_PARAMETER_ID\",lookupBIParameter.getId().toString());    String correlatedParuseId=(String)request.getAttribute(\"correlatedParuseIdForObjParWithId_\" + lookupObjParId);    if (correlatedParuseId != null && !correlatedParuseId.equals(\"\"))     response.setAttribute(\"correlated_paruse_id\",correlatedParuseId);    return;  }  List errors=instance.getParametersErrors();  if (isRefreshCorrelationCall(request)) {    if (errors.size() > 0) {      Iterator errorsIt=errors.iterator();      while (errorsIt.hasNext()) {        EMFUserError error=(EMFUserError)errorsIt.next();        if (error instanceof EMFValidationError)         continue; else         errorHandler.addError(error);      }    }    response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageParameter\");    return;  }  Iterator errorsIt=errors.iterator();  while (errorsIt.hasNext()) {    errorHandler.addError((EMFUserError)errorsIt.next());  }  if (!errorHandler.isOKBySeverity(EMFErrorSeverity.ERROR)) {    response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageParameter\");    return;  }  execute(instance,null,null,response);  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.executionHandler.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "executionHandler",
                        "code": "/**  * Handles the final execution of the object * @param request The request SourceBean * @param response The response SourceBean */private void executionHandler(SourceBean request,SourceBean response) throws Exception {  logger.debug(\"IN\");  ExecutionInstance instance=getExecutionInstance();  instance.refreshParametersValues(request,false);  String pendingDelete=(String)request.getAttribute(\"PENDING_DELETE\");  HashMap paramsDescriptionMap=(HashMap)contextManager.get(\"PARAMS_DESCRIPTION_MAP\");  if (pendingDelete != null && !pendingDelete.trim().equals(\"\")) {    BIObject object=instance.getBIObject();    List biparams=object.getDrivers();    Iterator iterParams=biparams.iterator();    while (iterParams.hasNext()) {      BIObjectParameter biparam=(BIObjectParameter)iterParams.next();      if (paramsDescriptionMap.get(biparam.getParameterUrlName()) != null)       paramsDescriptionMap.put(biparam.getParameterUrlName(),\"\");    }    response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageParameter\");    return;  }  Object lookupObjParId=request.getAttribute(\"LOOKUP_OBJ_PAR_ID\");  if (isLookupCall(request)) {    BIObjectParameter lookupBIParameter=getLookedUpParameter(request);    if (lookupBIParameter == null) {      logger.error(\"The BIParameter with id = \" + getLookedUpParameterId(request).toString() + \" does not exist.\");      throw new EMFUserError(EMFErrorSeverity.ERROR,1041);    }    ModalitiesValue modVal=lookupBIParameter.getParameter().getModalityValue();    String lookupType=(String)request.getAttribute(\"LOOKUP_TYPE\");    if (lookupType == null)     lookupType=\"LIST\";    if (lookupType.equalsIgnoreCase(\"CHECK_LIST\")) {      response.setAttribute(\"CHECKLIST\",\"true\");      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ChecklistLookupPublisher\");    } else     if (lookupType.equalsIgnoreCase(\"LIST\")) {      response.setAttribute(\"LIST\",\"true\");      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"LookupPublisher\");    } else {      response.setAttribute(\"LIST\",\"true\");      response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"LookupPublisher\");    }    response.setAttribute(\"mod_val_id\",modVal.getId().toString());    response.setAttribute(\"LOOKUP_PARAMETER_NAME\",lookupBIParameter.getParameterUrlName());    response.setAttribute(\"LOOKUP_PARAMETER_ID\",lookupBIParameter.getId().toString());    String correlatedParuseId=(String)request.getAttribute(\"correlatedParuseIdForObjParWithId_\" + lookupObjParId);    if (correlatedParuseId != null && !correlatedParuseId.equals(\"\"))     response.setAttribute(\"correlated_paruse_id\",correlatedParuseId);    return;  }  List errors=instance.getParametersErrors();  executionHandler_extraction_2(request,response,instance,errors);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.executionHandler.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "executionHandler",
                        "code": "/**  * Handles the final execution of the object * @param request The request SourceBean * @param response The response SourceBean */private void executionHandler(SourceBean request,SourceBean response) throws Exception {  logger.debug(\"IN\");  ExecutionInstance instance=getExecutionInstance();  instance.refreshParametersValues(request,false);  String pendingDelete=(String)request.getAttribute(\"PENDING_DELETE\");  HashMap paramsDescriptionMap=(HashMap)contextManager.get(\"PARAMS_DESCRIPTION_MAP\");  if (pendingDelete != null && !pendingDelete.trim().equals(\"\")) {    BIObject object=instance.getBIObject();    List biparams=object.getDrivers();    Iterator iterParams=biparams.iterator();    while (iterParams.hasNext()) {      BIObjectParameter biparam=(BIObjectParameter)iterParams.next();      if (paramsDescriptionMap.get(biparam.getParameterUrlName()) != null)       paramsDescriptionMap.put(biparam.getParameterUrlName(),\"\");    }    response.setAttribute(SpagoBIConstants.PUBLISHER_NAME,\"ExecuteBIObjectPageParameter\");    return;  }  Object lookupObjParId=request.getAttribute(\"LOOKUP_OBJ_PAR_ID\");  if (isLookupCall(request)) {    BIObjectParameter lookupBIParameter=executionHandler_extraction_1(request,response);    response.setAttribute(\"LOOKUP_PARAMETER_NAME\",lookupBIParameter.getParameterUrlName());    response.setAttribute(\"LOOKUP_PARAMETER_ID\",lookupBIParameter.getId().toString());    String correlatedParuseId=(String)request.getAttribute(\"correlatedParuseIdForObjParWithId_\" + lookupObjParId);    if (correlatedParuseId != null && !correlatedParuseId.equals(\"\"))     response.setAttribute(\"correlated_paruse_id\",correlatedParuseId);    return;  }  List errors=instance.getParametersErrors();  executionHandler_extraction_2(request,response,instance,errors);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.executionHandler.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "getRequiredSubObject": {
                "original": {
                    "method_name": "getRequiredSubObject",
                    "code": "/**  * Find the subobject with the name specified by the attribute \"LABEL_SUB_OBJECT\" or \"SUBOBJECT_ID\" on request among the list of subobjects in input (that must be the current document's subobjects list); if those attributes are missing, null is returned. If such a subobject does not exist or the current user is not able to see that subobject, an error is added into the Error Handler and null is returned. * @param request The service request * @param subObjects The list of all existing subobjects for the current document * @return the required subobject */private SubObject getRequiredSubObject(SourceBean request,List subObjects){  logger.debug(\"IN\");  SubObject subObj=null;  String subObjectName=(String)request.getAttribute(SpagoBIConstants.SUBOBJECT_NAME);  String subObjectIdStr=(String)request.getAttribute(SpagoBIConstants.SUBOBJECT_ID);  if (subObjectName == null && subObjectIdStr == null) {    logger.debug(\"Neither LABEL_SUB_OBJECT nor SUBOBJECT_ID attribute in request are specified. Returning null.\");    return null;  }  if (subObjectName != null) {    logger.debug(\"Looking for subobject with name [\" + subObjectName + \"] ...\");    if (subObjects != null && subObjects.size() > 0) {      Iterator iterSubs=subObjects.iterator();      while (iterSubs.hasNext() && subObj == null) {        SubObject sd=(SubObject)iterSubs.next();        if (sd.getName().equals(subObjectName.trim())) {          subObj=sd;          break;        }      }    }  } else {    logger.debug(\"Looking for subobject with id [\" + subObjectIdStr + \"] ...\");    Integer subObjId=new Integer(subObjectIdStr);    if (subObjects != null && subObjects.size() > 0) {      Iterator iterSubs=subObjects.iterator();      while (iterSubs.hasNext() && subObj == null) {        SubObject sd=(SubObject)iterSubs.next();        if (sd.getId().equals(subObjId)) {          subObj=sd;          break;        }      }    }  }  if (subObj == null) {    logger.error(\"Subobject not found.\");    List l=new ArrayList();    l.add(subObjectName);    EMFUserError userError=new EMFUserError(EMFErrorSeverity.ERROR,1080,l);    errorHandler.addError(userError);  } else {    boolean canSeeSubobject=canSeeSubobject(getUserProfile(),subObj);    if (!canSeeSubobject) {      List l=new ArrayList();      l.add(subObj.getName());      EMFUserError userError=new EMFUserError(EMFErrorSeverity.ERROR,1079,l);      errorHandler.addError(userError);      subObj=null;    }  }  logger.debug(\"OUT\");  return subObj;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.getRequiredSubObject.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getRequiredSubObject",
                        "code": "/**  * Find the subobject with the name specified by the attribute \"LABEL_SUB_OBJECT\" or \"SUBOBJECT_ID\" on request among the list of subobjects in input (that must be the current document's subobjects list); if those attributes are missing, null is returned. If such a subobject does not exist or the current user is not able to see that subobject, an error is added into the Error Handler and null is returned. * @param request The service request * @param subObjects The list of all existing subobjects for the current document * @return the required subobject */private SubObject getRequiredSubObject(SourceBean request,List subObjects){  logger.debug(\"IN\");  SubObject subObj=null;  String subObjectName=(String)request.getAttribute(SpagoBIConstants.SUBOBJECT_NAME);  String subObjectIdStr=(String)request.getAttribute(SpagoBIConstants.SUBOBJECT_ID);  if (subObjectName == null && subObjectIdStr == null) {    logger.debug(\"Neither LABEL_SUB_OBJECT nor SUBOBJECT_ID attribute in request are specified. Returning null.\");    return null;  }  if (subObjectName != null) {    logger.debug(\"Looking for subobject with name [\" + subObjectName + \"] ...\");    if (subObjects != null && subObjects.size() > 0) {      Iterator iterSubs=subObjects.iterator();      while (iterSubs.hasNext() && subObj == null) {        SubObject sd=(SubObject)iterSubs.next();        if (sd.getName().equals(subObjectName.trim())) {          subObj=sd;          break;        }      }    }  } else {    logger.debug(\"Looking for subobject with id [\" + subObjectIdStr + \"] ...\");    Integer subObjId=new Integer(subObjectIdStr);    if (subObjects != null && subObjects.size() > 0) {      subObj=getRequiredSubObject_extraction_2(subObjects,subObj,subObjId);    }  }  if (subObj == null) {    logger.error(\"Subobject not found.\");    List l=new ArrayList();    l.add(subObjectName);    EMFUserError userError=new EMFUserError(EMFErrorSeverity.ERROR,1080,l);    errorHandler.addError(userError);  } else {    boolean canSeeSubobject=canSeeSubobject(getUserProfile(),subObj);    if (!canSeeSubobject) {      List l=new ArrayList();      l.add(subObj.getName());      EMFUserError userError=new EMFUserError(EMFErrorSeverity.ERROR,1079,l);      errorHandler.addError(userError);      subObj=null;    }  }  logger.debug(\"OUT\");  return subObj;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.getRequiredSubObject.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getRequiredSubObject",
                        "code": "/**  * Find the subobject with the name specified by the attribute \"LABEL_SUB_OBJECT\" or \"SUBOBJECT_ID\" on request among the list of subobjects in input (that must be the current document's subobjects list); if those attributes are missing, null is returned. If such a subobject does not exist or the current user is not able to see that subobject, an error is added into the Error Handler and null is returned. * @param request The service request * @param subObjects The list of all existing subobjects for the current document * @return the required subobject */private SubObject getRequiredSubObject(SourceBean request,List subObjects){  logger.debug(\"IN\");  SubObject subObj=null;  String subObjectName=(String)request.getAttribute(SpagoBIConstants.SUBOBJECT_NAME);  String subObjectIdStr=(String)request.getAttribute(SpagoBIConstants.SUBOBJECT_ID);  if (subObjectName == null && subObjectIdStr == null) {    logger.debug(\"Neither LABEL_SUB_OBJECT nor SUBOBJECT_ID attribute in request are specified. Returning null.\");    return null;  }  if (subObjectName != null) {    logger.debug(\"Looking for subobject with name [\" + subObjectName + \"] ...\");    if (subObjects != null && subObjects.size() > 0) {      subObj=getRequiredSubObject_extraction_1(subObjects,subObj,subObjectName);    }  } else {    logger.debug(\"Looking for subobject with id [\" + subObjectIdStr + \"] ...\");    Integer subObjId=new Integer(subObjectIdStr);    if (subObjects != null && subObjects.size() > 0) {      subObj=getRequiredSubObject_extraction_2(subObjects,subObj,subObjId);    }  }  if (subObj == null) {    logger.error(\"Subobject not found.\");    List l=new ArrayList();    l.add(subObjectName);    EMFUserError userError=new EMFUserError(EMFErrorSeverity.ERROR,1080,l);    errorHandler.addError(userError);  } else {    boolean canSeeSubobject=canSeeSubobject(getUserProfile(),subObj);    if (!canSeeSubobject) {      List l=new ArrayList();      l.add(subObj.getName());      EMFUserError userError=new EMFUserError(EMFErrorSeverity.ERROR,1079,l);      errorHandler.addError(userError);      subObj=null;    }  }  logger.debug(\"OUT\");  return subObj;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.document.service.ExecuteBIObjectModule.getRequiredSubObject.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.documentsbrowser.utils": {
        "FolderContentUtil": {
            "getFolderContent": {
                "original": {
                    "method_name": "getFolderContent",
                    "code": "public JSONObject getFolderContent(LowFunctionality folder,SourceBean request,SourceBean response,HttpServletRequest httpRequest,SessionContainer sessCont) throws Exception {  List functionalities;  List objects;  boolean isHome=false;  if (folder == null) {    Config documentBrowserHomeConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.HOME\");    if (documentBrowserHomeConfig != null) {      if (documentBrowserHomeConfig.isActive()) {        String folderLabel=documentBrowserHomeConfig.getValueCheck();        if (!StringUtils.isEmpty(folderLabel)) {          folder=DAOFactory.getLowFunctionalityDAO().loadLowFunctionalityByCode(folderLabel,false);        }      }    }  }  if (folder == null || String.valueOf(folder.getId()).equalsIgnoreCase(ROOT_NODE_ID)) {    folder=DAOFactory.getLowFunctionalityDAO().loadRootLowFunctionality(false);  }  SessionContainer permCont=sessCont.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permCont.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  if (UserUtilities.isAdministrator(profile)) {    isHome=UserUtilities.isAPersonalFolder(folder);  } else {    isHome=UserUtilities.isPersonalFolder(folder,(UserProfile)profile);  }  List allSubDocuments=null;  Config documentBrowserRecursiveConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.RECURSIVE\");  if (documentBrowserRecursiveConfig.isActive()) {    String propertyValue=documentBrowserRecursiveConfig.getValueCheck();    if ((!StringUtils.isEmpty(propertyValue)) && (propertyValue.equalsIgnoreCase(\"true\"))) {      allSubDocuments=getAllSubDocuments(String.valueOf(folder.getId()),profile,isHome);    }  }  if (allSubDocuments == null) {    List tmpObjects=DAOFactory.getBIObjectDAO().loadBIObjects(folder.getId(),profile,isHome);    objects=new ArrayList();    if (tmpObjects != null) {      for (Iterator it=tmpObjects.iterator(); it.hasNext(); ) {        BIObject obj=(BIObject)it.next();        if (ObjectsAccessVerifier.canSee(obj,profile)) {          objects.add(obj);        }      }    }  } else {    objects=allSubDocuments;  }  MessageBuilder m=new MessageBuilder();  Locale locale=m.getLocale(httpRequest);  JSONArray documentsJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(objects,locale);  DocumentsJSONDecorator.decorateDocuments(documentsJSON,profile,folder);  JSONObject documentsResponseJSON=createJSONResponseDocuments(documentsJSON);  functionalities=DAOFactory.getLowFunctionalityDAO().loadUserFunctionalities(folder.getId(),false,profile);  JSONArray foldersJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(functionalities,locale);  JSONObject exportAction=new JSONObject();  exportAction.put(\"name\",\"export\");  exportAction.put(\"description\",\"Export\");  JSONObject scheduleAction=new JSONObject();  scheduleAction.put(\"name\",\"schedule\");  scheduleAction.put(\"description\",\"Schedule\");  JSONObject foldersResponseJSON;  Config documentBrowserFlatConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.FLAT\");  if (documentBrowserFlatConfig.isActive()) {    String propertyValue=documentBrowserFlatConfig.getValueCheck();    if ((!StringUtils.isEmpty(propertyValue)) && (propertyValue.equalsIgnoreCase(\"true\"))) {      foldersJSON=new JSONArray();    }  }  foldersResponseJSON=createJSONResponseFolders(foldersJSON);  JSONObject canAddResponseJSON=null;  return createJSONResponse(foldersResponseJSON,documentsResponseJSON,canAddResponseJSON);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.documentsbrowser.utils.FolderContentUtil.getFolderContent.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getFolderContent",
                        "code": "public JSONObject getFolderContent(LowFunctionality folder,SourceBean request,SourceBean response,HttpServletRequest httpRequest,SessionContainer sessCont) throws Exception {  List functionalities;  List objects;  boolean isHome=false;  if (folder == null) {    Config documentBrowserHomeConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.HOME\");    if (documentBrowserHomeConfig != null) {      if (documentBrowserHomeConfig.isActive()) {        String folderLabel=documentBrowserHomeConfig.getValueCheck();        if (!StringUtils.isEmpty(folderLabel)) {          folder=DAOFactory.getLowFunctionalityDAO().loadLowFunctionalityByCode(folderLabel,false);        }      }    }  }  if (folder == null || String.valueOf(folder.getId()).equalsIgnoreCase(ROOT_NODE_ID)) {    folder=DAOFactory.getLowFunctionalityDAO().loadRootLowFunctionality(false);  }  SessionContainer permCont=sessCont.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permCont.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  if (UserUtilities.isAdministrator(profile)) {    isHome=UserUtilities.isAPersonalFolder(folder);  } else {    isHome=UserUtilities.isPersonalFolder(folder,(UserProfile)profile);  }  List allSubDocuments=null;  Config documentBrowserRecursiveConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.RECURSIVE\");  if (documentBrowserRecursiveConfig.isActive()) {    String propertyValue=documentBrowserRecursiveConfig.getValueCheck();    if ((!StringUtils.isEmpty(propertyValue)) && (propertyValue.equalsIgnoreCase(\"true\"))) {      allSubDocuments=getAllSubDocuments(String.valueOf(folder.getId()),profile,isHome);    }  }  objects=getFolderContent_extraction_2(folder,isHome,profile,allSubDocuments);  MessageBuilder m=new MessageBuilder();  Locale locale=m.getLocale(httpRequest);  JSONArray documentsJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(objects,locale);  DocumentsJSONDecorator.decorateDocuments(documentsJSON,profile,folder);  JSONObject documentsResponseJSON=createJSONResponseDocuments(documentsJSON);  functionalities=DAOFactory.getLowFunctionalityDAO().loadUserFunctionalities(folder.getId(),false,profile);  JSONArray foldersJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(functionalities,locale);  JSONObject exportAction=new JSONObject();  exportAction.put(\"name\",\"export\");  exportAction.put(\"description\",\"Export\");  JSONObject scheduleAction=new JSONObject();  scheduleAction.put(\"name\",\"schedule\");  scheduleAction.put(\"description\",\"Schedule\");  JSONObject foldersResponseJSON;  Config documentBrowserFlatConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.FLAT\");  if (documentBrowserFlatConfig.isActive()) {    String propertyValue=documentBrowserFlatConfig.getValueCheck();    if ((!StringUtils.isEmpty(propertyValue)) && (propertyValue.equalsIgnoreCase(\"true\"))) {      foldersJSON=new JSONArray();    }  }  foldersResponseJSON=createJSONResponseFolders(foldersJSON);  JSONObject canAddResponseJSON=null;  return createJSONResponse(foldersResponseJSON,documentsResponseJSON,canAddResponseJSON);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.documentsbrowser.utils.FolderContentUtil.getFolderContent.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getFolderContent",
                        "code": "public JSONObject getFolderContent(LowFunctionality folder,SourceBean request,SourceBean response,HttpServletRequest httpRequest,SessionContainer sessCont) throws Exception {  List functionalities;  List objects;  boolean isHome;  folder=getFolderContent_extraction_1(folder);  SessionContainer permCont=sessCont.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permCont.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  if (UserUtilities.isAdministrator(profile)) {    isHome=UserUtilities.isAPersonalFolder(folder);  } else {    isHome=UserUtilities.isPersonalFolder(folder,(UserProfile)profile);  }  List allSubDocuments=null;  Config documentBrowserRecursiveConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.RECURSIVE\");  if (documentBrowserRecursiveConfig.isActive()) {    String propertyValue=documentBrowserRecursiveConfig.getValueCheck();    if ((!StringUtils.isEmpty(propertyValue)) && (propertyValue.equalsIgnoreCase(\"true\"))) {      allSubDocuments=getAllSubDocuments(String.valueOf(folder.getId()),profile,isHome);    }  }  objects=getFolderContent_extraction_2(folder,isHome,profile,allSubDocuments);  MessageBuilder m=new MessageBuilder();  Locale locale=m.getLocale(httpRequest);  JSONArray documentsJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(objects,locale);  DocumentsJSONDecorator.decorateDocuments(documentsJSON,profile,folder);  JSONObject documentsResponseJSON=createJSONResponseDocuments(documentsJSON);  functionalities=DAOFactory.getLowFunctionalityDAO().loadUserFunctionalities(folder.getId(),false,profile);  JSONArray foldersJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(functionalities,locale);  JSONObject exportAction=new JSONObject();  exportAction.put(\"name\",\"export\");  exportAction.put(\"description\",\"Export\");  JSONObject scheduleAction=new JSONObject();  scheduleAction.put(\"name\",\"schedule\");  scheduleAction.put(\"description\",\"Schedule\");  JSONObject foldersResponseJSON;  Config documentBrowserFlatConfig=DAOFactory.getSbiConfigDAO().loadConfigParametersByLabel(\"SPAGOBI.DOCUMENTBROWSER.FLAT\");  if (documentBrowserFlatConfig.isActive()) {    String propertyValue=documentBrowserFlatConfig.getValueCheck();    if ((!StringUtils.isEmpty(propertyValue)) && (propertyValue.equalsIgnoreCase(\"true\"))) {      foldersJSON=new JSONArray();    }  }  foldersResponseJSON=createJSONResponseFolders(foldersJSON);  JSONObject canAddResponseJSON=null;  return createJSONResponse(foldersResponseJSON,documentsResponseJSON,canAddResponseJSON);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.documentsbrowser.utils.FolderContentUtil.getFolderContent.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service": {
        "GetParameterValuesForExecutionAction": {
            "doService": {
                "original": {
                    "method_name": "doService",
                    "code": "@Override public void doService(){  String biparameterId;  JSONObject selectedParameterValuesJSON;  JSONObject filtersJSON=null;  Map selectedParameterValues;  String mode;  JSONObject valuesJSON;  String contest;  BIObjectParameter biObjectParameter;  ExecutionInstance executionInstance;  String valueColumn;  String descriptionColumn;  List rows;  List<ObjParuse> biParameterExecDependencies;  ILovDetail lovProvDet;  CacheInterface cache;  List objParameterIds;  int treeLovNodeLevel=0;  String treeLovNodeValue=null;  logger.debug(\"IN\");  try {    biparameterId=getAttributeAsString(PARAMETER_ID);    selectedParameterValuesJSON=getAttributeAsJSONObject(SELECTED_PARAMETER_VALUES);    if (this.requestContainsAttribute(FILTERS)) {      filtersJSON=getAttributeAsJSONObject(FILTERS);    }    mode=getAttributeAsString(MODE);    try {      treeLovNodeValue=getAttributeAsString(NODE);      if (treeLovNodeValue.contains(\"lovroot\")) {        treeLovNodeValue=\"lovroot\";        treeLovNodeLevel=0;      } else {        String[] splittedNode=treeLovNodeValue.split(NODE_ID_SEPARATOR);        treeLovNodeValue=splittedNode[0];        treeLovNodeLevel=new Integer(splittedNode[1]);      }    } catch (    NullPointerException e) {      logger.debug(\"there is no tree attribute for the Parameter [\" + PARAMETER_ID + \"]\");    }    objParameterIds=getAttributeAsList(OBJ_PARAMETER_IDS);    contest=getAttributeAsString(CONTEST);    logger.debug(\"Parameter [\" + PARAMETER_ID + \"] is equals to [\"+ biparameterId+ \"]\");    logger.debug(\"Parameter [\" + MODE + \"] is equals to [\"+ mode+ \"]\");    logger.debug(\"Parameter [\" + CONTEST + \"] is equals to [\"+ contest+ \"]\");    if (mode == null) {      mode=MODE_SIMPLE;    }    Assert.assertNotNull(getContext(),\"Parameter [\" + PARAMETER_ID + \"] cannot be null\");    Assert.assertNotNull(getContext(),\"Execution context cannot be null\");    Assert.assertNotNull(getContext().isExecutionInstanceAMap(ExecutionInstance.class.getName()),\"Execution instance cannot be null\");    boolean isAMap=getContext().isExecutionInstanceAMap(ExecutionInstance.class.getName());    executionInstance=null;    if (!isAMap) {      executionInstance=getContext().getExecutionInstance(ExecutionInstance.class.getName());    } else {      Map<Integer,ExecutionInstance> instances=getContext().getExecutionInstancesAsMap(ExecutionInstance.class.getName());      Integer biObjectId=null;      Assert.assertNotNull(objParameterIds,\"In map case objParameterids list cannot be null\");      if (objParameterIds.size() == 0) {        throw new SpagoBIServiceException(\"In map case objParameterids list cannot be empty\",SERVICE_NAME);      }      Integer objParId=Integer.valueOf(objParameterIds.get(0).toString());      try {        BIObjectParameter biObjPar=DAOFactory.getBIObjectParameterDAO().loadBiObjParameterById(objParId);        biObjectId=biObjPar.getBiObjectID();      } catch (      HibernateException e) {        throw new SpagoBIServiceException(\"Could not recover document\",e);      }      executionInstance=instances.get(biObjectId);    }    if (selectedParameterValuesJSON != null) {      executionInstance.refreshParametersValues(selectedParameterValuesJSON,false);    }    BIObject obj=executionInstance.getBIObject();    selectedParameterValues=null;    if (selectedParameterValuesJSON != null) {      try {        selectedParameterValues=new HashMap();        Iterator it=selectedParameterValuesJSON.keys();        while (it.hasNext()) {          String key=(String)it.next();          Object v=selectedParameterValuesJSON.get(key);          if (v == JSONObject.NULL) {            selectedParameterValues.put(key,null);          } else           if (v instanceof JSONArray) {            JSONArray a=(JSONArray)v;            String[] nv=new String[a.length()];            for (int i=0; i < a.length(); i++) {              if (a.get(i) != null) {                nv[i]=a.get(i).toString();              } else {                nv[i]=null;              }            }            selectedParameterValues.put(key,nv);          } else           if (v instanceof String) {            selectedParameterValues.put(key,v);          } else {            Assert.assertUnreachable(\"Attribute [\" + key + \"] value [\"+ v+ \"] of PARAMETERS is not of type JSONArray nor String. It is of type [\"+ v.getClass().getName()+ \"]\");          }        }      } catch (      JSONException e) {        throw new SpagoBIServiceException(\"parameter JSONObject is malformed\",e);      }    }    biObjectParameter=null;    List parameters=obj.getDrivers();    for (int i=0; i < parameters.size(); i++) {      BIObjectParameter p=(BIObjectParameter)parameters.get(i);      if (biparameterId.equalsIgnoreCase(p.getParameterUrlName())) {        biObjectParameter=p;        break;      }    }    Assert.assertNotNull(biObjectParameter,\"Impossible to find parameter [\" + biparameterId + \"]\");    try {      Parameter parameter=biObjectParameter.getParameter();      if (DateRangeDAOUtilities.isDateRange(parameter)) {        manageDataRange(biObjectParameter,executionInstance);        return;      }    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Error on loading date range combobox values\",e);    }    lovProvDet=executionInstance.getLovDetail(biObjectParameter);    String lovResult=null;    try {      IEngUserProfile profile=getUserProfile();      LovResultCacheManager executionCacheManager=new LovResultCacheManager();      lovResult=executionCacheManager.getLovResult(profile,lovProvDet,executionInstance.getDependencies(biObjectParameter),executionInstance,true);      LovResultHandler lovResultHandler=new LovResultHandler(lovResult);      rows=lovResultHandler.getRows();    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to get parameter's values\",e);    }    Assert.assertNotNull(lovResult,\"Impossible to get parameter's values\");    try {      if (filtersJSON != null) {        String valuefilter=(String)filtersJSON.get(SpagoBIConstants.VALUE_FILTER);        String columnfilter=(String)filtersJSON.get(SpagoBIConstants.COLUMN_FILTER);        String typeFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_FILTER);        String typeValueFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_VALUE_FILTER);        rows=DelegatedBasicListService.filterList(rows,valuefilter,typeValueFilter,columnfilter,typeFilter);      }    } catch (    JSONException e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to read filter's configuration\",e);    }    biParameterExecDependencies=executionInstance.getDependencies(biObjectParameter);    if (lovProvDet instanceof DependenciesPostProcessingLov && selectedParameterValues != null && biParameterExecDependencies != null && biParameterExecDependencies.size() > 0 && !contest.equals(MASSIVE_EXPORT)) {      rows=((DependenciesPostProcessingLov)lovProvDet).processDependencies(rows,selectedParameterValues,biParameterExecDependencies);    }    if (lovProvDet.getLovType() != null && lovProvDet.getLovType().contains(\"tree\")) {      JSONArray valuesJSONArray=getChildrenForTreeLov(lovProvDet,rows,mode,treeLovNodeLevel,treeLovNodeValue);      try {        writeBackToClient(new JSONSuccess(valuesJSONArray));      } catch (      IOException e) {        throw new SpagoBIServiceException(\"Impossible to write back the responce to the client\",e);      }    } else {      valuesJSON=buildJSONForLOV(lovProvDet,rows,mode);      try {        writeBackToClient(new JSONSuccess(valuesJSON));      } catch (      IOException e) {        throw new SpagoBIServiceException(\"Impossible to write back the responce to the client\",e);      }    }  }  finally {    logger.debug(\"OUT\");  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.doService.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "doService",
                        "code": "@Override public void doService(){  String biparameterId;  JSONObject selectedParameterValuesJSON;  JSONObject filtersJSON=null;  Map selectedParameterValues;  String mode;  JSONObject valuesJSON;  String contest;  BIObjectParameter biObjectParameter;  ExecutionInstance executionInstance;  String valueColumn;  String descriptionColumn;  List rows;  List<ObjParuse> biParameterExecDependencies;  ILovDetail lovProvDet;  CacheInterface cache;  List objParameterIds;  int treeLovNodeLevel=0;  String treeLovNodeValue=null;  logger.debug(\"IN\");  try {    biparameterId=getAttributeAsString(PARAMETER_ID);    selectedParameterValuesJSON=getAttributeAsJSONObject(SELECTED_PARAMETER_VALUES);    if (this.requestContainsAttribute(FILTERS)) {      filtersJSON=getAttributeAsJSONObject(FILTERS);    }    mode=getAttributeAsString(MODE);    try {      treeLovNodeValue=getAttributeAsString(NODE);      if (treeLovNodeValue.contains(\"lovroot\")) {        treeLovNodeValue=\"lovroot\";        treeLovNodeLevel=0;      } else {        String[] splittedNode=treeLovNodeValue.split(NODE_ID_SEPARATOR);        treeLovNodeValue=splittedNode[0];        treeLovNodeLevel=new Integer(splittedNode[1]);      }    } catch (    NullPointerException e) {      logger.debug(\"there is no tree attribute for the Parameter [\" + PARAMETER_ID + \"]\");    }    objParameterIds=getAttributeAsList(OBJ_PARAMETER_IDS);    contest=getAttributeAsString(CONTEST);    logger.debug(\"Parameter [\" + PARAMETER_ID + \"] is equals to [\"+ biparameterId+ \"]\");    logger.debug(\"Parameter [\" + MODE + \"] is equals to [\"+ mode+ \"]\");    logger.debug(\"Parameter [\" + CONTEST + \"] is equals to [\"+ contest+ \"]\");    if (mode == null) {      mode=MODE_SIMPLE;    }    Assert.assertNotNull(getContext(),\"Parameter [\" + PARAMETER_ID + \"] cannot be null\");    Assert.assertNotNull(getContext(),\"Execution context cannot be null\");    Assert.assertNotNull(getContext().isExecutionInstanceAMap(ExecutionInstance.class.getName()),\"Execution instance cannot be null\");    boolean isAMap=getContext().isExecutionInstanceAMap(ExecutionInstance.class.getName());    executionInstance=null;    if (!isAMap) {      executionInstance=getContext().getExecutionInstance(ExecutionInstance.class.getName());    } else {      Map<Integer,ExecutionInstance> instances=getContext().getExecutionInstancesAsMap(ExecutionInstance.class.getName());      Integer biObjectId=null;      Assert.assertNotNull(objParameterIds,\"In map case objParameterids list cannot be null\");      if (objParameterIds.size() == 0) {        throw new SpagoBIServiceException(\"In map case objParameterids list cannot be empty\",SERVICE_NAME);      }      Integer objParId=Integer.valueOf(objParameterIds.get(0).toString());      try {        BIObjectParameter biObjPar=DAOFactory.getBIObjectParameterDAO().loadBiObjParameterById(objParId);        biObjectId=biObjPar.getBiObjectID();      } catch (      HibernateException e) {        throw new SpagoBIServiceException(\"Could not recover document\",e);      }      executionInstance=instances.get(biObjectId);    }    if (selectedParameterValuesJSON != null) {      executionInstance.refreshParametersValues(selectedParameterValuesJSON,false);    }    BIObject obj=executionInstance.getBIObject();    selectedParameterValues=null;    if (selectedParameterValuesJSON != null) {      try {        selectedParameterValues=new HashMap();        Iterator it=selectedParameterValuesJSON.keys();        while (it.hasNext()) {          String key=(String)it.next();          Object v=selectedParameterValuesJSON.get(key);          if (v == JSONObject.NULL) {            selectedParameterValues.put(key,null);          } else           if (v instanceof JSONArray) {            JSONArray a=(JSONArray)v;            String[] nv=new String[a.length()];            for (int i=0; i < a.length(); i++) {              if (a.get(i) != null) {                nv[i]=a.get(i).toString();              } else {                nv[i]=null;              }            }            selectedParameterValues.put(key,nv);          } else           if (v instanceof String) {            selectedParameterValues.put(key,v);          } else {            Assert.assertUnreachable(\"Attribute [\" + key + \"] value [\"+ v+ \"] of PARAMETERS is not of type JSONArray nor String. It is of type [\"+ v.getClass().getName()+ \"]\");          }        }      } catch (      JSONException e) {        throw new SpagoBIServiceException(\"parameter JSONObject is malformed\",e);      }    }    biObjectParameter=null;    List parameters=obj.getDrivers();    for (int i=0; i < parameters.size(); i++) {      BIObjectParameter p=(BIObjectParameter)parameters.get(i);      if (biparameterId.equalsIgnoreCase(p.getParameterUrlName())) {        biObjectParameter=p;        break;      }    }    Assert.assertNotNull(biObjectParameter,\"Impossible to find parameter [\" + biparameterId + \"]\");    try {      Parameter parameter=biObjectParameter.getParameter();      if (DateRangeDAOUtilities.isDateRange(parameter)) {        manageDataRange(biObjectParameter,executionInstance);        return;      }    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Error on loading date range combobox values\",e);    }    lovProvDet=executionInstance.getLovDetail(biObjectParameter);    String lovResult=null;    try {      IEngUserProfile profile=getUserProfile();      LovResultCacheManager executionCacheManager=new LovResultCacheManager();      lovResult=executionCacheManager.getLovResult(profile,lovProvDet,executionInstance.getDependencies(biObjectParameter),executionInstance,true);      LovResultHandler lovResultHandler=new LovResultHandler(lovResult);      rows=lovResultHandler.getRows();    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to get parameter's values\",e);    }    Assert.assertNotNull(lovResult,\"Impossible to get parameter's values\");    try {      if (filtersJSON != null) {        String valuefilter=(String)filtersJSON.get(SpagoBIConstants.VALUE_FILTER);        String columnfilter=(String)filtersJSON.get(SpagoBIConstants.COLUMN_FILTER);        String typeFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_FILTER);        String typeValueFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_VALUE_FILTER);        rows=DelegatedBasicListService.filterList(rows,valuefilter,typeValueFilter,columnfilter,typeFilter);      }    } catch (    JSONException e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to read filter's configuration\",e);    }    doService_extraction_3(selectedParameterValues,mode,contest,biObjectParameter,executionInstance,rows,lovProvDet,treeLovNodeLevel,treeLovNodeValue);  }  finally {    logger.debug(\"OUT\");  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.doService.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "doService",
                        "code": "@Override public void doService(){  String biparameterId;  JSONObject selectedParameterValuesJSON;  JSONObject filtersJSON=null;  Map selectedParameterValues;  String mode;  JSONObject valuesJSON;  String contest;  BIObjectParameter biObjectParameter;  ExecutionInstance executionInstance;  String valueColumn;  String descriptionColumn;  List rows;  List<ObjParuse> biParameterExecDependencies;  ILovDetail lovProvDet;  CacheInterface cache;  List objParameterIds;  int treeLovNodeLevel=0;  String treeLovNodeValue=null;  logger.debug(\"IN\");  try {    biparameterId=getAttributeAsString(PARAMETER_ID);    selectedParameterValuesJSON=getAttributeAsJSONObject(SELECTED_PARAMETER_VALUES);    if (this.requestContainsAttribute(FILTERS)) {      filtersJSON=getAttributeAsJSONObject(FILTERS);    }    mode=getAttributeAsString(MODE);    try {      treeLovNodeValue=getAttributeAsString(NODE);      if (treeLovNodeValue.contains(\"lovroot\")) {        treeLovNodeValue=\"lovroot\";        treeLovNodeLevel=0;      } else {        String[] splittedNode=treeLovNodeValue.split(NODE_ID_SEPARATOR);        treeLovNodeValue=splittedNode[0];        treeLovNodeLevel=new Integer(splittedNode[1]);      }    } catch (    NullPointerException e) {      logger.debug(\"there is no tree attribute for the Parameter [\" + PARAMETER_ID + \"]\");    }    objParameterIds=getAttributeAsList(OBJ_PARAMETER_IDS);    contest=getAttributeAsString(CONTEST);    logger.debug(\"Parameter [\" + PARAMETER_ID + \"] is equals to [\"+ biparameterId+ \"]\");    logger.debug(\"Parameter [\" + MODE + \"] is equals to [\"+ mode+ \"]\");    logger.debug(\"Parameter [\" + CONTEST + \"] is equals to [\"+ contest+ \"]\");    if (mode == null) {      mode=MODE_SIMPLE;    }    Assert.assertNotNull(getContext(),\"Parameter [\" + PARAMETER_ID + \"] cannot be null\");    Assert.assertNotNull(getContext(),\"Execution context cannot be null\");    Assert.assertNotNull(getContext().isExecutionInstanceAMap(ExecutionInstance.class.getName()),\"Execution instance cannot be null\");    boolean isAMap=getContext().isExecutionInstanceAMap(ExecutionInstance.class.getName());    executionInstance=null;    if (!isAMap) {      executionInstance=getContext().getExecutionInstance(ExecutionInstance.class.getName());    } else {      Map<Integer,ExecutionInstance> instances=getContext().getExecutionInstancesAsMap(ExecutionInstance.class.getName());      Integer biObjectId=null;      Assert.assertNotNull(objParameterIds,\"In map case objParameterids list cannot be null\");      if (objParameterIds.size() == 0) {        throw new SpagoBIServiceException(\"In map case objParameterids list cannot be empty\",SERVICE_NAME);      }      Integer objParId=Integer.valueOf(objParameterIds.get(0).toString());      try {        BIObjectParameter biObjPar=DAOFactory.getBIObjectParameterDAO().loadBiObjParameterById(objParId);        biObjectId=biObjPar.getBiObjectID();      } catch (      HibernateException e) {        throw new SpagoBIServiceException(\"Could not recover document\",e);      }      executionInstance=instances.get(biObjectId);    }    if (selectedParameterValuesJSON != null) {      executionInstance.refreshParametersValues(selectedParameterValuesJSON,false);    }    BIObject obj=executionInstance.getBIObject();    selectedParameterValues=null;    if (selectedParameterValuesJSON != null) {      selectedParameterValues=doService_extraction_2(selectedParameterValuesJSON,selectedParameterValues);    }    biObjectParameter=null;    List parameters=obj.getDrivers();    for (int i=0; i < parameters.size(); i++) {      BIObjectParameter p=(BIObjectParameter)parameters.get(i);      if (biparameterId.equalsIgnoreCase(p.getParameterUrlName())) {        biObjectParameter=p;        break;      }    }    Assert.assertNotNull(biObjectParameter,\"Impossible to find parameter [\" + biparameterId + \"]\");    try {      Parameter parameter=biObjectParameter.getParameter();      if (DateRangeDAOUtilities.isDateRange(parameter)) {        manageDataRange(biObjectParameter,executionInstance);        return;      }    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Error on loading date range combobox values\",e);    }    lovProvDet=executionInstance.getLovDetail(biObjectParameter);    String lovResult=null;    try {      IEngUserProfile profile=getUserProfile();      LovResultCacheManager executionCacheManager=new LovResultCacheManager();      lovResult=executionCacheManager.getLovResult(profile,lovProvDet,executionInstance.getDependencies(biObjectParameter),executionInstance,true);      LovResultHandler lovResultHandler=new LovResultHandler(lovResult);      rows=lovResultHandler.getRows();    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to get parameter's values\",e);    }    Assert.assertNotNull(lovResult,\"Impossible to get parameter's values\");    try {      if (filtersJSON != null) {        String valuefilter=(String)filtersJSON.get(SpagoBIConstants.VALUE_FILTER);        String columnfilter=(String)filtersJSON.get(SpagoBIConstants.COLUMN_FILTER);        String typeFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_FILTER);        String typeValueFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_VALUE_FILTER);        rows=DelegatedBasicListService.filterList(rows,valuefilter,typeValueFilter,columnfilter,typeFilter);      }    } catch (    JSONException e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to read filter's configuration\",e);    }    doService_extraction_3(selectedParameterValues,mode,contest,biObjectParameter,executionInstance,rows,lovProvDet,treeLovNodeLevel,treeLovNodeValue);  }  finally {    logger.debug(\"OUT\");  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.doService.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "doService",
                        "code": "@Override public void doService(){  String biparameterId;  JSONObject selectedParameterValuesJSON;  JSONObject filtersJSON=null;  Map selectedParameterValues;  String mode;  JSONObject valuesJSON;  String contest;  BIObjectParameter biObjectParameter;  ExecutionInstance executionInstance;  String valueColumn;  String descriptionColumn;  List rows;  List<ObjParuse> biParameterExecDependencies;  ILovDetail lovProvDet;  CacheInterface cache;  List objParameterIds;  int treeLovNodeLevel=0;  String treeLovNodeValue=null;  logger.debug(\"IN\");  try {    biparameterId=getAttributeAsString(PARAMETER_ID);    selectedParameterValuesJSON=getAttributeAsJSONObject(SELECTED_PARAMETER_VALUES);    if (this.requestContainsAttribute(FILTERS)) {      filtersJSON=getAttributeAsJSONObject(FILTERS);    }    mode=getAttributeAsString(MODE);    try {      treeLovNodeValue=getAttributeAsString(NODE);      if (treeLovNodeValue.contains(\"lovroot\")) {        treeLovNodeValue=\"lovroot\";        treeLovNodeLevel=0;      } else {        String[] splittedNode=treeLovNodeValue.split(NODE_ID_SEPARATOR);        treeLovNodeValue=splittedNode[0];        treeLovNodeLevel=new Integer(splittedNode[1]);      }    } catch (    NullPointerException e) {      logger.debug(\"there is no tree attribute for the Parameter [\" + PARAMETER_ID + \"]\");    }    objParameterIds=getAttributeAsList(OBJ_PARAMETER_IDS);    contest=getAttributeAsString(CONTEST);    logger.debug(\"Parameter [\" + PARAMETER_ID + \"] is equals to [\"+ biparameterId+ \"]\");    logger.debug(\"Parameter [\" + MODE + \"] is equals to [\"+ mode+ \"]\");    logger.debug(\"Parameter [\" + CONTEST + \"] is equals to [\"+ contest+ \"]\");    if (mode == null) {      mode=MODE_SIMPLE;    }    Assert.assertNotNull(getContext(),\"Parameter [\" + PARAMETER_ID + \"] cannot be null\");    executionInstance=doService_extraction_1(selectedParameterValuesJSON,objParameterIds);    BIObject obj=executionInstance.getBIObject();    selectedParameterValues=null;    if (selectedParameterValuesJSON != null) {      selectedParameterValues=doService_extraction_2(selectedParameterValuesJSON,selectedParameterValues);    }    biObjectParameter=null;    List parameters=obj.getDrivers();    for (int i=0; i < parameters.size(); i++) {      BIObjectParameter p=(BIObjectParameter)parameters.get(i);      if (biparameterId.equalsIgnoreCase(p.getParameterUrlName())) {        biObjectParameter=p;        break;      }    }    Assert.assertNotNull(biObjectParameter,\"Impossible to find parameter [\" + biparameterId + \"]\");    try {      Parameter parameter=biObjectParameter.getParameter();      if (DateRangeDAOUtilities.isDateRange(parameter)) {        manageDataRange(biObjectParameter,executionInstance);        return;      }    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Error on loading date range combobox values\",e);    }    lovProvDet=executionInstance.getLovDetail(biObjectParameter);    String lovResult=null;    try {      IEngUserProfile profile=getUserProfile();      LovResultCacheManager executionCacheManager=new LovResultCacheManager();      lovResult=executionCacheManager.getLovResult(profile,lovProvDet,executionInstance.getDependencies(biObjectParameter),executionInstance,true);      LovResultHandler lovResultHandler=new LovResultHandler(lovResult);      rows=lovResultHandler.getRows();    } catch (    Exception e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to get parameter's values\",e);    }    Assert.assertNotNull(lovResult,\"Impossible to get parameter's values\");    try {      if (filtersJSON != null) {        String valuefilter=(String)filtersJSON.get(SpagoBIConstants.VALUE_FILTER);        String columnfilter=(String)filtersJSON.get(SpagoBIConstants.COLUMN_FILTER);        String typeFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_FILTER);        String typeValueFilter=(String)filtersJSON.get(SpagoBIConstants.TYPE_VALUE_FILTER);        rows=DelegatedBasicListService.filterList(rows,valuefilter,typeValueFilter,columnfilter,typeFilter);      }    } catch (    JSONException e) {      throw new SpagoBIServiceException(SERVICE_NAME,\"Impossible to read filter's configuration\",e);    }    doService_extraction_3(selectedParameterValues,mode,contest,biObjectParameter,executionInstance,rows,lovProvDet,treeLovNodeLevel,treeLovNodeValue);  }  finally {    logger.debug(\"OUT\");  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.doService.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "getChildrenForTreeLov": {
                "original": {
                    "method_name": "getChildrenForTreeLov",
                    "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.getChildrenForTreeLov.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.getChildrenForTreeLov.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        addNode=getChildrenForTreeLov_extraction_1(treeLovNodeValue,addNode,treeLovParentNodeName,attribute);        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.GetParameterValuesForExecutionAction.getChildrenForTreeLov.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.v2": {
        "SaveDocumentResource": {
            "parseRequest": {
                "original": {
                    "method_name": "parseRequest",
                    "code": "/**  * @return a JSON object representing the input request to the service with the following structure: <code>{ action: STRING , sourceDataset: { label: STRING } , sourceDocument: { id: NUMBER } , document: { id: NUMBER label: STRING name: STRING description: STRING type: STRING engineId: NUMBER metadata: [JSON, ..., JSON] } , customData: { query: [STRING] workseheet: [JSON] smartfilter:  [JSON] } , folders: [STRING, ... , STRING] } </code> * @throws JSONException * @throws EMFUserError */public JSONObject parseRequest() throws JSONException, EMFUserError {  JSONObject request=new JSONObject();  String action=this.getAttributeAsString(MESSAGE_DET);  request.put(\"action\",action);  String sourceDatasetLabel=getAttributeAsString(OBJ_DATASET_LABEL);  if (StringUtilities.isNotEmpty(sourceDatasetLabel)) {    JSONObject sourceDataset=new JSONObject();    sourceDataset.put(\"label\",sourceDatasetLabel);    request.put(\"sourceDataset\",sourceDataset);  }  String sourceDocumentId=getAttributeAsString(OBJ_ID);  if (StringUtilities.isNotEmpty(sourceDocumentId)) {    JSONObject sourceDocument=new JSONObject();    sourceDocument.put(\"id\",sourceDocumentId);    request.put(\"sourceDocument\",sourceDocument);  }  JSONObject document=new JSONObject();  String documentId=getAttributeAsString(ID);  if (documentId != null)   document.put(\"id\",documentId);  String label=getAttributeAsString(LABEL);  if (label != null)   document.put(\"label\",label);  String name=getAttributeAsString(NAME);  if (name != null)   document.put(\"name\",name);  String description=getAttributeAsString(DESCRIPTION);  if (description != null)   document.put(\"description\",description);  String visibility=getAttributeAsString(VISIBILITY);  if (visibility != null)   document.put(\"visibility\",visibility);  String type=getAttributeAsString(TYPE);  if (type != null)   document.put(\"type\",type);  String engineId=getAttributeAsString(ENGINE);  if (engineId != null)   document.put(\"engineId\",engineId);  String previewFile=getAttributeAsString(PREVIEW_FILE);  if (previewFile != null)   document.put(\"previewFile\",previewFile);  String businessMetadata=getAttributeAsString(BUSINESS_METADATA);  if (StringUtilities.isNotEmpty(businessMetadata)) {    JSONObject businessMetadataJSON=new JSONObject(businessMetadata);    JSONArray metaProperties=new JSONArray();    JSONArray names=businessMetadataJSON.names();    for (int i=0; i < names.length(); i++) {      String key=names.getString(i);      String value=businessMetadataJSON.getString(key);      JSONObject metaProperty=new JSONObject();      metaProperty.put(\"meta_name\",key);      metaProperty.put(\"meta_content\",value);      metaProperties.put(metaProperty);    }    document.put(\"metadata\",metaProperties);  }  request.put(\"document\",document);  JSONObject customData=new JSONObject();  if (requestContainsAttribute(FORMVALUES) && StringUtilities.isNotEmpty(getAttributeAsString(FORMVALUES))) {    JSONObject smartFilterData=getAttributeAsJSONObject(FORMVALUES);    if (smartFilterData != null)     customData.put(\"smartFilter\",smartFilterData);  }  String query=getAttributeAsString(OBJECT_QUERY);  if (query != null)   customData.put(\"query\",query);  JSONObject templateContent=getAttributeAsJSONObject(TEMPLATE);  if (templateContent != null)   customData.put(\"templateContent\",templateContent);  request.put(\"customData\",customData);  JSONArray foldersJSON=new JSONArray();  if (requestContainsAttribute(FUNCTS) && StringUtilities.isNotEmpty(getAttributeAsString(FUNCTS))) {    foldersJSON=getAttributeAsJSONArray(FUNCTS);    if (foldersJSON != null)     request.put(\"folders\",foldersJSON);  }  String communityFCode=getAttributeAsString(COMMUNITY);  if (communityFCode != null && !\"\".equalsIgnoreCase(communityFCode)) {    if (communityFCode.startsWith(\"-1\")) {      String realCode=communityFCode.substring(communityFCode.indexOf(\"__\") + 2);      if (!realCode.equals(\"\")) {        for (int i=0; i < foldersJSON.length(); i++) {          if (foldersJSON.get(i).equals(Integer.valueOf(realCode))) {            foldersJSON.remove(i);            break;          }        }      }    } else {      LowFunctionality commF=DAOFactory.getLowFunctionalityDAO().loadLowFunctionalityByCode(communityFCode,false);      Integer commFId=commF.getId();      foldersJSON.put(commFId);    }  }  logger.debug(\"Request succesfully parsed: \" + request.toString(3));  return request;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.v2.SaveDocumentResource.parseRequest.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "parseRequest",
                        "code": "/**  * @return a JSON object representing the input request to the service with the following structure: <code>{ action: STRING , sourceDataset: { label: STRING } , sourceDocument: { id: NUMBER } , document: { id: NUMBER label: STRING name: STRING description: STRING type: STRING engineId: NUMBER metadata: [JSON, ..., JSON] } , customData: { query: [STRING] workseheet: [JSON] smartfilter:  [JSON] } , folders: [STRING, ... , STRING] } </code> * @throws JSONException * @throws EMFUserError */public JSONObject parseRequest() throws JSONException, EMFUserError {  JSONObject request=new JSONObject();  String action=this.getAttributeAsString(MESSAGE_DET);  request.put(\"action\",action);  String sourceDatasetLabel=getAttributeAsString(OBJ_DATASET_LABEL);  if (StringUtilities.isNotEmpty(sourceDatasetLabel)) {    JSONObject sourceDataset=new JSONObject();    sourceDataset.put(\"label\",sourceDatasetLabel);    request.put(\"sourceDataset\",sourceDataset);  }  String sourceDocumentId=getAttributeAsString(OBJ_ID);  if (StringUtilities.isNotEmpty(sourceDocumentId)) {    JSONObject sourceDocument=new JSONObject();    sourceDocument.put(\"id\",sourceDocumentId);    request.put(\"sourceDocument\",sourceDocument);  }  JSONObject document=new JSONObject();  String documentId=getAttributeAsString(ID);  if (documentId != null)   document.put(\"id\",documentId);  String label=getAttributeAsString(LABEL);  if (label != null)   document.put(\"label\",label);  String name=getAttributeAsString(NAME);  if (name != null)   document.put(\"name\",name);  String description=getAttributeAsString(DESCRIPTION);  if (description != null)   document.put(\"description\",description);  String visibility=getAttributeAsString(VISIBILITY);  if (visibility != null)   document.put(\"visibility\",visibility);  String type=getAttributeAsString(TYPE);  if (type != null)   document.put(\"type\",type);  String engineId=getAttributeAsString(ENGINE);  if (engineId != null)   document.put(\"engineId\",engineId);  String previewFile=getAttributeAsString(PREVIEW_FILE);  if (previewFile != null)   document.put(\"previewFile\",previewFile);  String businessMetadata=getAttributeAsString(BUSINESS_METADATA);  if (StringUtilities.isNotEmpty(businessMetadata)) {    JSONObject businessMetadataJSON=new JSONObject(businessMetadata);    JSONArray metaProperties=new JSONArray();    JSONArray names=businessMetadataJSON.names();    for (int i=0; i < names.length(); i++) {      String key=names.getString(i);      String value=businessMetadataJSON.getString(key);      JSONObject metaProperty=new JSONObject();      metaProperty.put(\"meta_name\",key);      metaProperty.put(\"meta_content\",value);      metaProperties.put(metaProperty);    }    document.put(\"metadata\",metaProperties);  }  request.put(\"document\",document);  JSONObject customData=new JSONObject();  if (requestContainsAttribute(FORMVALUES) && StringUtilities.isNotEmpty(getAttributeAsString(FORMVALUES))) {    JSONObject smartFilterData=getAttributeAsJSONObject(FORMVALUES);    if (smartFilterData != null)     customData.put(\"smartFilter\",smartFilterData);  }  String query=getAttributeAsString(OBJECT_QUERY);  if (query != null)   customData.put(\"query\",query);  JSONObject templateContent=getAttributeAsJSONObject(TEMPLATE);  if (templateContent != null)   customData.put(\"templateContent\",templateContent);  request.put(\"customData\",customData);  JSONArray foldersJSON=new JSONArray();  if (requestContainsAttribute(FUNCTS) && StringUtilities.isNotEmpty(getAttributeAsString(FUNCTS))) {    foldersJSON=getAttributeAsJSONArray(FUNCTS);    if (foldersJSON != null)     request.put(\"folders\",foldersJSON);  }  String communityFCode=getAttributeAsString(COMMUNITY);  if (communityFCode != null && !\"\".equalsIgnoreCase(communityFCode)) {    parseRequest_extraction_2(foldersJSON,communityFCode);  }  logger.debug(\"Request succesfully parsed: \" + request.toString(3));  return request;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.v2.SaveDocumentResource.parseRequest.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "parseRequest",
                        "code": "/**  * @return a JSON object representing the input request to the service with the following structure: <code>{ action: STRING , sourceDataset: { label: STRING } , sourceDocument: { id: NUMBER } , document: { id: NUMBER label: STRING name: STRING description: STRING type: STRING engineId: NUMBER metadata: [JSON, ..., JSON] } , customData: { query: [STRING] workseheet: [JSON] smartfilter:  [JSON] } , folders: [STRING, ... , STRING] } </code> * @throws JSONException * @throws EMFUserError */public JSONObject parseRequest() throws JSONException, EMFUserError {  JSONObject request=parseRequest_extraction_1();  JSONObject customData=new JSONObject();  if (requestContainsAttribute(FORMVALUES) && StringUtilities.isNotEmpty(getAttributeAsString(FORMVALUES))) {    JSONObject smartFilterData=getAttributeAsJSONObject(FORMVALUES);    if (smartFilterData != null)     customData.put(\"smartFilter\",smartFilterData);  }  String query=getAttributeAsString(OBJECT_QUERY);  if (query != null)   customData.put(\"query\",query);  JSONObject templateContent=getAttributeAsJSONObject(TEMPLATE);  if (templateContent != null)   customData.put(\"templateContent\",templateContent);  request.put(\"customData\",customData);  JSONArray foldersJSON=new JSONArray();  if (requestContainsAttribute(FUNCTS) && StringUtilities.isNotEmpty(getAttributeAsString(FUNCTS))) {    foldersJSON=getAttributeAsJSONArray(FUNCTS);    if (foldersJSON != null)     request.put(\"folders\",foldersJSON);  }  String communityFCode=getAttributeAsString(COMMUNITY);  if (communityFCode != null && !\"\".equalsIgnoreCase(communityFCode)) {    parseRequest_extraction_2(foldersJSON,communityFCode);  }  logger.debug(\"Request succesfully parsed: \" + request.toString(3));  return request;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.execution.service.v2.SaveDocumentResource.parseRequest.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.presentation": {
        "FunctionalitiesTreeInsertObjectHtmlGenerator": {
            "addItemForJSTree": {
                "original": {
                    "method_name": "addItemForJSTree",
                    "code": "private void addItemForJSTree(StringBuffer htmlStream,LowFunctionality folder,BIObject obj,boolean isRoot,boolean isInitialPath,boolean isDefaultForNew){  logger.debug(\"IN\");  String nameLabel=folder.getName();  String name=msgBuilder.getMessage(nameLabel,\"messages\",httpRequest);  name=StringUtils.escapeForHtml(name);  String codeType=folder.getCodType();  Integer id=folder.getId();  Integer parentId=null;  if (isInitialPath)   parentId=new Integer(dTreeRootId); else   parentId=folder.getParentId();  if (codeType.equalsIgnoreCase(SpagoBIConstants.LOW_FUNCTIONALITY_TYPE_CODE)) {    if (isRoot) {      htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ dTreeRootId+ \",'\"+ name+ \"', '', '', '', '', '', 'true');\\n\");    } else {      if (codeType.equalsIgnoreCase(SpagoBIConstants.LOW_FUNCTIONALITY_TYPE_CODE)) {        String imgFolder=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolder.gif\",currTheme);        String imgFolderOp=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderopen.gif\",currTheme);        try {          if (profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN) || ObjectsAccessVerifier.canDev(id,profile)) {            boolean checked=false;            if (obj != null) {              List funcs=obj.getFunctionalities();              if (funcs.contains(id) || isDefaultForNew) {                checked=true;              }            }            htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ parentId+ \",'\"+ name+ \"', '', '', '', '\"+ imgFolder+ \"', '\"+ imgFolderOp+ \"', '', '', '\"+ ObjectsTreeConstants.FUNCT_ID+ \"', '\"+ id+ \"',\"+ checked+ \");\\n\");          } else           if (ObjectsAccessVerifier.canExec(id,profile)) {            htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ parentId+ \",'\"+ name+ \"', '', '', '', '\"+ imgFolder+ \"', '\"+ imgFolderOp+ \"', '', '', '', '',false);\\n\");          }        } catch (        Exception ex) {          logger.error(\"Error in adding items \" + ex.getMessage());        }      }    }  }  if (codeType.equalsIgnoreCase(SpagoBIConstants.USER_FUNCTIONALITY_TYPE_CODE)) {    if (!privateFolderCreated) {      privateFolderCreated=true;      htmlStream.append(\"\ttreeFunctIns.add(\" + dMyFolderRootId + \", \"+ dTreeRootId+ \",'\"+ \"Personal Folders\"+ \"', '', '', '', '', '', false);\\n\");    }    String imgFolder=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderuser.gif\",currTheme);    String imgFolderOp=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderopenuser.gif\",currTheme);    try {      if (profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN) || ObjectsAccessVerifier.canDev(id,profile)) {        boolean checked=false;        if (obj != null) {          List funcs=obj.getFunctionalities();          if (funcs.contains(id))           checked=true;        }        htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ dMyFolderRootId+ \",'\"+ name+ \"', '', '', '', '\"+ imgFolder+ \"', '\"+ imgFolderOp+ \"', '', '', '\"+ ObjectsTreeConstants.FUNCT_ID+ \"', '\"+ id+ \"',\"+ checked+ \");\\n\");      } else       if (ObjectsAccessVerifier.canExec(id,profile)) {        htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ parentId+ \",'\"+ name+ \"', '', '', '', '\"+ imgFolder+ \"', '\"+ imgFolderOp+ \"', '', '', '', '',false);\\n\");      }    } catch (    Exception ex) {      logger.error(\"Error in adding items \" + ex.getMessage());    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.presentation.FunctionalitiesTreeInsertObjectHtmlGenerator.addItemForJSTree.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "addItemForJSTree",
                        "code": "private void addItemForJSTree(StringBuffer htmlStream,LowFunctionality folder,BIObject obj,boolean isRoot,boolean isInitialPath,boolean isDefaultForNew){  logger.debug(\"IN\");  String nameLabel=folder.getName();  String name=msgBuilder.getMessage(nameLabel,\"messages\",httpRequest);  name=StringUtils.escapeForHtml(name);  String codeType=folder.getCodType();  Integer id=folder.getId();  Integer parentId=null;  if (isInitialPath)   parentId=new Integer(dTreeRootId); else   parentId=folder.getParentId();  if (codeType.equalsIgnoreCase(SpagoBIConstants.LOW_FUNCTIONALITY_TYPE_CODE)) {    if (isRoot) {      htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ dTreeRootId+ \",'\"+ name+ \"', '', '', '', '', '', 'true');\\n\");    } else {      if (codeType.equalsIgnoreCase(SpagoBIConstants.LOW_FUNCTIONALITY_TYPE_CODE)) {        String imgFolder=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolder.gif\",currTheme);        String imgFolderOp=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderopen.gif\",currTheme);        try {          if (profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN) || ObjectsAccessVerifier.canDev(id,profile)) {            boolean checked=false;            if (obj != null) {              List funcs=obj.getFunctionalities();              if (funcs.contains(id) || isDefaultForNew) {                checked=true;              }            }            htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ parentId+ \",'\"+ name+ \"', '', '', '', '\"+ imgFolder+ \"', '\"+ imgFolderOp+ \"', '', '', '\"+ ObjectsTreeConstants.FUNCT_ID+ \"', '\"+ id+ \"',\"+ checked+ \");\\n\");          } else           if (ObjectsAccessVerifier.canExec(id,profile)) {            htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ parentId+ \",'\"+ name+ \"', '', '', '', '\"+ imgFolder+ \"', '\"+ imgFolderOp+ \"', '', '', '', '',false);\\n\");          }        } catch (        Exception ex) {          logger.error(\"Error in adding items \" + ex.getMessage());        }      }    }  }  if (codeType.equalsIgnoreCase(SpagoBIConstants.USER_FUNCTIONALITY_TYPE_CODE)) {    if (!privateFolderCreated) {      privateFolderCreated=true;      htmlStream.append(\"\ttreeFunctIns.add(\" + dMyFolderRootId + \", \"+ dTreeRootId+ \",'\"+ \"Personal Folders\"+ \"', '', '', '', '', '', false);\\n\");    }    String imgFolder=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderuser.gif\",currTheme);    String imgFolderOp=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderopenuser.gif\",currTheme);    addItemForJSTree_extraction_2(htmlStream,obj,name,id,parentId,imgFolder,imgFolderOp);  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.presentation.FunctionalitiesTreeInsertObjectHtmlGenerator.addItemForJSTree.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "addItemForJSTree",
                        "code": "private void addItemForJSTree(StringBuffer htmlStream,LowFunctionality folder,BIObject obj,boolean isRoot,boolean isInitialPath,boolean isDefaultForNew){  logger.debug(\"IN\");  String nameLabel=folder.getName();  String name=msgBuilder.getMessage(nameLabel,\"messages\",httpRequest);  name=StringUtils.escapeForHtml(name);  String codeType=folder.getCodType();  Integer id=folder.getId();  Integer parentId=null;  if (isInitialPath)   parentId=new Integer(dTreeRootId); else   parentId=folder.getParentId();  if (codeType.equalsIgnoreCase(SpagoBIConstants.LOW_FUNCTIONALITY_TYPE_CODE)) {    if (isRoot) {      htmlStream.append(\"\ttreeFunctIns.add(\" + id + \", \"+ dTreeRootId+ \",'\"+ name+ \"', '', '', '', '', '', 'true');\\n\");    } else {      if (codeType.equalsIgnoreCase(SpagoBIConstants.LOW_FUNCTIONALITY_TYPE_CODE)) {        String imgFolder=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolder.gif\",currTheme);        String imgFolderOp=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderopen.gif\",currTheme);        addItemForJSTree_extraction_1(htmlStream,obj,isDefaultForNew,name,id,parentId,imgFolder,imgFolderOp);      }    }  }  if (codeType.equalsIgnoreCase(SpagoBIConstants.USER_FUNCTIONALITY_TYPE_CODE)) {    if (!privateFolderCreated) {      privateFolderCreated=true;      htmlStream.append(\"\ttreeFunctIns.add(\" + dMyFolderRootId + \", \"+ dTreeRootId+ \",'\"+ \"Personal Folders\"+ \"', '', '', '', '', '', false);\\n\");    }    String imgFolder=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderuser.gif\",currTheme);    String imgFolderOp=urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/treefolderopenuser.gif\",currTheme);    addItemForJSTree_extraction_2(htmlStream,obj,name,id,parentId,imgFolder,imgFolderOp);  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.presentation.FunctionalitiesTreeInsertObjectHtmlGenerator.addItemForJSTree.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.service": {
        "DetailFunctionalityModule": {
            "modDettaglioFunctionality": {
                "original": {
                    "method_name": "modDettaglioFunctionality",
                    "code": "/**  * Inserts/Modifies the detail of a low functionality according to the user request. When a parameter use mode is modified, the <code>modifyLowFunctionality</code> method is called; when a new parameter use mode is added, the <code>insertLowFunctionality</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioFunctionality(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  HashMap<String,String> logParam=new HashMap();  try {    RequestContainer requestContainer=this.getRequestContainer();    ResponseContainer responseContainer=this.getResponseContainer();    session=requestContainer.getSessionContainer();    SessionContainer permanentSession=session.getPermanentContainer();    profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);    LowFunctionality lowFunct=recoverLowFunctionalityDetails(request,mod);    logParam.put(\"Functionality_Name\",lowFunct.getName());    response.setAttribute(FUNCTIONALITY_OBJ,lowFunct);    response.setAttribute(AdmintoolsConstants.MODALITY,mod);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          Integer parentFolderId=lowFunct.getParentId();          LowFunctionality parentFolder=null;          if (parentFolderId != null) {            parentFolder=DAOFactory.getLowFunctionalityDAO().loadLowFunctionalityByID(parentFolderId,false);          }          if (parentFolder == null) {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD\",logParam,\"KO\");            throw new Exception(\"Parent folder not available.\");          } else {            response.setAttribute(AdmintoolsConstants.PATH_PARENT,parentFolder.getPath());          }          return;        }      }    }    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      DAOFactory.getLowFunctionalityDAO().insertLowFunctionality(lowFunct,profile);      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD\",logParam,\"OK\");      } catch (      Exception e) {        e.printStackTrace();      }    } else     if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_MOD)) {      DAOFactory.getLowFunctionalityDAO().modifyLowFunctionality(lowFunct);      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.MODIFY\",logParam,\"OK\");      } catch (      Exception e) {        e.printStackTrace();      }      Set set=new HashSet();      loadRolesToErase(lowFunct,set);      DAOFactory.getLowFunctionalityDAO().deleteInconsistentRoles(set);    }  } catch (  EMFUserError eex) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    EMFErrorHandler errorHandler=getErrorHandler();    errorHandler.addError(eex);    return;  }catch (  Exception ex) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailFunctionalityModule\",\"modDettaglioFunctionality\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(AdmintoolsConstants.LOOPBACK,\"true\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.service.DetailFunctionalityModule.modDettaglioFunctionality.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "modDettaglioFunctionality",
                        "code": "/**  * Inserts/Modifies the detail of a low functionality according to the user request. When a parameter use mode is modified, the <code>modifyLowFunctionality</code> method is called; when a new parameter use mode is added, the <code>insertLowFunctionality</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioFunctionality(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  HashMap<String,String> logParam=new HashMap();  try {    RequestContainer requestContainer=this.getRequestContainer();    ResponseContainer responseContainer=this.getResponseContainer();    session=requestContainer.getSessionContainer();    SessionContainer permanentSession=session.getPermanentContainer();    profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);    LowFunctionality lowFunct=recoverLowFunctionalityDetails(request,mod);    logParam.put(\"Functionality_Name\",lowFunct.getName());    response.setAttribute(FUNCTIONALITY_OBJ,lowFunct);    response.setAttribute(AdmintoolsConstants.MODALITY,mod);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          Integer parentFolderId=lowFunct.getParentId();          LowFunctionality parentFolder=null;          if (parentFolderId != null) {            parentFolder=DAOFactory.getLowFunctionalityDAO().loadLowFunctionalityByID(parentFolderId,false);          }          if (parentFolder == null) {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD\",logParam,\"KO\");            throw new Exception(\"Parent folder not available.\");          } else {            response.setAttribute(AdmintoolsConstants.PATH_PARENT,parentFolder.getPath());          }          return;        }      }    }    modDettaglioFunctionality_extraction_2(mod,logParam,lowFunct);  } catch (  EMFUserError eex) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    EMFErrorHandler errorHandler=getErrorHandler();    errorHandler.addError(eex);    return;  }catch (  Exception ex) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailFunctionalityModule\",\"modDettaglioFunctionality\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(AdmintoolsConstants.LOOPBACK,\"true\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.service.DetailFunctionalityModule.modDettaglioFunctionality.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDettaglioFunctionality",
                        "code": "/**  * Inserts/Modifies the detail of a low functionality according to the user request. When a parameter use mode is modified, the <code>modifyLowFunctionality</code> method is called; when a new parameter use mode is added, the <code>insertLowFunctionality</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioFunctionality(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  HashMap<String,String> logParam=new HashMap();  try {    RequestContainer requestContainer=this.getRequestContainer();    ResponseContainer responseContainer=this.getResponseContainer();    session=requestContainer.getSessionContainer();    SessionContainer permanentSession=session.getPermanentContainer();    profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);    LowFunctionality lowFunct=recoverLowFunctionalityDetails(request,mod);    logParam.put(\"Functionality_Name\",lowFunct.getName());    response.setAttribute(FUNCTIONALITY_OBJ,lowFunct);    response.setAttribute(AdmintoolsConstants.MODALITY,mod);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          modDettaglioFunctionality_extraction_1(response,logParam,lowFunct);          return;        }      }    }    modDettaglioFunctionality_extraction_2(mod,logParam,lowFunct);  } catch (  EMFUserError eex) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    EMFErrorHandler errorHandler=getErrorHandler();    errorHandler.addError(eex);    return;  }catch (  Exception ex) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"FUNCTIONALITY.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailFunctionalityModule\",\"modDettaglioFunctionality\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(AdmintoolsConstants.LOOPBACK,\"true\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.analiticalmodel.functionalitytree.service.DetailFunctionalityModule.modDettaglioFunctionality.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.api": {
        "BusinessModelOpenParameters": {
            "buildParameterSessionValueList": {
                "original": {
                    "method_name": "buildParameterSessionValueList",
                    "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      if (sessionParameterValue != null && sessionParameterValue.length() > 0 && sessionParameterValue.charAt(0) == '[') {        JSONArray valuesArray=new JSONArray(sessionParameterValue);        if (valuesArray.get(0) != null) {          value=valuesArray.get(0).toString();        }      } else {        value=sessionParameterValue;      }      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.BusinessModelOpenParameters.buildParameterSessionValueList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "buildParameterSessionValueList",
                        "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=buildParameterSessionValueList_extraction_2(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.BusinessModelOpenParameters.buildParameterSessionValueList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "buildParameterSessionValueList",
                        "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIMetaModelParameter metaModelParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (metaModelParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (metaModelParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      buildParameterSessionValueList_extraction_1(valueList,valuesArray,st,values,descriptions);    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=buildParameterSessionValueList_extraction_2(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.BusinessModelOpenParameters.buildParameterSessionValueList.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "DocumentExecutionParameters": {
            "getChildrenForTreeLov": {
                "original": {
                    "method_name": "getChildrenForTreeLov",
                    "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionParameters.getChildrenForTreeLov.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionParameters.getChildrenForTreeLov.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getChildrenForTreeLov",
                        "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        addNode=getChildrenForTreeLov_extraction_1(treeLovNodeValue,addNode,treeLovParentNodeName,attribute);        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionParameters.getChildrenForTreeLov.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "DocumentExecutionResource": {
            "buildParameterSessionValueList": {
                "original": {
                    "method_name": "buildParameterSessionValueList",
                    "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIObjectParameter objParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (objParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (objParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (objParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      if (sessionParameterValue != null && sessionParameterValue.length() > 0 && sessionParameterValue.charAt(0) == '[') {        JSONArray valuesArray=new JSONArray(sessionParameterValue);        if (valuesArray.get(0) != null) {          value=valuesArray.get(0).toString();        }      } else {        value=sessionParameterValue;      }      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionResource.buildParameterSessionValueList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "buildParameterSessionValueList",
                        "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIObjectParameter objParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (objParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (objParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (objParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      int i=0;      while (st.hasMoreTokens()) {        String parDescription=st.nextToken();        descriptions.add(i,parDescription);        i++;      }      for (int j=0; j < valuesArray.length(); j++) {        String value=(String)valuesArray.get(j);        values.add(value);      }      for (int z=0; z < values.size(); z++) {        String parValue=values.get(z);        String parDescription=descriptions.size() > z ? descriptions.get(z) : parValue;        LovValue valueDef=new LovValue();        valueDef.setValue(parValue);        valueDef.setDescription(parDescription);        valueList.add(valueDef);      }    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=buildParameterSessionValueList_extraction_2(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionResource.buildParameterSessionValueList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "buildParameterSessionValueList",
                        "code": "private DefaultValuesList buildParameterSessionValueList(String sessionParameterValue,String sessionParameterDescription,BIObjectParameter objParameter){  logger.debug(\"IN\");  DefaultValuesList valueList=new DefaultValuesList();  SimpleDateFormat serverDateFormat=new SimpleDateFormat(SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\"));  if (objParameter.getParameter().getType().equals(\"DATE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    if (date.length < 2) {      throw new SpagoBIRuntimeException(\"Illegal format for Value List Date Type [\" + valueDate + \"+], unable to find symbol [#]\");    }    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      Date d=format.parse(date[0]);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (objParameter.getParameter().getType().equals(\"DATE_RANGE\")) {    String valueDate=sessionParameterValue;    String[] date=valueDate.split(\"#\");    SimpleDateFormat format=new SimpleDateFormat(date[1]);    LovValue valueDef=new LovValue();    try {      String dateRange=date[0];      String[] dateRangeArr=dateRange.split(\"_\");      String range=dateRangeArr[dateRangeArr.length - 1];      dateRange=dateRange.replace(\"_\" + range,\"\");      Date d=format.parse(dateRange);      String dateServerFormat=serverDateFormat.format(d);      valueDef.setValue(dateServerFormat + \"_\" + range);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);      return valueList;    } catch (    ParseException e) {      logger.error(\"Error while building default Value List Date Type \",e);      return null;    }  } else   if (objParameter.isMultivalue()) {    logger.debug(\"Multivalue case\");    try {      JSONArray valuesArray=new JSONArray(sessionParameterValue);      StringTokenizer st=new StringTokenizer(sessionParameterDescription,\";\",false);      ArrayList<String> values=new ArrayList<String>();      ArrayList<String> descriptions=new ArrayList<String>();      buildParameterSessionValueList_extraction_1(valueList,valuesArray,st,values,descriptions);    } catch (    Exception e) {      logger.error(\"Error in converting multivalue session values\",e);    }  } else {    logger.debug(\"NOT - multivalue case\");    try {      String value=null;      value=buildParameterSessionValueList_extraction_2(sessionParameterValue,value);      LovValue valueDef=new LovValue();      valueDef.setValue(value);      valueDef.setDescription(sessionParameterDescription);      valueList.add(valueDef);    } catch (    Exception e) {      logger.error(\"Error in converting single value session values\",e);    }  }  logger.debug(\"OUT\");  return valueList;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionResource.buildParameterSessionValueList.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "decodeRequestParameters": {
                "original": {
                    "method_name": "decodeRequestParameters",
                    "code": "private JSONObject decodeRequestParameters(JSONObject requestValParams) throws JSONException, IOException {  JSONObject toReturn=new JSONObject();  Iterator keys=requestValParams.keys();  while (keys.hasNext()) {    String key=(String)keys.next();    Object valueObj=requestValParams.get(key);    if (valueObj instanceof Number) {      String value=String.valueOf(valueObj);      if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {        toReturn.put(key,URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));      } else {        toReturn.put(key,value);      }    } else     if (valueObj instanceof String) {      String value=String.valueOf(valueObj);      if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {        toReturn.put(key,URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));      } else {        toReturn.put(key,value);      }    } else     if (valueObj instanceof JSONArray) {      JSONArray valuesLst=(JSONArray)valueObj;      JSONArray ValuesLstDecoded=new JSONArray();      for (int v=0; v < valuesLst.length(); v++) {        String value=(valuesLst.get(v) != null) ? String.valueOf(valuesLst.get(v)) : \"\";        if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {          ValuesLstDecoded.put(URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));        } else {          ValuesLstDecoded.put(value);          URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\");        }      }      toReturn.put(key,ValuesLstDecoded);    } else     if (valueObj instanceof JSONObject) {      JSONObject valuesLst=(JSONObject)valueObj;      JSONArray ValuesLstDecoded=new JSONArray();      Iterator keysObject=valuesLst.keys();      while (keysObject.hasNext()) {        String keyObj=(String)keysObject.next();        Object valueOb=valuesLst.get(keyObj);        String value=String.valueOf(valueOb);        if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {          ValuesLstDecoded.put(URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));        } else {          ValuesLstDecoded.put(value);        }      }      toReturn.put(key,ValuesLstDecoded);    }  }  return toReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionResource.decodeRequestParameters.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "decodeRequestParameters",
                        "code": "private JSONObject decodeRequestParameters(JSONObject requestValParams) throws JSONException, IOException {  JSONObject toReturn=new JSONObject();  Iterator keys=requestValParams.keys();  while (keys.hasNext()) {    String key=(String)keys.next();    Object valueObj=requestValParams.get(key);    if (valueObj instanceof Number) {      String value=String.valueOf(valueObj);      if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {        toReturn.put(key,URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));      } else {        toReturn.put(key,value);      }    } else     if (valueObj instanceof String) {      String value=String.valueOf(valueObj);      if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {        toReturn.put(key,URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));      } else {        toReturn.put(key,value);      }    } else     if (valueObj instanceof JSONArray) {      JSONArray valuesLst=(JSONArray)valueObj;      JSONArray ValuesLstDecoded=new JSONArray();      for (int v=0; v < valuesLst.length(); v++) {        String value=(valuesLst.get(v) != null) ? String.valueOf(valuesLst.get(v)) : \"\";        if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {          ValuesLstDecoded.put(URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));        } else {          ValuesLstDecoded.put(value);          URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\");        }      }      toReturn.put(key,ValuesLstDecoded);    } else     decodeRequestParameters_extraction_2(toReturn,key,valueObj);  }  return toReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionResource.decodeRequestParameters.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "decodeRequestParameters",
                        "code": "private JSONObject decodeRequestParameters(JSONObject requestValParams) throws JSONException, IOException {  JSONObject toReturn=new JSONObject();  Iterator keys=requestValParams.keys();  while (keys.hasNext()) {    String key=(String)keys.next();    Object valueObj=requestValParams.get(key);    if (valueObj instanceof Number) {      String value=String.valueOf(valueObj);      if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {        toReturn.put(key,URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));      } else {        toReturn.put(key,value);      }    } else     if (valueObj instanceof String) {      String value=String.valueOf(valueObj);      if (!value.equals(\"\") && !value.equalsIgnoreCase(\"%\")) {        toReturn.put(key,URLDecoder.decode(value.replaceAll(\"%\",\"%25\").replace(\"+\",\"%2B\"),\"UTF-8\"));      } else {        toReturn.put(key,value);      }    } else     if (valueObj instanceof JSONArray) {      decodeRequestParameters_extraction_1(toReturn,key,valueObj);    } else     decodeRequestParameters_extraction_2(toReturn,key,valueObj);  }  return toReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionResource.decodeRequestParameters.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "GetCertificatedDatasets": {
            "putActions": {
                "original": {
                    "method_name": "putActions",
                    "code": "private JSONArray putActions(IEngUserProfile profile,JSONArray datasetsJSONArray,String typeDocWizard) throws JSONException, EMFInternalError {  Engine qbeEngine=null;  try {    qbeEngine=ExecuteAdHocUtility.getQbeEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  Engine geoEngine=null;  try {    geoEngine=ExecuteAdHocUtility.getGeoreportEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  JSONObject detailAction=new JSONObject();  detailAction.put(\"name\",\"detaildataset\");  detailAction.put(\"description\",\"Dataset detail\");  JSONObject deleteAction=new JSONObject();  deleteAction.put(\"name\",\"delete\");  deleteAction.put(\"description\",\"Delete dataset\");  JSONObject georeportAction=new JSONObject();  georeportAction.put(\"name\",\"georeport\");  georeportAction.put(\"description\",\"Show Map\");  JSONObject qbeAction=new JSONObject();  qbeAction.put(\"name\",\"qbe\");  qbeAction.put(\"description\",\"Show Qbe\");  JSONObject infoAction=new JSONObject();  infoAction.put(\"name\",\"info\");  infoAction.put(\"description\",\"Show Info\");  JSONArray datasetsJSONReturn=new JSONArray();  for (int i=0; i < datasetsJSONArray.length(); i++) {    JSONArray actions=new JSONArray();    JSONObject datasetJSON=datasetsJSONArray.getJSONObject(i);    if (datasetJSON.getString(\"dsTypeCd\").equals(\"Ckan\") && !datasetJSON.has(\"id\")) {      actions.put(infoAction);    }    if (typeDocWizard == null) {      actions.put(detailAction);      if (((UserProfile)profile).getUserId().toString().equals(datasetJSON.get(\"owner\"))) {        actions.put(deleteAction);      }    }    boolean isGeoDataset=false;    if (!datasetJSON.getString(\"dsTypeCd\").equals(\"Ckan\")) {      try {        String meta=datasetJSON.getString(\"meta\");        isGeoDataset=ExecuteAdHocUtility.hasGeoHierarchy(meta);      } catch (      Exception e) {        logger.error(\"Error during check of Geo spatial column\",e);      }    }    if (isGeoDataset && geoEngine != null && typeDocWizard != null && typeDocWizard.equalsIgnoreCase(\"GEO\")) {      actions.put(georeportAction);    } else {      if (isGeoDataset && geoEngine != null) {        actions.put(georeportAction);      }    }    String dsType=datasetJSON.optString(DataSetConstants.DS_TYPE_CD);    if (dsType == null || !dsType.equals(DataSetFactory.FEDERATED_DS_TYPE)) {      if (qbeEngine != null && (typeDocWizard == null || typeDocWizard.equalsIgnoreCase(\"REPORT\"))) {        if (profile.getFunctionalities().contains(SpagoBIConstants.BUILD_QBE_QUERIES_FUNCTIONALITY)) {          actions.put(qbeAction);        }      }    }    datasetJSON.put(\"actions\",actions);    if (typeDocWizard != null && typeDocWizard.equalsIgnoreCase(\"GEO\")) {      if (geoEngine != null && isGeoDataset)       datasetsJSONReturn.put(datasetJSON);    } else     datasetsJSONReturn.put(datasetJSON);  }  return datasetsJSONReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.GetCertificatedDatasets.putActions.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "putActions",
                        "code": "private JSONArray putActions(IEngUserProfile profile,JSONArray datasetsJSONArray,String typeDocWizard) throws JSONException, EMFInternalError {  Engine qbeEngine=null;  try {    qbeEngine=ExecuteAdHocUtility.getQbeEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  Engine geoEngine=null;  try {    geoEngine=ExecuteAdHocUtility.getGeoreportEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  JSONObject detailAction=new JSONObject();  detailAction.put(\"name\",\"detaildataset\");  detailAction.put(\"description\",\"Dataset detail\");  JSONObject deleteAction=new JSONObject();  deleteAction.put(\"name\",\"delete\");  deleteAction.put(\"description\",\"Delete dataset\");  JSONObject georeportAction=new JSONObject();  georeportAction.put(\"name\",\"georeport\");  georeportAction.put(\"description\",\"Show Map\");  JSONObject qbeAction=new JSONObject();  qbeAction.put(\"name\",\"qbe\");  qbeAction.put(\"description\",\"Show Qbe\");  JSONObject infoAction=new JSONObject();  infoAction.put(\"name\",\"info\");  infoAction.put(\"description\",\"Show Info\");  JSONArray datasetsJSONReturn=new JSONArray();  for (int i=0; i < datasetsJSONArray.length(); i++) {    JSONArray actions=new JSONArray();    JSONObject datasetJSON=datasetsJSONArray.getJSONObject(i);    if (datasetJSON.getString(\"dsTypeCd\").equals(\"Ckan\") && !datasetJSON.has(\"id\")) {      actions.put(infoAction);    }    if (typeDocWizard == null) {      actions.put(detailAction);      if (((UserProfile)profile).getUserId().toString().equals(datasetJSON.get(\"owner\"))) {        actions.put(deleteAction);      }    }    boolean isGeoDataset=false;    if (!datasetJSON.getString(\"dsTypeCd\").equals(\"Ckan\")) {      try {        String meta=datasetJSON.getString(\"meta\");        isGeoDataset=ExecuteAdHocUtility.hasGeoHierarchy(meta);      } catch (      Exception e) {        logger.error(\"Error during check of Geo spatial column\",e);      }    }    if (isGeoDataset && geoEngine != null && typeDocWizard != null && typeDocWizard.equalsIgnoreCase(\"GEO\")) {      actions.put(georeportAction);    } else {      if (isGeoDataset && geoEngine != null) {        actions.put(georeportAction);      }    }    String dsType=datasetJSON.optString(DataSetConstants.DS_TYPE_CD);    putActions_extraction_2(profile,typeDocWizard,qbeEngine,geoEngine,qbeAction,datasetsJSONReturn,actions,datasetJSON,isGeoDataset,dsType);  }  return datasetsJSONReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.GetCertificatedDatasets.putActions.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "putActions",
                        "code": "private JSONArray putActions(IEngUserProfile profile,JSONArray datasetsJSONArray,String typeDocWizard) throws JSONException, EMFInternalError {  Engine qbeEngine=null;  try {    qbeEngine=ExecuteAdHocUtility.getQbeEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  Engine geoEngine=null;  try {    geoEngine=ExecuteAdHocUtility.getGeoreportEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  JSONObject detailAction=new JSONObject();  detailAction.put(\"name\",\"detaildataset\");  detailAction.put(\"description\",\"Dataset detail\");  JSONObject deleteAction=new JSONObject();  deleteAction.put(\"name\",\"delete\");  deleteAction.put(\"description\",\"Delete dataset\");  JSONObject georeportAction=new JSONObject();  georeportAction.put(\"name\",\"georeport\");  georeportAction.put(\"description\",\"Show Map\");  JSONObject qbeAction=new JSONObject();  qbeAction.put(\"name\",\"qbe\");  qbeAction.put(\"description\",\"Show Qbe\");  JSONObject infoAction=new JSONObject();  infoAction.put(\"name\",\"info\");  infoAction.put(\"description\",\"Show Info\");  JSONArray datasetsJSONReturn=new JSONArray();  for (int i=0; i < datasetsJSONArray.length(); i++) {    JSONArray actions=new JSONArray();    JSONObject datasetJSON=datasetsJSONArray.getJSONObject(i);    if (datasetJSON.getString(\"dsTypeCd\").equals(\"Ckan\") && !datasetJSON.has(\"id\")) {      actions.put(infoAction);    }    if (typeDocWizard == null) {      actions.put(detailAction);      if (((UserProfile)profile).getUserId().toString().equals(datasetJSON.get(\"owner\"))) {        actions.put(deleteAction);      }    }    boolean isGeoDataset=false;    isGeoDataset=putActions_extraction_1(typeDocWizard,geoEngine,georeportAction,actions,datasetJSON,isGeoDataset);    String dsType=datasetJSON.optString(DataSetConstants.DS_TYPE_CD);    putActions_extraction_2(profile,typeDocWizard,qbeEngine,geoEngine,qbeAction,datasetsJSONReturn,actions,datasetJSON,isGeoDataset,dsType);  }  return datasetsJSONReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.GetCertificatedDatasets.putActions.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "SelfServiceDataSetCRUD": {
            "putActions": {
                "original": {
                    "method_name": "putActions",
                    "code": "private JSONArray putActions(IEngUserProfile profile,JSONArray datasetsJSONArray,String typeDocWizard) throws JSONException, EMFInternalError {  Engine qbeEngine=null;  try {    qbeEngine=ExecuteAdHocUtility.getQbeEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  Engine geoEngine=null;  try {    geoEngine=ExecuteAdHocUtility.getGeoreportEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  JSONObject detailAction=new JSONObject();  detailAction.put(\"name\",\"detaildataset\");  detailAction.put(\"description\",\"Dataset detail\");  JSONObject deleteAction=new JSONObject();  deleteAction.put(\"name\",\"delete\");  deleteAction.put(\"description\",\"Delete dataset\");  JSONObject georeportAction=new JSONObject();  georeportAction.put(\"name\",\"georeport\");  georeportAction.put(\"description\",\"Show Map\");  JSONObject qbeAction=new JSONObject();  qbeAction.put(\"name\",\"qbe\");  qbeAction.put(\"description\",\"Show Qbe\");  JSONArray datasetsJSONReturn=new JSONArray();  for (int i=0; i < datasetsJSONArray.length(); i++) {    JSONArray actions=new JSONArray();    JSONObject datasetJSON=datasetsJSONArray.getJSONObject(i);    if (typeDocWizard == null) {      actions.put(detailAction);      if (((UserProfile)profile).getUserId().toString().equals(datasetJSON.get(\"owner\"))) {        actions.put(deleteAction);      }    }    boolean isGeoDataset=false;    if (geoEngine != null && (typeDocWizard == null || typeDocWizard.equalsIgnoreCase(\"GEO\"))) {      try {        String meta=datasetJSON.getString(\"meta\");        isGeoDataset=ExecuteAdHocUtility.hasGeoHierarchy(meta);      } catch (      Exception e) {        logger.error(\"Error during check of Geo spatial column\",e);      }      if (isGeoDataset)       actions.put(georeportAction);    }    String dsType=datasetJSON.optString(DataSetConstants.DS_TYPE_CD);    if (dsType == null || !dsType.equals(DataSetFactory.FEDERATED_DS_TYPE)) {      if (qbeEngine != null && (typeDocWizard == null || typeDocWizard.equalsIgnoreCase(\"REPORT\"))) {        if (profile.getFunctionalities().contains(SpagoBIConstants.BUILD_QBE_QUERIES_FUNCTIONALITY)) {          actions.put(qbeAction);        }      }    }    datasetJSON.put(\"actions\",actions);    if (typeDocWizard != null && typeDocWizard.equalsIgnoreCase(\"GEO\")) {      if (geoEngine != null && isGeoDataset)       datasetsJSONReturn.put(datasetJSON);    } else     datasetsJSONReturn.put(datasetJSON);  }  return datasetsJSONReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.SelfServiceDataSetCRUD.putActions.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "putActions",
                        "code": "private JSONArray putActions(IEngUserProfile profile,JSONArray datasetsJSONArray,String typeDocWizard) throws JSONException, EMFInternalError {  Engine qbeEngine=null;  try {    qbeEngine=ExecuteAdHocUtility.getQbeEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  Engine geoEngine=null;  try {    geoEngine=ExecuteAdHocUtility.getGeoreportEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  JSONObject detailAction=new JSONObject();  detailAction.put(\"name\",\"detaildataset\");  detailAction.put(\"description\",\"Dataset detail\");  JSONObject deleteAction=new JSONObject();  deleteAction.put(\"name\",\"delete\");  deleteAction.put(\"description\",\"Delete dataset\");  JSONObject georeportAction=new JSONObject();  georeportAction.put(\"name\",\"georeport\");  georeportAction.put(\"description\",\"Show Map\");  JSONObject qbeAction=new JSONObject();  qbeAction.put(\"name\",\"qbe\");  qbeAction.put(\"description\",\"Show Qbe\");  JSONArray datasetsJSONReturn=new JSONArray();  for (int i=0; i < datasetsJSONArray.length(); i++) {    JSONArray actions=new JSONArray();    JSONObject datasetJSON=datasetsJSONArray.getJSONObject(i);    if (typeDocWizard == null) {      actions.put(detailAction);      if (((UserProfile)profile).getUserId().toString().equals(datasetJSON.get(\"owner\"))) {        actions.put(deleteAction);      }    }    boolean isGeoDataset=false;    if (geoEngine != null && (typeDocWizard == null || typeDocWizard.equalsIgnoreCase(\"GEO\"))) {      try {        String meta=datasetJSON.getString(\"meta\");        isGeoDataset=ExecuteAdHocUtility.hasGeoHierarchy(meta);      } catch (      Exception e) {        logger.error(\"Error during check of Geo spatial column\",e);      }      if (isGeoDataset)       actions.put(georeportAction);    }    String dsType=datasetJSON.optString(DataSetConstants.DS_TYPE_CD);    putActions_extraction_2(profile,typeDocWizard,qbeEngine,geoEngine,qbeAction,datasetsJSONReturn,actions,datasetJSON,isGeoDataset,dsType);  }  return datasetsJSONReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.SelfServiceDataSetCRUD.putActions.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "putActions",
                        "code": "private JSONArray putActions(IEngUserProfile profile,JSONArray datasetsJSONArray,String typeDocWizard) throws JSONException, EMFInternalError {  Engine qbeEngine=null;  try {    qbeEngine=ExecuteAdHocUtility.getQbeEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  Engine geoEngine=null;  try {    geoEngine=ExecuteAdHocUtility.getGeoreportEngine();  } catch (  SpagoBIRuntimeException r) {    logger.info(\"Engine not found. \",r);  }  JSONObject detailAction=new JSONObject();  detailAction.put(\"name\",\"detaildataset\");  detailAction.put(\"description\",\"Dataset detail\");  JSONObject deleteAction=new JSONObject();  deleteAction.put(\"name\",\"delete\");  deleteAction.put(\"description\",\"Delete dataset\");  JSONObject georeportAction=new JSONObject();  georeportAction.put(\"name\",\"georeport\");  georeportAction.put(\"description\",\"Show Map\");  JSONObject qbeAction=new JSONObject();  qbeAction.put(\"name\",\"qbe\");  qbeAction.put(\"description\",\"Show Qbe\");  JSONArray datasetsJSONReturn=new JSONArray();  for (int i=0; i < datasetsJSONArray.length(); i++) {    JSONArray actions=new JSONArray();    JSONObject datasetJSON=datasetsJSONArray.getJSONObject(i);    if (typeDocWizard == null) {      actions.put(detailAction);      if (((UserProfile)profile).getUserId().toString().equals(datasetJSON.get(\"owner\"))) {        actions.put(deleteAction);      }    }    boolean isGeoDataset=false;    if (geoEngine != null && (typeDocWizard == null || typeDocWizard.equalsIgnoreCase(\"GEO\"))) {      try {        String meta=datasetJSON.getString(\"meta\");        isGeoDataset=ExecuteAdHocUtility.hasGeoHierarchy(meta);      } catch (      Exception e) {        logger.error(\"Error during check of Geo spatial column\",e);      }      putActions_extraction_1(georeportAction,actions,isGeoDataset);    }    String dsType=datasetJSON.optString(DataSetConstants.DS_TYPE_CD);    putActions_extraction_2(profile,typeDocWizard,qbeEngine,geoEngine,qbeAction,datasetsJSONReturn,actions,datasetJSON,isGeoDataset,dsType);  }  return datasetsJSONReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.SelfServiceDataSetCRUD.putActions.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.api.v2": {
        "DataSetResource": {
            "getDataStorePostWithJsonInBody": {
                "original": {
                    "method_name": "getDataStorePostWithJsonInBody",
                    "code": "@POST @Path(\"/{label}/data\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.SELF_SERVICE_DATASET_MANAGEMENT}) public String getDataStorePostWithJsonInBody(@PathParam(\"label\") String label,String body,@DefaultValue(\"-1\") @QueryParam(\"limit\") int maxRowCount,@DefaultValue(\"-1\") @QueryParam(\"offset\") int offset,@DefaultValue(\"-1\") @QueryParam(\"size\") int fetchSize,@QueryParam(\"nearRealtime\") boolean isNearRealtime,@QueryParam(\"widgetName\") String widgetName){  try {    Monitor timing=MonitorFactory.start(\"Knowage.DataSetResource.getDataStorePostWithJsonInBody:parseInputs\");    String parameters=null;    Map<String,Object> driversRuntimeMap=null;    String selections=null;    String likeSelections=null;    String aggregations=null;    String summaryRow=null;    String options=null;    JSONArray jsonIndexes=null;    if (StringUtilities.isNotEmpty(body)) {      JSONObject jsonBody=new JSONObject(body);      JSONObject jsonParameters=jsonBody.optJSONObject(\"parameters\");      parameters=jsonParameters != null ? jsonParameters.toString() : null;      JSONObject jsonDrivers=jsonBody.optJSONObject(\"drivers\");      driversRuntimeMap=DataSetUtilities.getDriversMap(jsonDrivers);      JSONObject jsonSelections=jsonBody.optJSONObject(\"selections\");      selections=jsonSelections != null ? jsonSelections.toString() : null;      JSONObject jsonLikeSelections=jsonBody.optJSONObject(\"likeSelections\");      likeSelections=jsonLikeSelections != null ? jsonLikeSelections.toString() : null;      JSONObject jsonAggregations=jsonBody.optJSONObject(\"aggregations\");      aggregations=jsonAggregations != null ? jsonAggregations.toString() : null;      JSONObject jsonSummaryRow=jsonBody.optJSONObject(\"summaryRow\");      if (jsonSummaryRow != null) {        summaryRow=jsonSummaryRow != null ? jsonSummaryRow.toString() : null;      } else {        JSONArray jsonSummaryRowArray=jsonBody.optJSONArray(\"summaryRow\");        summaryRow=jsonSummaryRowArray != null ? jsonSummaryRowArray.toString() : null;      }      JSONObject jsonOptions=jsonBody.optJSONObject(\"options\");      options=jsonOptions != null ? jsonOptions.toString() : null;      jsonIndexes=jsonBody.optJSONArray(\"indexes\");    }    Set<String> columns=null;    if (jsonIndexes != null && jsonIndexes.length() > 0) {      columns=new HashSet<String>();      for (int k=0; k < jsonIndexes.length(); k++) {        JSONArray columnsArrayTemp=jsonIndexes.getJSONObject(k).getJSONArray(\"fields\");        JSONObject columnsArray=columnsArrayTemp.getJSONObject(0);        if (columnsArray.getString(\"store\").equals(label)) {          columns.add(columnsArray.getString(\"column\"));        }      }    }    timing.stop();    return getDataStore(label,parameters,driversRuntimeMap,selections,likeSelections,maxRowCount,aggregations,summaryRow,offset,fetchSize,isNearRealtime,options,columns,widgetName);  } catch (  Exception e) {    logger.error(\"Error loading dataset data from \" + label,e);    throw new SpagoBIRestServiceException(buildLocaleFromSession(),e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSetResource.getDataStorePostWithJsonInBody.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getDataStorePostWithJsonInBody",
                        "code": "@POST @Path(\"/{label}/data\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.SELF_SERVICE_DATASET_MANAGEMENT}) public String getDataStorePostWithJsonInBody(@PathParam(\"label\") String label,String body,@DefaultValue(\"-1\") @QueryParam(\"limit\") int maxRowCount,@DefaultValue(\"-1\") @QueryParam(\"offset\") int offset,@DefaultValue(\"-1\") @QueryParam(\"size\") int fetchSize,@QueryParam(\"nearRealtime\") boolean isNearRealtime,@QueryParam(\"widgetName\") String widgetName){  try {    Monitor timing=MonitorFactory.start(\"Knowage.DataSetResource.getDataStorePostWithJsonInBody:parseInputs\");    String parameters=null;    Map<String,Object> driversRuntimeMap=null;    String selections=null;    String likeSelections=null;    String aggregations=null;    String summaryRow=null;    String options=null;    JSONArray jsonIndexes=null;    if (StringUtilities.isNotEmpty(body)) {      JSONObject jsonBody=new JSONObject(body);      JSONObject jsonParameters=jsonBody.optJSONObject(\"parameters\");      parameters=jsonParameters != null ? jsonParameters.toString() : null;      JSONObject jsonDrivers=jsonBody.optJSONObject(\"drivers\");      driversRuntimeMap=DataSetUtilities.getDriversMap(jsonDrivers);      JSONObject jsonSelections=jsonBody.optJSONObject(\"selections\");      selections=jsonSelections != null ? jsonSelections.toString() : null;      JSONObject jsonLikeSelections=jsonBody.optJSONObject(\"likeSelections\");      likeSelections=jsonLikeSelections != null ? jsonLikeSelections.toString() : null;      JSONObject jsonAggregations=jsonBody.optJSONObject(\"aggregations\");      aggregations=jsonAggregations != null ? jsonAggregations.toString() : null;      JSONObject jsonSummaryRow=jsonBody.optJSONObject(\"summaryRow\");      if (jsonSummaryRow != null) {        summaryRow=jsonSummaryRow != null ? jsonSummaryRow.toString() : null;      } else {        JSONArray jsonSummaryRowArray=jsonBody.optJSONArray(\"summaryRow\");        summaryRow=jsonSummaryRowArray != null ? jsonSummaryRowArray.toString() : null;      }      JSONObject jsonOptions=jsonBody.optJSONObject(\"options\");      options=jsonOptions != null ? jsonOptions.toString() : null;      jsonIndexes=jsonBody.optJSONArray(\"indexes\");    }    Set<String> columns=null;    columns=getDataStorePostWithJsonInBody_extraction_2(label,timing,jsonIndexes,columns);    return getDataStore(label,parameters,driversRuntimeMap,selections,likeSelections,maxRowCount,aggregations,summaryRow,offset,fetchSize,isNearRealtime,options,columns,widgetName);  } catch (  Exception e) {    logger.error(\"Error loading dataset data from \" + label,e);    throw new SpagoBIRestServiceException(buildLocaleFromSession(),e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSetResource.getDataStorePostWithJsonInBody.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getDataStorePostWithJsonInBody",
                        "code": "@POST @Path(\"/{label}/data\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.SELF_SERVICE_DATASET_MANAGEMENT}) public String getDataStorePostWithJsonInBody(@PathParam(\"label\") String label,String body,@DefaultValue(\"-1\") @QueryParam(\"limit\") int maxRowCount,@DefaultValue(\"-1\") @QueryParam(\"offset\") int offset,@DefaultValue(\"-1\") @QueryParam(\"size\") int fetchSize,@QueryParam(\"nearRealtime\") boolean isNearRealtime,@QueryParam(\"widgetName\") String widgetName){  try {    Monitor timing=MonitorFactory.start(\"Knowage.DataSetResource.getDataStorePostWithJsonInBody:parseInputs\");    String parameters=null;    Map<String,Object> driversRuntimeMap=null;    String selections=null;    String likeSelections=null;    String aggregations=null;    String summaryRow=null;    String options=null;    JSONArray jsonIndexes=null;    if (StringUtilities.isNotEmpty(body)) {      JSONObject jsonBody=new JSONObject(body);      JSONObject jsonParameters=jsonBody.optJSONObject(\"parameters\");      parameters=jsonParameters != null ? jsonParameters.toString() : null;      JSONObject jsonDrivers=jsonBody.optJSONObject(\"drivers\");      driversRuntimeMap=DataSetUtilities.getDriversMap(jsonDrivers);      JSONObject jsonSelections=jsonBody.optJSONObject(\"selections\");      selections=jsonSelections != null ? jsonSelections.toString() : null;      JSONObject jsonLikeSelections=jsonBody.optJSONObject(\"likeSelections\");      likeSelections=jsonLikeSelections != null ? jsonLikeSelections.toString() : null;      JSONObject jsonAggregations=jsonBody.optJSONObject(\"aggregations\");      aggregations=jsonAggregations != null ? jsonAggregations.toString() : null;      JSONObject jsonSummaryRow=jsonBody.optJSONObject(\"summaryRow\");      summaryRow=getDataStorePostWithJsonInBody_extraction_1(jsonBody,jsonSummaryRow);      JSONObject jsonOptions=jsonBody.optJSONObject(\"options\");      options=jsonOptions != null ? jsonOptions.toString() : null;      jsonIndexes=jsonBody.optJSONArray(\"indexes\");    }    Set<String> columns=null;    columns=getDataStorePostWithJsonInBody_extraction_2(label,timing,jsonIndexes,columns);    return getDataStore(label,parameters,driversRuntimeMap,selections,likeSelections,maxRowCount,aggregations,summaryRow,offset,fetchSize,isNearRealtime,options,columns,widgetName);  } catch (  Exception e) {    logger.error(\"Error loading dataset data from \" + label,e);    throw new SpagoBIRestServiceException(buildLocaleFromSession(),e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSetResource.getDataStorePostWithJsonInBody.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "getDataStorePreview": {
                "original": {
                    "method_name": "getDataStorePreview",
                    "code": "@POST @Path(\"/{label}/preview\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.SELF_SERVICE_DATASET_MANAGEMENT}) public String getDataStorePreview(@PathParam(\"label\") String label,String body){  try {    Monitor timing=MonitorFactory.start(\"Knowage.DataSetResource.getDataStorePreview:parseInputs\");    String aggregations=null;    String parameters=null;    Map<String,Object> driversRuntimeMap=null;    String likeSelections=null;    int start=-1;    int limit=-1;    Set<String> columns=null;    if (StringUtilities.isNotEmpty(body)) {      JSONObject jsonBody=new JSONObject(body);      if (jsonBody.has(\"start\")) {        start=jsonBody.getInt(\"start\");      }      if (jsonBody.has(\"limit\")) {        limit=jsonBody.getInt(\"limit\");      }      JSONArray jsonFilters=jsonBody.optJSONArray(\"filters\");      if (jsonFilters != null && jsonFilters.length() > 0) {        JSONObject jsonLikeSelections=new JSONObject();        for (int i=0; i < jsonFilters.length(); i++) {          JSONObject jsonFilter=jsonFilters.getJSONObject(i);          jsonLikeSelections.put(jsonFilter.getString(\"column\"),jsonFilter.get(\"value\"));        }        likeSelections=new JSONObject().put(label,jsonLikeSelections).toString();      }      String sortingColumn=null;      String sortingType=null;      if (jsonBody.has(\"sorting\")) {        JSONObject jsonSorting=jsonBody.optJSONObject(\"sorting\");        sortingColumn=jsonSorting.getString(\"column\");        sortingType=jsonSorting.getString(\"order\");      }      JSONArray jsonMeasures=new JSONArray();      JSONArray jsonCategories=new JSONArray();      IDataSet dataSet=getDatasetManagementAPI().getDataSet(label);      IMetaData metadata=dataSet.getMetadata();      for (int i=0; i < metadata.getFieldCount(); i++) {        IFieldMetaData fieldMetaData=metadata.getFieldMeta(i);        JSONObject json=new JSONObject();        String alias=fieldMetaData.getAlias();        json.put(\"id\",alias);        json.put(\"alias\",alias);        json.put(\"columnName\",alias);        json.put(\"orderType\",alias.equals(sortingColumn) ? sortingType : \"\");        json.put(\"orderColumn\",alias);        json.put(\"funct\",\"NONE\");        if (\"ATTRIBUTE\".equals(fieldMetaData.getFieldType())) {          jsonCategories.put(json);        } else {          jsonMeasures.put(json);        }      }      JSONObject jsonAggregations=new JSONObject();      jsonAggregations.put(\"measures\",jsonMeasures);      jsonAggregations.put(\"categories\",jsonCategories);      aggregations=jsonAggregations.toString();      JSONArray jsonPars=jsonBody.optJSONArray(\"pars\");      JSONObject jsonObject=DataSetUtilities.parametersJSONArray2JSONObject(dataSet,jsonPars);      parameters=jsonObject.toString();      JSONObject jsonDrivers=jsonBody.optJSONObject(\"drivers\");      driversRuntimeMap=DataSetUtilities.getDriversMap(jsonDrivers);      JSONArray jsonIndexes=jsonBody.optJSONArray(\"indexes\");      if (jsonIndexes != null && jsonIndexes.length() > 0) {        for (int k=0; k < jsonIndexes.length(); k++) {          JSONArray columnsArrayTemp=jsonIndexes.getJSONObject(k).getJSONArray(\"fields\");          JSONObject columnsArray=columnsArrayTemp.getJSONObject(0);          if (columnsArray.getString(\"store\").equals(label)) {            columns=new HashSet<String>(columnsArray.length());            columns.add(columnsArray.getString(\"column\"));          }        }      }    }    timing.stop();    return getDataStore(label,parameters,driversRuntimeMap,null,likeSelections,-1,aggregations,null,start,limit,columns,null);  } catch (  JSONException e) {    throw new SpagoBIRestServiceException(buildLocaleFromSession(),e);  }catch (  Exception e) {    logger.error(\"Error while previewing dataset \" + label,e);    throw new SpagoBIRuntimeException(\"Error while previewing dataset \" + label + \". \"+ e.getMessage(),e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSetResource.getDataStorePreview.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getDataStorePreview",
                        "code": "@POST @Path(\"/{label}/preview\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.SELF_SERVICE_DATASET_MANAGEMENT}) public String getDataStorePreview(@PathParam(\"label\") String label,String body){  try {    Monitor timing=MonitorFactory.start(\"Knowage.DataSetResource.getDataStorePreview:parseInputs\");    String aggregations=null;    String parameters=null;    Map<String,Object> driversRuntimeMap=null;    String likeSelections=null;    int start=-1;    int limit=-1;    Set<String> columns=null;    if (StringUtilities.isNotEmpty(body)) {      JSONObject jsonBody=new JSONObject(body);      if (jsonBody.has(\"start\")) {        start=jsonBody.getInt(\"start\");      }      if (jsonBody.has(\"limit\")) {        limit=jsonBody.getInt(\"limit\");      }      JSONArray jsonFilters=jsonBody.optJSONArray(\"filters\");      if (jsonFilters != null && jsonFilters.length() > 0) {        JSONObject jsonLikeSelections=new JSONObject();        for (int i=0; i < jsonFilters.length(); i++) {          JSONObject jsonFilter=jsonFilters.getJSONObject(i);          jsonLikeSelections.put(jsonFilter.getString(\"column\"),jsonFilter.get(\"value\"));        }        likeSelections=new JSONObject().put(label,jsonLikeSelections).toString();      }      String sortingColumn=null;      String sortingType=null;      if (jsonBody.has(\"sorting\")) {        JSONObject jsonSorting=jsonBody.optJSONObject(\"sorting\");        sortingColumn=jsonSorting.getString(\"column\");        sortingType=jsonSorting.getString(\"order\");      }      JSONArray jsonMeasures=new JSONArray();      JSONArray jsonCategories=new JSONArray();      IDataSet dataSet=getDatasetManagementAPI().getDataSet(label);      IMetaData metadata=dataSet.getMetadata();      for (int i=0; i < metadata.getFieldCount(); i++) {        IFieldMetaData fieldMetaData=metadata.getFieldMeta(i);        JSONObject json=new JSONObject();        String alias=fieldMetaData.getAlias();        json.put(\"id\",alias);        json.put(\"alias\",alias);        json.put(\"columnName\",alias);        json.put(\"orderType\",alias.equals(sortingColumn) ? sortingType : \"\");        json.put(\"orderColumn\",alias);        json.put(\"funct\",\"NONE\");        if (\"ATTRIBUTE\".equals(fieldMetaData.getFieldType())) {          jsonCategories.put(json);        } else {          jsonMeasures.put(json);        }      }      JSONObject jsonAggregations=new JSONObject();      jsonAggregations.put(\"measures\",jsonMeasures);      jsonAggregations.put(\"categories\",jsonCategories);      aggregations=jsonAggregations.toString();      JSONArray jsonPars=jsonBody.optJSONArray(\"pars\");      JSONObject jsonObject=DataSetUtilities.parametersJSONArray2JSONObject(dataSet,jsonPars);      parameters=jsonObject.toString();      JSONObject jsonDrivers=jsonBody.optJSONObject(\"drivers\");      driversRuntimeMap=DataSetUtilities.getDriversMap(jsonDrivers);      columns=getDataStorePreview_extraction_2(label,columns,jsonBody);    }    timing.stop();    return getDataStore(label,parameters,driversRuntimeMap,null,likeSelections,-1,aggregations,null,start,limit,columns,null);  } catch (  JSONException e) {    throw new SpagoBIRestServiceException(buildLocaleFromSession(),e);  }catch (  Exception e) {    logger.error(\"Error while previewing dataset \" + label,e);    throw new SpagoBIRuntimeException(\"Error while previewing dataset \" + label + \". \"+ e.getMessage(),e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSetResource.getDataStorePreview.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getDataStorePreview",
                        "code": "@POST @Path(\"/{label}/preview\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.SELF_SERVICE_DATASET_MANAGEMENT}) public String getDataStorePreview(@PathParam(\"label\") String label,String body){  try {    Monitor timing=MonitorFactory.start(\"Knowage.DataSetResource.getDataStorePreview:parseInputs\");    String aggregations=null;    String parameters=null;    Map<String,Object> driversRuntimeMap=null;    String likeSelections=null;    int start=-1;    int limit=-1;    Set<String> columns=null;    if (StringUtilities.isNotEmpty(body)) {      JSONObject jsonBody=new JSONObject(body);      if (jsonBody.has(\"start\")) {        start=jsonBody.getInt(\"start\");      }      if (jsonBody.has(\"limit\")) {        limit=jsonBody.getInt(\"limit\");      }      JSONArray jsonFilters=jsonBody.optJSONArray(\"filters\");      if (jsonFilters != null && jsonFilters.length() > 0) {        JSONObject jsonLikeSelections=new JSONObject();        for (int i=0; i < jsonFilters.length(); i++) {          JSONObject jsonFilter=jsonFilters.getJSONObject(i);          jsonLikeSelections.put(jsonFilter.getString(\"column\"),jsonFilter.get(\"value\"));        }        likeSelections=new JSONObject().put(label,jsonLikeSelections).toString();      }      String sortingColumn=null;      String sortingType=null;      if (jsonBody.has(\"sorting\")) {        JSONObject jsonSorting=jsonBody.optJSONObject(\"sorting\");        sortingColumn=jsonSorting.getString(\"column\");        sortingType=jsonSorting.getString(\"order\");      }      JSONArray jsonMeasures=new JSONArray();      JSONArray jsonCategories=new JSONArray();      IDataSet dataSet=getDatasetManagementAPI().getDataSet(label);      IMetaData metadata=dataSet.getMetadata();      aggregations=getDataStorePreview_extraction_1(sortingColumn,sortingType,jsonMeasures,jsonCategories,metadata);      JSONArray jsonPars=jsonBody.optJSONArray(\"pars\");      JSONObject jsonObject=DataSetUtilities.parametersJSONArray2JSONObject(dataSet,jsonPars);      parameters=jsonObject.toString();      JSONObject jsonDrivers=jsonBody.optJSONObject(\"drivers\");      driversRuntimeMap=DataSetUtilities.getDriversMap(jsonDrivers);      columns=getDataStorePreview_extraction_2(label,columns,jsonBody);    }    timing.stop();    return getDataStore(label,parameters,driversRuntimeMap,null,likeSelections,-1,aggregations,null,start,limit,columns,null);  } catch (  JSONException e) {    throw new SpagoBIRestServiceException(buildLocaleFromSession(),e);  }catch (  Exception e) {    logger.error(\"Error while previewing dataset \" + label,e);    throw new SpagoBIRuntimeException(\"Error while previewing dataset \" + label + \". \"+ e.getMessage(),e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSetResource.getDataStorePreview.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "DataSourceResource": {
            "testDataSource": {
                "original": {
                    "method_name": "testDataSource",
                    "code": "@POST @Path(\"/test\") @Consumes(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.DATASOURCE_MANAGEMENT}) public String testDataSource(IDataSource dataSource) throws Exception {  logger.debug(\"IN\");  String url=dataSource.getUrlConnection();  String user=dataSource.getUser();  String pwd=dataSource.getPwd();  String driver=dataSource.getDriver();  String schemaAttr=dataSource.getSchemaAttribute();  String jndi=dataSource.getJndi();  IEngUserProfile profile=getUserProfile();  String schema=(String)profile.getUserAttribute(schemaAttr);  logger.debug(\"schema:\" + schema);  if (jndi != null && jndi.length() > 0) {    String jndiName=schema == null ? jndi : jndi + schema;    try {      logger.debug(\"Lookup JNDI name:\" + jndiName);      Context ctx=new InitialContext();      javax.sql.DataSource ds=(javax.sql.DataSource)ctx.lookup(jndiName);      try (Connection connection=ds.getConnection()){        logger.debug(\"Connection performed successfully\");      }     } catch (    AuthenticationException e) {      logger.error(\"Error while attempting to reacquire the authentication information on provided JNDI name\",e);      throw new SpagoBIServiceException(SERVICE_NAME,e);    }catch (    NamingException e) {      logger.error(\"Error with provided JNDI name. Can't find the database with that name.\",e);      throw new SpagoBIServiceException(SERVICE_NAME,e);    }catch (    Exception e) {      logger.error(\"Error with provided JNDI name.\",e);      throw new SpagoBIServiceException(SERVICE_NAME,e);    }  } else {    if (driver.toLowerCase().contains(\"mongo\")) {      logger.debug(\"Checking the connection for MONGODB\");      MongoClient mongoClient=null;      try {        int databaseNameStart=url.lastIndexOf(\"/\");        if (databaseNameStart < 0) {          logger.error(\"Error connecting to the mongoDB. No database selected\");        }        String databaseUrl=url.substring(0,databaseNameStart);        String databaseName=url.substring(databaseNameStart + 1);        mongoClient=new MongoClient(databaseUrl);        DB database=mongoClient.getDB(databaseName);        database.getCollectionNames();        logger.debug(\"Connection OK\");        return new JSONObject().toString();      } catch (      Exception e) {        logger.error(\"Error connecting to the mongoDB\",e);      } finally {        if (mongoClient != null) {          mongoClient.close();        }      }    } else {      try {        Class.forName(driver);      } catch (      ClassNotFoundException e) {        logger.error(\"Driver not found\",e);        throw new SpagoBIRestServiceException(\"Driver not found: \" + driver,buildLocaleFromSession(),e);      }      try (Connection connection=DriverManager.getConnection(url,user,pwd)){        logger.debug(\"Connection performed successfully\");      }     }  }  return new JSONObject().toString();}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSourceResource.testDataSource.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "testDataSource",
                        "code": "@POST @Path(\"/test\") @Consumes(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.DATASOURCE_MANAGEMENT}) public String testDataSource(IDataSource dataSource) throws Exception {  logger.debug(\"IN\");  String url=dataSource.getUrlConnection();  String user=dataSource.getUser();  String pwd=dataSource.getPwd();  String driver=dataSource.getDriver();  String schemaAttr=dataSource.getSchemaAttribute();  String jndi=dataSource.getJndi();  IEngUserProfile profile=getUserProfile();  String schema=(String)profile.getUserAttribute(schemaAttr);  logger.debug(\"schema:\" + schema);  if (jndi != null && jndi.length() > 0) {    String jndiName=schema == null ? jndi : jndi + schema;    try {      logger.debug(\"Lookup JNDI name:\" + jndiName);      Context ctx=new InitialContext();      javax.sql.DataSource ds=(javax.sql.DataSource)ctx.lookup(jndiName);      try (Connection connection=ds.getConnection()){        logger.debug(\"Connection performed successfully\");      }     } catch (    AuthenticationException e) {      logger.error(\"Error while attempting to reacquire the authentication information on provided JNDI name\",e);      throw new SpagoBIServiceException(SERVICE_NAME,e);    }catch (    NamingException e) {      logger.error(\"Error with provided JNDI name. Can't find the database with that name.\",e);      throw new SpagoBIServiceException(SERVICE_NAME,e);    }catch (    Exception e) {      logger.error(\"Error with provided JNDI name.\",e);      throw new SpagoBIServiceException(SERVICE_NAME,e);    }  } else {    if (driver.toLowerCase().contains(\"mongo\")) {      logger.debug(\"Checking the connection for MONGODB\");      MongoClient mongoClient=null;      try {        int databaseNameStart=url.lastIndexOf(\"/\");        testDataSource_extraction_2(databaseNameStart);        String databaseUrl=url.substring(0,databaseNameStart);        String databaseName=url.substring(databaseNameStart + 1);        mongoClient=new MongoClient(databaseUrl);        DB database=mongoClient.getDB(databaseName);        database.getCollectionNames();        logger.debug(\"Connection OK\");        return new JSONObject().toString();      } catch (      Exception e) {        logger.error(\"Error connecting to the mongoDB\",e);      } finally {        if (mongoClient != null) {          mongoClient.close();        }      }    } else {      try {        Class.forName(driver);      } catch (      ClassNotFoundException e) {        logger.error(\"Driver not found\",e);        throw new SpagoBIRestServiceException(\"Driver not found: \" + driver,buildLocaleFromSession(),e);      }      try (Connection connection=DriverManager.getConnection(url,user,pwd)){        logger.debug(\"Connection performed successfully\");      }     }  }  return new JSONObject().toString();}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSourceResource.testDataSource.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "testDataSource",
                        "code": "@POST @Path(\"/test\") @Consumes(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.DATASOURCE_MANAGEMENT}) public String testDataSource(IDataSource dataSource) throws Exception {  logger.debug(\"IN\");  String url=dataSource.getUrlConnection();  String user=dataSource.getUser();  String pwd=dataSource.getPwd();  String driver=dataSource.getDriver();  String schemaAttr=dataSource.getSchemaAttribute();  String jndi=dataSource.getJndi();  IEngUserProfile profile=getUserProfile();  String schema=(String)profile.getUserAttribute(schemaAttr);  logger.debug(\"schema:\" + schema);  if (jndi != null && jndi.length() > 0) {    testDataSource_extraction_1(jndi,schema);  } else {    if (driver.toLowerCase().contains(\"mongo\")) {      logger.debug(\"Checking the connection for MONGODB\");      MongoClient mongoClient=null;      try {        int databaseNameStart=url.lastIndexOf(\"/\");        testDataSource_extraction_2(databaseNameStart);        String databaseUrl=url.substring(0,databaseNameStart);        String databaseName=url.substring(databaseNameStart + 1);        mongoClient=new MongoClient(databaseUrl);        DB database=mongoClient.getDB(databaseName);        database.getCollectionNames();        logger.debug(\"Connection OK\");        return new JSONObject().toString();      } catch (      Exception e) {        logger.error(\"Error connecting to the mongoDB\",e);      } finally {        if (mongoClient != null) {          mongoClient.close();        }      }    } else {      try {        Class.forName(driver);      } catch (      ClassNotFoundException e) {        logger.error(\"Driver not found\",e);        throw new SpagoBIRestServiceException(\"Driver not found: \" + driver,buildLocaleFromSession(),e);      }      try (Connection connection=DriverManager.getConnection(url,user,pwd)){        logger.debug(\"Connection performed successfully\");      }     }  }  return new JSONObject().toString();}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.v2.DataSourceResource.testDataSource.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.check.service": {
        "CheckLinksModule": {
            "getList": {
                "original": {
                    "method_name": "getList",
                    "code": "public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  logger.debug(\"IN\");  RequestContainer requestContainer=this.getRequestContainer();  SessionContainer sessionContainer=requestContainer.getSessionContainer();  SessionContainer permanentSession=sessionContainer.getPermanentContainer();  profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  String currentFieldOrder=(request.getAttribute(\"FIELD_ORDER\") == null || ((String)request.getAttribute(\"FIELD_ORDER\")).equals(\"\")) ? \"\" : (String)request.getAttribute(\"FIELD_ORDER\");  if (currentFieldOrder.equals(\"\")) {    currentFieldOrder=\"label\";    request.delAttribute(\"FIELD_ORDER\");    request.setAttribute(\"FIELD_ORDER\",currentFieldOrder);  }  String currentTypOrder=(request.getAttribute(\"TYPE_ORDER\") == null || ((String)request.getAttribute(\"TYPE_ORDER\")).equals(\"\")) ? \"\" : (String)request.getAttribute(\"TYPE_ORDER\");  if (currentTypOrder.equals(\"\")) {    currentTypOrder=\" ASC\";    request.delAttribute(\"TYPE_ORDER\");    request.setAttribute(\"TYPE_ORDER\",currentTypOrder);  }  String modality=ChannelUtilities.getPreferenceValue(requestContainer,BIObjectsModule.MODALITY,BIObjectsModule.ENTIRE_TREE);  if (modality != null && modality.equalsIgnoreCase(BIObjectsModule.FILTER_TREE)) {    initialPath=(String)ChannelUtilities.getPreferenceValue(requestContainer,TreeObjectsModule.PATH_SUBTREE,\"\");  }  String objIdStr=(String)sessionContainer.getAttribute(\"SUBJECT_ID\");  Integer objId=null;  if (objIdStr != null)   objId=new Integer(objIdStr);  response.setAttribute(\"SUBJECT_ID\",objIdStr);  PaginatorIFace paginator=new GenericPaginator();  IBIObjectDAO objDAO=DAOFactory.getBIObjectDAO();  List objectsList=null;  if (initialPath != null && !initialPath.trim().equals(\"\")) {    objectsList=objDAO.loadAllBIObjectsFromInitialPath(initialPath,currentFieldOrder + \" \" + currentTypOrder);  } else {    objectsList=objDAO.loadAllBIObjects(currentFieldOrder + \" \" + currentTypOrder);  }  String checked=(String)request.getAttribute(\"checked\");  if (checked == null)   checked=(String)request.getAttribute(\"optChecked\");  if (checked == null) {    checked=\"true\";  }  request.delAttribute(\"optChecked\");  request.setAttribute(\"optChecked\",checked);  response.setAttribute(\"optChecked\",(String)request.getAttribute(\"optChecked\"));  if (checked.equals(\"true\")) {    for (Iterator it=objectsList.iterator(); it.hasNext(); ) {      BIObject obj=(BIObject)it.next();      if (objId != null && obj.getId().equals(objId))       continue;      if (isCheckedObject(obj.getId().toString())) {        SourceBean rowSB=null;        if (profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN)) {          rowSB=makeAdminListRow(obj);        } else         if (!profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN) && profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_DEV)) {          rowSB=makeDevListRow(obj);        }        if (rowSB != null)         paginator.addRow(rowSB);      }    }  } else   if (checked.equals(\"false\")) {    for (Iterator it=objectsList.iterator(); it.hasNext(); ) {      BIObject obj=(BIObject)it.next();      if (objId != null && obj.getId().equals(objId))       continue;      SourceBean rowSB=null;      if (profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN)) {        rowSB=makeAdminListRow(obj);      } else       if (!profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN) && profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_DEV)) {        rowSB=makeDevListRow(obj);      }      if (rowSB != null)       paginator.addRow(rowSB);    }  }  ListIFace list=new GenericList();  list.setPaginator(paginator);  logger.debug(\"OUT\");  return list;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.check.service.CheckLinksModule.getList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getList",
                        "code": "public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  logger.debug(\"IN\");  RequestContainer requestContainer=this.getRequestContainer();  SessionContainer sessionContainer=requestContainer.getSessionContainer();  SessionContainer permanentSession=sessionContainer.getPermanentContainer();  profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  String currentFieldOrder=(request.getAttribute(\"FIELD_ORDER\") == null || ((String)request.getAttribute(\"FIELD_ORDER\")).equals(\"\")) ? \"\" : (String)request.getAttribute(\"FIELD_ORDER\");  if (currentFieldOrder.equals(\"\")) {    currentFieldOrder=\"label\";    request.delAttribute(\"FIELD_ORDER\");    request.setAttribute(\"FIELD_ORDER\",currentFieldOrder);  }  String currentTypOrder=(request.getAttribute(\"TYPE_ORDER\") == null || ((String)request.getAttribute(\"TYPE_ORDER\")).equals(\"\")) ? \"\" : (String)request.getAttribute(\"TYPE_ORDER\");  if (currentTypOrder.equals(\"\")) {    currentTypOrder=\" ASC\";    request.delAttribute(\"TYPE_ORDER\");    request.setAttribute(\"TYPE_ORDER\",currentTypOrder);  }  String modality=ChannelUtilities.getPreferenceValue(requestContainer,BIObjectsModule.MODALITY,BIObjectsModule.ENTIRE_TREE);  if (modality != null && modality.equalsIgnoreCase(BIObjectsModule.FILTER_TREE)) {    initialPath=(String)ChannelUtilities.getPreferenceValue(requestContainer,TreeObjectsModule.PATH_SUBTREE,\"\");  }  String objIdStr=(String)sessionContainer.getAttribute(\"SUBJECT_ID\");  Integer objId=null;  if (objIdStr != null)   objId=new Integer(objIdStr);  response.setAttribute(\"SUBJECT_ID\",objIdStr);  PaginatorIFace paginator=new GenericPaginator();  IBIObjectDAO objDAO=DAOFactory.getBIObjectDAO();  List objectsList=null;  if (initialPath != null && !initialPath.trim().equals(\"\")) {    objectsList=objDAO.loadAllBIObjectsFromInitialPath(initialPath,currentFieldOrder + \" \" + currentTypOrder);  } else {    objectsList=objDAO.loadAllBIObjects(currentFieldOrder + \" \" + currentTypOrder);  }  String checked=(String)request.getAttribute(\"checked\");  if (checked == null)   checked=(String)request.getAttribute(\"optChecked\");  if (checked == null) {    checked=\"true\";  }  request.delAttribute(\"optChecked\");  request.setAttribute(\"optChecked\",checked);  response.setAttribute(\"optChecked\",(String)request.getAttribute(\"optChecked\"));  if (checked.equals(\"true\")) {    for (Iterator it=objectsList.iterator(); it.hasNext(); ) {      BIObject obj=(BIObject)it.next();      if (objId != null && obj.getId().equals(objId))       continue;      if (isCheckedObject(obj.getId().toString())) {        SourceBean rowSB=null;        if (profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN)) {          rowSB=makeAdminListRow(obj);        } else         if (!profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_ADMIN) && profile.isAbleToExecuteAction(SpagoBIConstants.DOCUMENT_MANAGEMENT_DEV)) {          rowSB=makeDevListRow(obj);        }        if (rowSB != null)         paginator.addRow(rowSB);      }    }  } else   getList_extraction_2(objId,paginator,objectsList,checked);  ListIFace list=new GenericList();  list.setPaginator(paginator);  logger.debug(\"OUT\");  return list;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.check.service.CheckLinksModule.getList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getList",
                        "code": "public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  logger.debug(\"IN\");  RequestContainer requestContainer=this.getRequestContainer();  SessionContainer sessionContainer=requestContainer.getSessionContainer();  SessionContainer permanentSession=sessionContainer.getPermanentContainer();  profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  String currentFieldOrder=(request.getAttribute(\"FIELD_ORDER\") == null || ((String)request.getAttribute(\"FIELD_ORDER\")).equals(\"\")) ? \"\" : (String)request.getAttribute(\"FIELD_ORDER\");  if (currentFieldOrder.equals(\"\")) {    currentFieldOrder=\"label\";    request.delAttribute(\"FIELD_ORDER\");    request.setAttribute(\"FIELD_ORDER\",currentFieldOrder);  }  String currentTypOrder=(request.getAttribute(\"TYPE_ORDER\") == null || ((String)request.getAttribute(\"TYPE_ORDER\")).equals(\"\")) ? \"\" : (String)request.getAttribute(\"TYPE_ORDER\");  if (currentTypOrder.equals(\"\")) {    currentTypOrder=\" ASC\";    request.delAttribute(\"TYPE_ORDER\");    request.setAttribute(\"TYPE_ORDER\",currentTypOrder);  }  String modality=ChannelUtilities.getPreferenceValue(requestContainer,BIObjectsModule.MODALITY,BIObjectsModule.ENTIRE_TREE);  if (modality != null && modality.equalsIgnoreCase(BIObjectsModule.FILTER_TREE)) {    initialPath=(String)ChannelUtilities.getPreferenceValue(requestContainer,TreeObjectsModule.PATH_SUBTREE,\"\");  }  String objIdStr=(String)sessionContainer.getAttribute(\"SUBJECT_ID\");  Integer objId=null;  if (objIdStr != null)   objId=new Integer(objIdStr);  response.setAttribute(\"SUBJECT_ID\",objIdStr);  PaginatorIFace paginator=new GenericPaginator();  IBIObjectDAO objDAO=DAOFactory.getBIObjectDAO();  List objectsList=null;  if (initialPath != null && !initialPath.trim().equals(\"\")) {    objectsList=objDAO.loadAllBIObjectsFromInitialPath(initialPath,currentFieldOrder + \" \" + currentTypOrder);  } else {    objectsList=objDAO.loadAllBIObjects(currentFieldOrder + \" \" + currentTypOrder);  }  String checked=(String)request.getAttribute(\"checked\");  if (checked == null)   checked=(String)request.getAttribute(\"optChecked\");  if (checked == null) {    checked=\"true\";  }  request.delAttribute(\"optChecked\");  request.setAttribute(\"optChecked\",checked);  response.setAttribute(\"optChecked\",(String)request.getAttribute(\"optChecked\"));  if (checked.equals(\"true\")) {    getList_extraction_1(objId,paginator,objectsList);  } else   getList_extraction_2(objId,paginator,objectsList,checked);  ListIFace list=new GenericList();  list.setPaginator(paginator);  logger.debug(\"OUT\");  return list;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.check.service.CheckLinksModule.getList.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service": {
        "ListTestLovModule": {
            "getList": {
                "original": {
                    "method_name": "getList",
                    "code": "@Override public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  ModalitiesValue modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  profile=(IEngUserProfile)session.getAttribute(SpagoBIConstants.USER_PROFILE_FOR_TEST);  if (profile == null) {    SessionContainer permSess=session.getPermanentContainer();    profile=(IEngUserProfile)permSess.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  }  SourceBean rowsSourceBean=null;  List colNames=new ArrayList();  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    QueryDetail qd=QueryDetail.fromXML(looProvider);    String datasource=qd.getDataSource();    String statement=qd.getQueryDefinition();    try {      statement=StringUtilities.substituteProfileAttributesInString(statement,profile);      rowsSourceBean=(SourceBean)executeSelect(getRequestContainer(),getResponseContainer(),datasource,statement,colNames);    } catch (    Exception e) {      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      int startIndex=stacktrace.indexOf(\"java.sql.\");      int endIndex=stacktrace.indexOf(\"\\n\\tat \",startIndex);      if (endIndex == -1)       endIndex=stacktrace.indexOf(\" at \",startIndex);      if (startIndex != -1 && endIndex != -1)       response.setAttribute(\"errorMessage\",stacktrace.substring(startIndex,endIndex));      response.setAttribute(\"testExecuted\",\"false\");    }  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);      if (!rowsSourceBean.getName().equalsIgnoreCase(\"ROWS\")) {        throw new Exception(\"The fix list is empty\");      } else       if (rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG).size() == 0) {        throw new Exception(\"The fix list is empty\");      }    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"DATASET\")) {    DatasetDetail datasetClassDetail=DatasetDetail.fromXML(looProvider);    try {      String result=datasetClassDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the dataset lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing dataset\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  if (rowsSourceBean != null) {    List rows=rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG);    for (int i=0; i < rows.size(); i++)     paginator.addRow(rows.get(i));  }  list.setPaginator(paginator);  String moduleConfigStr=\"\";  moduleConfigStr+=\"<CONFIG>\";  moduleConfigStr+=\"\t<QUERIES/>\";  moduleConfigStr+=\"\t<COLUMNS>\";  if (colNames.size() == 0) {    moduleConfigStr+=\"\t<COLUMN name=\\\"No Result Found\\\" />\";  } else {    Iterator iterColNames=colNames.iterator();    while (iterColNames.hasNext()) {      String colName=(String)iterColNames.next();      moduleConfigStr+=\"\t<COLUMN name=\\\"\" + colName + \"\\\" />\";    }  }  moduleConfigStr+=\"\t</COLUMNS>\";  moduleConfigStr+=\"\t<CAPTIONS/>\";  moduleConfigStr+=\"\t<BUTTONS/>\";  moduleConfigStr+=\"</CONFIG>\";  SourceBean moduleConfig=SourceBean.fromXMLString(moduleConfigStr);  response.setAttribute(moduleConfig);  String valuefilter=(String)request.getAttribute(SpagoBIConstants.VALUE_FILTER);  if (valuefilter != null) {    String columnfilter=(String)request.getAttribute(SpagoBIConstants.COLUMN_FILTER);    String typeFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_FILTER);    String typeValueFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_VALUE_FILTER);    list=DelegatedBasicListService.filterList(list,valuefilter,typeValueFilter,columnfilter,typeFilter,getResponseContainer().getErrorHandler());  }  response.setAttribute(\"testExecuted\",\"true\");  return list;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.ListTestLovModule.getList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getList",
                        "code": "@Override public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  ModalitiesValue modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  profile=(IEngUserProfile)session.getAttribute(SpagoBIConstants.USER_PROFILE_FOR_TEST);  if (profile == null) {    SessionContainer permSess=session.getPermanentContainer();    profile=(IEngUserProfile)permSess.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  }  SourceBean rowsSourceBean=null;  List colNames=new ArrayList();  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    QueryDetail qd=QueryDetail.fromXML(looProvider);    String datasource=qd.getDataSource();    String statement=qd.getQueryDefinition();    try {      statement=StringUtilities.substituteProfileAttributesInString(statement,profile);      rowsSourceBean=(SourceBean)executeSelect(getRequestContainer(),getResponseContainer(),datasource,statement,colNames);    } catch (    Exception e) {      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      int startIndex=stacktrace.indexOf(\"java.sql.\");      int endIndex=stacktrace.indexOf(\"\\n\\tat \",startIndex);      if (endIndex == -1)       endIndex=stacktrace.indexOf(\" at \",startIndex);      if (startIndex != -1 && endIndex != -1)       response.setAttribute(\"errorMessage\",stacktrace.substring(startIndex,endIndex));      response.setAttribute(\"testExecuted\",\"false\");    }  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);      if (!rowsSourceBean.getName().equalsIgnoreCase(\"ROWS\")) {        throw new Exception(\"The fix list is empty\");      } else       if (rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG).size() == 0) {        throw new Exception(\"The fix list is empty\");      }    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"DATASET\")) {    DatasetDetail datasetClassDetail=DatasetDetail.fromXML(looProvider);    try {      String result=datasetClassDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the dataset lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing dataset\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  String moduleConfigStr=getList_extraction_3(paginator,list,rowsSourceBean,colNames);  moduleConfigStr+=\"</CONFIG>\";  SourceBean moduleConfig=SourceBean.fromXMLString(moduleConfigStr);  response.setAttribute(moduleConfig);  String valuefilter=(String)request.getAttribute(SpagoBIConstants.VALUE_FILTER);  if (valuefilter != null) {    String columnfilter=(String)request.getAttribute(SpagoBIConstants.COLUMN_FILTER);    String typeFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_FILTER);    String typeValueFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_VALUE_FILTER);    list=DelegatedBasicListService.filterList(list,valuefilter,typeValueFilter,columnfilter,typeFilter,getResponseContainer().getErrorHandler());  }  response.setAttribute(\"testExecuted\",\"true\");  return list;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.ListTestLovModule.getList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getList",
                        "code": "@Override public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  ModalitiesValue modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  profile=(IEngUserProfile)session.getAttribute(SpagoBIConstants.USER_PROFILE_FOR_TEST);  if (profile == null) {    SessionContainer permSess=session.getPermanentContainer();    profile=(IEngUserProfile)permSess.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  }  SourceBean rowsSourceBean=null;  List colNames=new ArrayList();  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    QueryDetail qd=QueryDetail.fromXML(looProvider);    String datasource=qd.getDataSource();    String statement=qd.getQueryDefinition();    try {      statement=StringUtilities.substituteProfileAttributesInString(statement,profile);      rowsSourceBean=(SourceBean)executeSelect(getRequestContainer(),getResponseContainer(),datasource,statement,colNames);    } catch (    Exception e) {      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      int startIndex=stacktrace.indexOf(\"java.sql.\");      int endIndex=stacktrace.indexOf(\"\\n\\tat \",startIndex);      if (endIndex == -1)       endIndex=stacktrace.indexOf(\" at \",startIndex);      if (startIndex != -1 && endIndex != -1)       response.setAttribute(\"errorMessage\",stacktrace.substring(startIndex,endIndex));      response.setAttribute(\"testExecuted\",\"false\");    }  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);      getList_extraction_2(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"DATASET\")) {    DatasetDetail datasetClassDetail=DatasetDetail.fromXML(looProvider);    try {      String result=datasetClassDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the dataset lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing dataset\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  String moduleConfigStr=getList_extraction_3(paginator,list,rowsSourceBean,colNames);  moduleConfigStr+=\"</CONFIG>\";  SourceBean moduleConfig=SourceBean.fromXMLString(moduleConfigStr);  response.setAttribute(moduleConfig);  String valuefilter=(String)request.getAttribute(SpagoBIConstants.VALUE_FILTER);  if (valuefilter != null) {    String columnfilter=(String)request.getAttribute(SpagoBIConstants.COLUMN_FILTER);    String typeFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_FILTER);    String typeValueFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_VALUE_FILTER);    list=DelegatedBasicListService.filterList(list,valuefilter,typeValueFilter,columnfilter,typeFilter,getResponseContainer().getErrorHandler());  }  response.setAttribute(\"testExecuted\",\"true\");  return list;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.ListTestLovModule.getList.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getList",
                        "code": "@Override public ListIFace getList(SourceBean request,SourceBean response) throws Exception {  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  ModalitiesValue modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  profile=(IEngUserProfile)session.getAttribute(SpagoBIConstants.USER_PROFILE_FOR_TEST);  if (profile == null) {    SessionContainer permSess=session.getPermanentContainer();    profile=(IEngUserProfile)permSess.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  }  SourceBean rowsSourceBean=null;  List colNames=new ArrayList();  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    rowsSourceBean=getList_extraction_1(response,looProvider,profile,rowsSourceBean,colNames);  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);      getList_extraction_2(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"DATASET\")) {    DatasetDetail datasetClassDetail=DatasetDetail.fromXML(looProvider);    try {      String result=datasetClassDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      colNames=findFirstRowAttributes(rowsSourceBean);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the dataset lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing dataset\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  String moduleConfigStr=getList_extraction_3(paginator,list,rowsSourceBean,colNames);  moduleConfigStr+=\"</CONFIG>\";  SourceBean moduleConfig=SourceBean.fromXMLString(moduleConfigStr);  response.setAttribute(moduleConfig);  String valuefilter=(String)request.getAttribute(SpagoBIConstants.VALUE_FILTER);  if (valuefilter != null) {    String columnfilter=(String)request.getAttribute(SpagoBIConstants.COLUMN_FILTER);    String typeFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_FILTER);    String typeValueFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_VALUE_FILTER);    list=DelegatedBasicListService.filterList(list,valuefilter,typeValueFilter,columnfilter,typeFilter,getResponseContainer().getErrorHandler());  }  response.setAttribute(\"testExecuted\",\"true\");  return list;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.ListTestLovModule.getList.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "SaveLovAction": {
            "modDetailModValue": {
                "original": {
                    "method_name": "modDetailModValue",
                    "code": "/**  * Inserts/Modifies the detail of a value according to the user request. When a value in the LOV list is modified, the <code>modifyModalitiesValue</code> method is called; when a new parameter use mode is added, the <code>inserModalitiesValue</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailModValue(String mod) throws EMFUserError, SourceBeanException {  ModalitiesValue modVal=null;  HashMap<String,String> logParam=new HashMap();  boolean responseTestLov;  boolean responseLoopback;  try {    modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);    logParam.put(\"NAME\",modVal.getName());    logParam.put(\"TYPE\",modVal.getITypeCd());    logParam.put(\"LABEL\",modVal.getLabel());    String lovProviderModified=getAttributeAsString(\"lovProviderModified\");    if (lovProviderModified != null && !lovProviderModified.trim().equals(\"\"))     session.setAttribute(SpagoBIConstants.LOV_MODIFIED,lovProviderModified);    String returnFromTestMsg=getAttributeAsString(\"RETURN_FROM_TEST_MSG\");    if (\"SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      Collection errors=errorHandler.getErrors();      if (errors != null && errors.size() > 0) {        Iterator iterator=errors.iterator();        while (iterator.hasNext()) {          Object error=iterator.next();          if (error instanceof EMFValidationError) {            responseTestLov=true;            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD/MODIFY\",logParam,\"KO\");            return;          }        }      }      List<String> invisCols=null;      JSONObject lovConfiguration=getAttributeAsJSONObject(AdmintoolsConstants.LOV_CONFIGURATION);      String valueColumn=lovConfiguration.optString(\"valueColumnName\");      String descriptionColumn=lovConfiguration.optString(\"descriptionColumnName\");      String lovType=lovConfiguration.optString(\"lovType\");      JSONArray treeLevelColumns=lovConfiguration.optJSONArray(\"treeLevelsColumns\");      JSONArray visibleColumns=lovConfiguration.optJSONArray(\"visibleColumnNames\");      JSONArray columns=lovConfiguration.optJSONArray(\"column\");      List<String> visibleColumnsList=new ArrayList<String>();      if (visibleColumns != null) {        for (int i=0; i < visibleColumns.length(); i++) {          visibleColumnsList.add(visibleColumns.getString(i));        }      }      List<Couple<String,String>> treeLevelColumnsMap=new ArrayList<Couple<String,String>>();      if (treeLevelColumns != null) {        for (int i=0; i < treeLevelColumns.length(); i++) {          JSONObject level=(JSONObject)treeLevelColumns.get(i);          treeLevelColumnsMap.add(new Couple(level.getString(\"name\"),level.getString(\"description\")));        }      }      if (columns != null) {        invisCols=getInvisibleColumns(columns,visibleColumnsList);      }      String lovProvider=modVal.getLovProvider();      ILovDetail lovDetail=LovDetailFactory.getLovFromXML(lovProvider);      lovDetail.setDescriptionColumnName(descriptionColumn);      if (invisCols != null) {        lovDetail.setInvisibleColumnNames(invisCols);      }      lovDetail.setValueColumnName(valueColumn);      if (visibleColumnsList != null) {        lovDetail.setVisibleColumnNames(visibleColumnsList);      }      if (treeLevelColumnsMap != null) {        lovDetail.setTreeLevelsColumns(treeLevelColumnsMap);      }      if (lovType != null) {        lovDetail.setLovType(lovType);      }      String newLovProvider=lovDetail.toXML();      modVal.setLovProvider(newLovProvider);      session.delAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      session.delAttribute(SpagoBIConstants.MODALITY);    } else     if (\"DO_NOT_SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      return;    }    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.insertModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD\",logParam,\"OK\");    } else {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.modifyModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.MOD\",logParam,\"OK\");    }  } catch (  Exception ex) {    logger.error(\"Cannot fill response container\",ex);    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListLovsModule.MODULE_PAGE);    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD/MODIFY\",logParam,\"ERR\");    } catch (    Exception e) {      e.printStackTrace();    }    throw new EMFUserError(EMFErrorSeverity.ERROR,1018,new Vector(),params);  }  responseLoopback=true;  session.delAttribute(SpagoBIConstants.LOV_MODIFIED);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.SaveLovAction.modDetailModValue.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "modDetailModValue",
                        "code": "/**  * Inserts/Modifies the detail of a value according to the user request. When a value in the LOV list is modified, the <code>modifyModalitiesValue</code> method is called; when a new parameter use mode is added, the <code>inserModalitiesValue</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailModValue(String mod) throws EMFUserError, SourceBeanException {  ModalitiesValue modVal=null;  HashMap<String,String> logParam=new HashMap();  boolean responseTestLov;  boolean responseLoopback;  try {    modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);    logParam.put(\"NAME\",modVal.getName());    logParam.put(\"TYPE\",modVal.getITypeCd());    logParam.put(\"LABEL\",modVal.getLabel());    String lovProviderModified=getAttributeAsString(\"lovProviderModified\");    if (lovProviderModified != null && !lovProviderModified.trim().equals(\"\"))     session.setAttribute(SpagoBIConstants.LOV_MODIFIED,lovProviderModified);    String returnFromTestMsg=getAttributeAsString(\"RETURN_FROM_TEST_MSG\");    if (\"SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      Collection errors=errorHandler.getErrors();      if (errors != null && errors.size() > 0) {        Iterator iterator=errors.iterator();        while (iterator.hasNext()) {          Object error=iterator.next();          if (error instanceof EMFValidationError) {            responseTestLov=true;            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD/MODIFY\",logParam,\"KO\");            return;          }        }      }      List<String> invisCols=null;      JSONObject lovConfiguration=getAttributeAsJSONObject(AdmintoolsConstants.LOV_CONFIGURATION);      String valueColumn=lovConfiguration.optString(\"valueColumnName\");      String descriptionColumn=lovConfiguration.optString(\"descriptionColumnName\");      String lovType=lovConfiguration.optString(\"lovType\");      JSONArray treeLevelColumns=lovConfiguration.optJSONArray(\"treeLevelsColumns\");      JSONArray visibleColumns=lovConfiguration.optJSONArray(\"visibleColumnNames\");      JSONArray columns=lovConfiguration.optJSONArray(\"column\");      List<String> visibleColumnsList=new ArrayList<String>();      if (visibleColumns != null) {        for (int i=0; i < visibleColumns.length(); i++) {          visibleColumnsList.add(visibleColumns.getString(i));        }      }      List<Couple<String,String>> treeLevelColumnsMap=new ArrayList<Couple<String,String>>();      if (treeLevelColumns != null) {        for (int i=0; i < treeLevelColumns.length(); i++) {          JSONObject level=(JSONObject)treeLevelColumns.get(i);          treeLevelColumnsMap.add(new Couple(level.getString(\"name\"),level.getString(\"description\")));        }      }      if (columns != null) {        invisCols=getInvisibleColumns(columns,visibleColumnsList);      }      String lovProvider=modVal.getLovProvider();      ILovDetail lovDetail=LovDetailFactory.getLovFromXML(lovProvider);      lovDetail.setDescriptionColumnName(descriptionColumn);      if (invisCols != null) {        lovDetail.setInvisibleColumnNames(invisCols);      }      lovDetail.setValueColumnName(valueColumn);      if (visibleColumnsList != null) {        lovDetail.setVisibleColumnNames(visibleColumnsList);      }      if (treeLevelColumnsMap != null) {        lovDetail.setTreeLevelsColumns(treeLevelColumnsMap);      }      if (lovType != null) {        lovDetail.setLovType(lovType);      }      String newLovProvider=lovDetail.toXML();      modVal.setLovProvider(newLovProvider);      session.delAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      session.delAttribute(SpagoBIConstants.MODALITY);    } else     if (\"DO_NOT_SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      return;    }    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.insertModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD\",logParam,\"OK\");    } else {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.modifyModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.MOD\",logParam,\"OK\");    }  } catch (  Exception ex) {    logger.error(\"Cannot fill response container\",ex);    HashMap params=new HashMap();    modDetailModValue_extraction_3(logParam,params);    throw new EMFUserError(EMFErrorSeverity.ERROR,1018,new Vector(),params);  }  responseLoopback=true;  session.delAttribute(SpagoBIConstants.LOV_MODIFIED);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.SaveLovAction.modDetailModValue.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDetailModValue",
                        "code": "/**  * Inserts/Modifies the detail of a value according to the user request. When a value in the LOV list is modified, the <code>modifyModalitiesValue</code> method is called; when a new parameter use mode is added, the <code>inserModalitiesValue</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailModValue(String mod) throws EMFUserError, SourceBeanException {  ModalitiesValue modVal=null;  HashMap<String,String> logParam=new HashMap();  boolean responseTestLov;  boolean responseLoopback;  try {    modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);    logParam.put(\"NAME\",modVal.getName());    logParam.put(\"TYPE\",modVal.getITypeCd());    logParam.put(\"LABEL\",modVal.getLabel());    String lovProviderModified=getAttributeAsString(\"lovProviderModified\");    if (lovProviderModified != null && !lovProviderModified.trim().equals(\"\"))     session.setAttribute(SpagoBIConstants.LOV_MODIFIED,lovProviderModified);    String returnFromTestMsg=getAttributeAsString(\"RETURN_FROM_TEST_MSG\");    if (\"SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      Collection errors=errorHandler.getErrors();      if (errors != null && errors.size() > 0) {        Iterator iterator=errors.iterator();        while (iterator.hasNext()) {          Object error=iterator.next();          if (error instanceof EMFValidationError) {            responseTestLov=true;            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD/MODIFY\",logParam,\"KO\");            return;          }        }      }      List<String> invisCols=null;      JSONObject lovConfiguration=getAttributeAsJSONObject(AdmintoolsConstants.LOV_CONFIGURATION);      String valueColumn=lovConfiguration.optString(\"valueColumnName\");      String descriptionColumn=lovConfiguration.optString(\"descriptionColumnName\");      String lovType=lovConfiguration.optString(\"lovType\");      JSONArray treeLevelColumns=lovConfiguration.optJSONArray(\"treeLevelsColumns\");      JSONArray visibleColumns=lovConfiguration.optJSONArray(\"visibleColumnNames\");      JSONArray columns=lovConfiguration.optJSONArray(\"column\");      ILovDetail lovDetail=modDetailModValue_extraction_2(modVal,invisCols,valueColumn,descriptionColumn,lovType,treeLevelColumns,visibleColumns,columns);      String newLovProvider=lovDetail.toXML();      modVal.setLovProvider(newLovProvider);      session.delAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      session.delAttribute(SpagoBIConstants.MODALITY);    } else     if (\"DO_NOT_SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      return;    }    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.insertModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD\",logParam,\"OK\");    } else {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.modifyModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.MOD\",logParam,\"OK\");    }  } catch (  Exception ex) {    logger.error(\"Cannot fill response container\",ex);    HashMap params=new HashMap();    modDetailModValue_extraction_3(logParam,params);    throw new EMFUserError(EMFErrorSeverity.ERROR,1018,new Vector(),params);  }  responseLoopback=true;  session.delAttribute(SpagoBIConstants.LOV_MODIFIED);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.SaveLovAction.modDetailModValue.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDetailModValue",
                        "code": "/**  * Inserts/Modifies the detail of a value according to the user request. When a value in the LOV list is modified, the <code>modifyModalitiesValue</code> method is called; when a new parameter use mode is added, the <code>inserModalitiesValue</code> method is called. These two cases are differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailModValue(String mod) throws EMFUserError, SourceBeanException {  ModalitiesValue modVal=null;  HashMap<String,String> logParam=new HashMap();  boolean responseTestLov;  boolean responseLoopback;  try {    modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);    logParam.put(\"NAME\",modVal.getName());    logParam.put(\"TYPE\",modVal.getITypeCd());    logParam.put(\"LABEL\",modVal.getLabel());    String lovProviderModified=getAttributeAsString(\"lovProviderModified\");    modDetailModValue_extraction_1(lovProviderModified);    String returnFromTestMsg=getAttributeAsString(\"RETURN_FROM_TEST_MSG\");    if (\"SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      Collection errors=errorHandler.getErrors();      if (errors != null && errors.size() > 0) {        Iterator iterator=errors.iterator();        while (iterator.hasNext()) {          Object error=iterator.next();          if (error instanceof EMFValidationError) {            responseTestLov=true;            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD/MODIFY\",logParam,\"KO\");            return;          }        }      }      List<String> invisCols=null;      JSONObject lovConfiguration=getAttributeAsJSONObject(AdmintoolsConstants.LOV_CONFIGURATION);      String valueColumn=lovConfiguration.optString(\"valueColumnName\");      String descriptionColumn=lovConfiguration.optString(\"descriptionColumnName\");      String lovType=lovConfiguration.optString(\"lovType\");      JSONArray treeLevelColumns=lovConfiguration.optJSONArray(\"treeLevelsColumns\");      JSONArray visibleColumns=lovConfiguration.optJSONArray(\"visibleColumnNames\");      JSONArray columns=lovConfiguration.optJSONArray(\"column\");      ILovDetail lovDetail=modDetailModValue_extraction_2(modVal,invisCols,valueColumn,descriptionColumn,lovType,treeLevelColumns,visibleColumns,columns);      String newLovProvider=lovDetail.toXML();      modVal.setLovProvider(newLovProvider);      session.delAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      session.delAttribute(SpagoBIConstants.MODALITY);    } else     if (\"DO_NOT_SAVE\".equalsIgnoreCase(returnFromTestMsg)) {      modVal=(ModalitiesValue)session.getAttribute(SpagoBIConstants.MODALITY_VALUE_OBJECT);      return;    }    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.insertModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.ADD\",logParam,\"OK\");    } else {      IModalitiesValueDAO dao=DAOFactory.getModalitiesValueDAO();      dao.setUserProfile(profile);      dao.modifyModalitiesValue(modVal);      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"LOV.MOD\",logParam,\"OK\");    }  } catch (  Exception ex) {    logger.error(\"Cannot fill response container\",ex);    HashMap params=new HashMap();    modDetailModValue_extraction_3(logParam,params);    throw new EMFUserError(EMFErrorSeverity.ERROR,1018,new Vector(),params);  }  responseLoopback=true;  session.delAttribute(SpagoBIConstants.LOV_MODIFIED);}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.behaviouralmodel.lov.service.SaveLovAction.modDetailModValue.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.commons.filters": {
        "ProfileFilter": {
            "doFilter": {
                "original": {
                    "method_name": "doFilter",
                    "code": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  try {    if (request instanceof HttpServletRequest) {      HttpServletRequest httpRequest=(HttpServletRequest)request;      HttpServletResponse httpResponse=(HttpServletResponse)response;      HttpSession session=httpRequest.getSession();      RequestContainer requestContainer=(RequestContainer)session.getAttribute(Constants.REQUEST_CONTAINER);      if (requestContainer == null) {        requestContainer=new RequestContainer();        SessionContainer sessionContainer=new SessionContainer(true);        requestContainer.setSessionContainer(sessionContainer);        session.setAttribute(Constants.REQUEST_CONTAINER,requestContainer);      }      ResponseContainer responseContainer=(ResponseContainer)session.getAttribute(Constants.RESPONSE_CONTAINER);      if (responseContainer == null) {        responseContainer=new ResponseContainer();        SourceBean serviceResponse=new SourceBean(Constants.SERVICE_RESPONSE);        responseContainer.setServiceResponse(serviceResponse);        session.setAttribute(Constants.RESPONSE_CONTAINER,responseContainer);      }      SessionContainer sessionContainer=requestContainer.getSessionContainer();      SessionContainer permanentSession=sessionContainer.getPermanentContainer();      IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);      UserProfile publicProfile=PublicProfile.evaluatePublicCase(httpRequest,session,permanentSession);      if (publicProfile != null)       profile=publicProfile;      if (profile == null) {        logger.debug(\"User profile not found in session, creating a new one and putting in session....\");        String userId=null;        if (ChannelUtilities.isWebRunning() && !GeneralUtilities.isSSOEnabled()) {          try {            userId=getUserIdInWebModeWithoutSSO(httpRequest);          } catch (          Exception e) {            logger.error(\"Error authenticating user\",e);            httpRequest.getRequestDispatcher(\"/WEB-INF/jsp/commons/silentLoginFailed.jsp\").forward(request,response);            return;          }        } else {          userId=getUserIdWithSSO(httpRequest);        }        logger.debug(\"User id = \" + userId);        if (userId != null && !userId.trim().equals(\"\")) {          profile=GeneralUtilities.createNewUserProfile(userId);          if (requestIsForHomePage(httpRequest)) {            profile=SessionUserProfileBuilder.getDefaultUserProfile((UserProfile)profile);          }          storeProfileInSession((UserProfile)profile,permanentSession,session);        } else {          logger.debug(\"User identifier not found.\");        }      } else {      }      if (profile != null) {        manageTenant(profile);        UserProfileManager.setProfile((UserProfile)profile);      } else {        String contextName=ChannelUtilities.getSpagoBIContextName(httpRequest);        if (!requestIsForHomePage(httpRequest) && !requestIsForLoginByToken(httpRequest)) {          String targetService=httpRequest.getRequestURI() + \"?\" + httpRequest.getQueryString();          String redirectURL=contextName + \"/servlet/AdapterHTTP?PAGE=LoginPage&NEW_SESSION=TRUE&targetService=\" + URLEncoder.encode(targetService,\"UTF-8\");          httpResponse.sendRedirect(redirectURL);        }      }      chain.doFilter(request,response);    }  } catch (  Exception e) {    logger.error(\"Error while service execution\",e);    ((HttpServletResponse)response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  } finally {    TenantManager.unset();    UserProfileManager.unset();  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.filters.ProfileFilter.doFilter.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "doFilter",
                        "code": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  try {    if (request instanceof HttpServletRequest) {      HttpServletRequest httpRequest=(HttpServletRequest)request;      HttpServletResponse httpResponse=(HttpServletResponse)response;      HttpSession session=httpRequest.getSession();      RequestContainer requestContainer=(RequestContainer)session.getAttribute(Constants.REQUEST_CONTAINER);      if (requestContainer == null) {        requestContainer=new RequestContainer();        SessionContainer sessionContainer=new SessionContainer(true);        requestContainer.setSessionContainer(sessionContainer);        session.setAttribute(Constants.REQUEST_CONTAINER,requestContainer);      }      ResponseContainer responseContainer=(ResponseContainer)session.getAttribute(Constants.RESPONSE_CONTAINER);      if (responseContainer == null) {        responseContainer=new ResponseContainer();        SourceBean serviceResponse=new SourceBean(Constants.SERVICE_RESPONSE);        responseContainer.setServiceResponse(serviceResponse);        session.setAttribute(Constants.RESPONSE_CONTAINER,responseContainer);      }      SessionContainer sessionContainer=requestContainer.getSessionContainer();      SessionContainer permanentSession=sessionContainer.getPermanentContainer();      IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);      UserProfile publicProfile=PublicProfile.evaluatePublicCase(httpRequest,session,permanentSession);      if (publicProfile != null)       profile=publicProfile;      if (profile == null) {        logger.debug(\"User profile not found in session, creating a new one and putting in session....\");        String userId=null;        if (ChannelUtilities.isWebRunning() && !GeneralUtilities.isSSOEnabled()) {          try {            userId=getUserIdInWebModeWithoutSSO(httpRequest);          } catch (          Exception e) {            logger.error(\"Error authenticating user\",e);            httpRequest.getRequestDispatcher(\"/WEB-INF/jsp/commons/silentLoginFailed.jsp\").forward(request,response);            return;          }        } else {          userId=getUserIdWithSSO(httpRequest);        }        logger.debug(\"User id = \" + userId);        if (userId != null && !userId.trim().equals(\"\")) {          profile=GeneralUtilities.createNewUserProfile(userId);          if (requestIsForHomePage(httpRequest)) {            profile=SessionUserProfileBuilder.getDefaultUserProfile((UserProfile)profile);          }          storeProfileInSession((UserProfile)profile,permanentSession,session);        } else {          logger.debug(\"User identifier not found.\");        }      } else {      }      doFilter_extraction_4(request,response,chain,httpRequest,httpResponse,profile);    }  } catch (  Exception e) {    logger.error(\"Error while service execution\",e);    ((HttpServletResponse)response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  } finally {    TenantManager.unset();    UserProfileManager.unset();  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.filters.ProfileFilter.doFilter.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "doFilter",
                        "code": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  try {    if (request instanceof HttpServletRequest) {      HttpServletRequest httpRequest=(HttpServletRequest)request;      HttpServletResponse httpResponse=(HttpServletResponse)response;      HttpSession session=httpRequest.getSession();      RequestContainer requestContainer=(RequestContainer)session.getAttribute(Constants.REQUEST_CONTAINER);      if (requestContainer == null) {        requestContainer=new RequestContainer();        SessionContainer sessionContainer=new SessionContainer(true);        requestContainer.setSessionContainer(sessionContainer);        session.setAttribute(Constants.REQUEST_CONTAINER,requestContainer);      }      ResponseContainer responseContainer=(ResponseContainer)session.getAttribute(Constants.RESPONSE_CONTAINER);      if (responseContainer == null) {        responseContainer=new ResponseContainer();        SourceBean serviceResponse=new SourceBean(Constants.SERVICE_RESPONSE);        responseContainer.setServiceResponse(serviceResponse);        session.setAttribute(Constants.RESPONSE_CONTAINER,responseContainer);      }      SessionContainer sessionContainer=requestContainer.getSessionContainer();      SessionContainer permanentSession=sessionContainer.getPermanentContainer();      IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);      UserProfile publicProfile=PublicProfile.evaluatePublicCase(httpRequest,session,permanentSession);      if (publicProfile != null)       profile=publicProfile;      if (profile == null) {        logger.debug(\"User profile not found in session, creating a new one and putting in session....\");        String userId=null;        if (ChannelUtilities.isWebRunning() && !GeneralUtilities.isSSOEnabled()) {          try {            userId=getUserIdInWebModeWithoutSSO(httpRequest);          } catch (          Exception e) {            logger.error(\"Error authenticating user\",e);            httpRequest.getRequestDispatcher(\"/WEB-INF/jsp/commons/silentLoginFailed.jsp\").forward(request,response);            return;          }        } else {          userId=getUserIdWithSSO(httpRequest);        }        profile=doFilter_extraction_3(httpRequest,session,permanentSession,profile,userId);      } else {      }      doFilter_extraction_4(request,response,chain,httpRequest,httpResponse,profile);    }  } catch (  Exception e) {    logger.error(\"Error while service execution\",e);    ((HttpServletResponse)response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  } finally {    TenantManager.unset();    UserProfileManager.unset();  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.filters.ProfileFilter.doFilter.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "doFilter",
                        "code": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  try {    if (request instanceof HttpServletRequest) {      HttpServletRequest httpRequest=(HttpServletRequest)request;      HttpServletResponse httpResponse=(HttpServletResponse)response;      HttpSession session=httpRequest.getSession();      RequestContainer requestContainer=(RequestContainer)session.getAttribute(Constants.REQUEST_CONTAINER);      if (requestContainer == null) {        requestContainer=new RequestContainer();        SessionContainer sessionContainer=new SessionContainer(true);        requestContainer.setSessionContainer(sessionContainer);        session.setAttribute(Constants.REQUEST_CONTAINER,requestContainer);      }      ResponseContainer responseContainer=(ResponseContainer)session.getAttribute(Constants.RESPONSE_CONTAINER);      if (responseContainer == null) {        responseContainer=new ResponseContainer();        SourceBean serviceResponse=new SourceBean(Constants.SERVICE_RESPONSE);        responseContainer.setServiceResponse(serviceResponse);        session.setAttribute(Constants.RESPONSE_CONTAINER,responseContainer);      }      SessionContainer sessionContainer=requestContainer.getSessionContainer();      SessionContainer permanentSession=sessionContainer.getPermanentContainer();      IEngUserProfile profile=doFilter_extraction_2(httpRequest,session,permanentSession);      if (profile == null) {        logger.debug(\"User profile not found in session, creating a new one and putting in session....\");        String userId=null;        if (ChannelUtilities.isWebRunning() && !GeneralUtilities.isSSOEnabled()) {          try {            userId=getUserIdInWebModeWithoutSSO(httpRequest);          } catch (          Exception e) {            logger.error(\"Error authenticating user\",e);            httpRequest.getRequestDispatcher(\"/WEB-INF/jsp/commons/silentLoginFailed.jsp\").forward(request,response);            return;          }        } else {          userId=getUserIdWithSSO(httpRequest);        }        profile=doFilter_extraction_3(httpRequest,session,permanentSession,profile,userId);      } else {      }      doFilter_extraction_4(request,response,chain,httpRequest,httpResponse,profile);    }  } catch (  Exception e) {    logger.error(\"Error while service execution\",e);    ((HttpServletResponse)response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  } finally {    TenantManager.unset();    UserProfileManager.unset();  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.filters.ProfileFilter.doFilter.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "doFilter",
                        "code": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  try {    if (request instanceof HttpServletRequest) {      HttpServletRequest httpRequest=(HttpServletRequest)request;      HttpServletResponse httpResponse=(HttpServletResponse)response;      HttpSession session=httpRequest.getSession();      RequestContainer requestContainer=(RequestContainer)session.getAttribute(Constants.REQUEST_CONTAINER);      SessionContainer sessionContainer=doFilter_extraction_1(session,requestContainer);      SessionContainer permanentSession=sessionContainer.getPermanentContainer();      IEngUserProfile profile=doFilter_extraction_2(httpRequest,session,permanentSession);      if (profile == null) {        logger.debug(\"User profile not found in session, creating a new one and putting in session....\");        String userId=null;        if (ChannelUtilities.isWebRunning() && !GeneralUtilities.isSSOEnabled()) {          try {            userId=getUserIdInWebModeWithoutSSO(httpRequest);          } catch (          Exception e) {            logger.error(\"Error authenticating user\",e);            httpRequest.getRequestDispatcher(\"/WEB-INF/jsp/commons/silentLoginFailed.jsp\").forward(request,response);            return;          }        } else {          userId=getUserIdWithSSO(httpRequest);        }        profile=doFilter_extraction_3(httpRequest,session,permanentSession,profile,userId);      } else {      }      doFilter_extraction_4(request,response,chain,httpRequest,httpResponse,profile);    }  } catch (  Exception e) {    logger.error(\"Error while service execution\",e);    ((HttpServletResponse)response).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    return;  } finally {    TenantManager.unset();    UserProfileManager.unset();  }}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.filters.ProfileFilter.doFilter.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.commons.initializers.metadata": {
        "FunctionalitiesInitializer": {
            "synchronizeUserFunctionalities": {
                "original": {
                    "method_name": "synchronizeUserFunctionalities",
                    "code": "private void synchronizeUserFunctionalities(Session aSession) throws Exception {  logger.debug(\"IN\");  SourceBean userFunctionalitiesSB=getConfiguration();  configurationFileName=\"it/eng/spagobi/commons/initializers/metadata/config/roleTypeUserFunctionalities.xml\";  SourceBean roleTypeUserFunctionalitiesSB=getConfiguration();  if (userFunctionalitiesSB == null) {    throw new Exception(\"User functionalities configuration file not found!!!\");  }  if (roleTypeUserFunctionalitiesSB == null) {    throw new Exception(\"Role type user functionalities configuration file not found!!!\");  }  List userFunctionalitiesList=userFunctionalitiesSB.getAttributeAsList(\"USER_FUNCTIONALITY\");  if (userFunctionalitiesList == null || userFunctionalitiesList.isEmpty()) {    throw new Exception(\"No predefined user functionalities found!!!\");  }  List<SbiUserFunctionality> sbiUserFunctionalityList=getsbiUserFunctionalities(aSession);  for (  SbiUserFunctionality sbiUserFunc : sbiUserFunctionalityList) {    boolean isInConfigFile=false;    String nameInDB=sbiUserFunc.getName();    String productTypeInDB=sbiUserFunc.getProductType().getLabel();    Iterator it=userFunctionalitiesList.iterator();    while (it.hasNext()) {      SourceBean aUSerFunctionalitySB=(SourceBean)it.next();      String nameInFile=(String)aUSerFunctionalitySB.getAttribute(\"name\");      String productTypeInFile=(String)aUSerFunctionalitySB.getAttribute(\"productType\");      if (nameInFile.equals(nameInDB) && productTypeInFile.equals(productTypeInDB)) {        isInConfigFile=true;        break;      }    }    if (!isInConfigFile) {      deleteUserFunctionality(aSession,sbiUserFunc);    }  }  Iterator it=userFunctionalitiesList.iterator();  while (it.hasNext()) {    SourceBean aUSerFunctionalitySB=(SourceBean)it.next();    String userFunctionalityName=(String)aUSerFunctionalitySB.getAttribute(\"name\");    String userFunctionalityProductType=(String)aUSerFunctionalitySB.getAttribute(\"productType\");    SbiProductType productType=findProductType(aSession,userFunctionalityProductType);    if (productType != null) {      String hql=\"from SbiUserFunctionality f where f.name=? and f.productType = ?\";      Query hqlQuery=aSession.createQuery(hql);      hqlQuery.setParameter(0,userFunctionalityName);      hqlQuery.setParameter(1,productType.getProductTypeId(),Hibernate.INTEGER);      SbiUserFunctionality aUserFunctionality;      try {        aUserFunctionality=(SbiUserFunctionality)hqlQuery.uniqueResult();      } catch (      HibernateException he) {        throw new SpagoBIRuntimeException(\"The user functionality [\" + userFunctionalityName + \"] for the product type [\"+ productType.getLabel()+ \",\"+ productType.getProductTypeId()+ \"] returns more than one result.\");      }      if (aUserFunctionality == null) {        aUserFunctionality=new SbiUserFunctionality();        aUserFunctionality.setName(userFunctionalityName);        aUserFunctionality.setProductType(productType);        aUserFunctionality.setDescription((String)aUSerFunctionalitySB.getAttribute(\"description\"));      }      Object roleTypesObject=roleTypeUserFunctionalitiesSB.getFilteredSourceBeanAttribute(\"ROLE_TYPE_USER_FUNCTIONALITY\",\"userFunctionality\",userFunctionalityName);      if (roleTypesObject == null) {        throw new Exception(\"No role type found for user functionality [\" + userFunctionalityName + \"] in product type [\"+ productType.getLabel()+ \"]!!!\");      }      StringBuffer roleTypesStrBuffer=new StringBuffer();      Set roleTypes=new HashSet();      if (aUserFunctionality.getRoleType() != null) {        roleTypes.addAll(aUserFunctionality.getRoleType());      }      if (roleTypesObject instanceof SourceBean) {        SourceBean roleTypeSB=(SourceBean)roleTypesObject;        String roleTypeCd=(String)roleTypeSB.getAttribute(\"roleType\");        roleTypesStrBuffer.append(roleTypeCd);        SbiDomains domainRoleType=findDomain(aSession,roleTypeCd,\"ROLE_TYPE\");        roleTypes.add(domainRoleType);      } else       if (roleTypesObject instanceof List) {        List roleTypesSB=(List)roleTypesObject;        Iterator roleTypesIt=roleTypesSB.iterator();        while (roleTypesIt.hasNext()) {          SourceBean roleTypeSB=(SourceBean)roleTypesIt.next();          String roleTypeCd=(String)roleTypeSB.getAttribute(\"roleType\");          roleTypesStrBuffer.append(roleTypeCd);          if (roleTypesIt.hasNext()) {            roleTypesStrBuffer.append(\";\");          }          SbiDomains domainRoleType=findDomain(aSession,roleTypeCd,\"ROLE_TYPE\");          roleTypes.add(domainRoleType);        }      }      aUserFunctionality.setRoleType(roleTypes);      logger.debug(\"Inserting UserFunctionality with name = [\" + aUSerFunctionalitySB.getAttribute(\"name\") + \"] associated to role types [\"+ roleTypesStrBuffer.toString()+ \"]...\");      aSession.save(aUserFunctionality);    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.initializers.metadata.FunctionalitiesInitializer.synchronizeUserFunctionalities.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "synchronizeUserFunctionalities",
                        "code": "private void synchronizeUserFunctionalities(Session aSession) throws Exception {  logger.debug(\"IN\");  SourceBean userFunctionalitiesSB=getConfiguration();  configurationFileName=\"it/eng/spagobi/commons/initializers/metadata/config/roleTypeUserFunctionalities.xml\";  SourceBean roleTypeUserFunctionalitiesSB=getConfiguration();  if (userFunctionalitiesSB == null) {    throw new Exception(\"User functionalities configuration file not found!!!\");  }  if (roleTypeUserFunctionalitiesSB == null) {    throw new Exception(\"Role type user functionalities configuration file not found!!!\");  }  List userFunctionalitiesList=userFunctionalitiesSB.getAttributeAsList(\"USER_FUNCTIONALITY\");  if (userFunctionalitiesList == null || userFunctionalitiesList.isEmpty()) {    throw new Exception(\"No predefined user functionalities found!!!\");  }  List<SbiUserFunctionality> sbiUserFunctionalityList=getsbiUserFunctionalities(aSession);  for (  SbiUserFunctionality sbiUserFunc : sbiUserFunctionalityList) {    boolean isInConfigFile=false;    String nameInDB=sbiUserFunc.getName();    String productTypeInDB=sbiUserFunc.getProductType().getLabel();    Iterator it=userFunctionalitiesList.iterator();    while (it.hasNext()) {      SourceBean aUSerFunctionalitySB=(SourceBean)it.next();      String nameInFile=(String)aUSerFunctionalitySB.getAttribute(\"name\");      String productTypeInFile=(String)aUSerFunctionalitySB.getAttribute(\"productType\");      if (nameInFile.equals(nameInDB) && productTypeInFile.equals(productTypeInDB)) {        isInConfigFile=true;        break;      }    }    if (!isInConfigFile) {      deleteUserFunctionality(aSession,sbiUserFunc);    }  }  Iterator it=userFunctionalitiesList.iterator();  while (it.hasNext()) {    SourceBean aUSerFunctionalitySB=(SourceBean)it.next();    String userFunctionalityName=(String)aUSerFunctionalitySB.getAttribute(\"name\");    String userFunctionalityProductType=(String)aUSerFunctionalitySB.getAttribute(\"productType\");    SbiProductType productType=findProductType(aSession,userFunctionalityProductType);    if (productType != null) {      SbiUserFunctionality aUserFunctionality=synchronizeUserFunctionalities_extraction_2(aSession,roleTypeUserFunctionalitiesSB,aUSerFunctionalitySB,userFunctionalityName,productType);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.initializers.metadata.FunctionalitiesInitializer.synchronizeUserFunctionalities.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "synchronizeUserFunctionalities",
                        "code": "private void synchronizeUserFunctionalities(Session aSession) throws Exception {  logger.debug(\"IN\");  SourceBean userFunctionalitiesSB=getConfiguration();  configurationFileName=\"it/eng/spagobi/commons/initializers/metadata/config/roleTypeUserFunctionalities.xml\";  SourceBean roleTypeUserFunctionalitiesSB=synchronizeUserFunctionalities_extraction_1(userFunctionalitiesSB);  List userFunctionalitiesList=userFunctionalitiesSB.getAttributeAsList(\"USER_FUNCTIONALITY\");  if (userFunctionalitiesList == null || userFunctionalitiesList.isEmpty()) {    throw new Exception(\"No predefined user functionalities found!!!\");  }  List<SbiUserFunctionality> sbiUserFunctionalityList=getsbiUserFunctionalities(aSession);  for (  SbiUserFunctionality sbiUserFunc : sbiUserFunctionalityList) {    boolean isInConfigFile=false;    String nameInDB=sbiUserFunc.getName();    String productTypeInDB=sbiUserFunc.getProductType().getLabel();    Iterator it=userFunctionalitiesList.iterator();    while (it.hasNext()) {      SourceBean aUSerFunctionalitySB=(SourceBean)it.next();      String nameInFile=(String)aUSerFunctionalitySB.getAttribute(\"name\");      String productTypeInFile=(String)aUSerFunctionalitySB.getAttribute(\"productType\");      if (nameInFile.equals(nameInDB) && productTypeInFile.equals(productTypeInDB)) {        isInConfigFile=true;        break;      }    }    if (!isInConfigFile) {      deleteUserFunctionality(aSession,sbiUserFunc);    }  }  Iterator it=userFunctionalitiesList.iterator();  while (it.hasNext()) {    SourceBean aUSerFunctionalitySB=(SourceBean)it.next();    String userFunctionalityName=(String)aUSerFunctionalitySB.getAttribute(\"name\");    String userFunctionalityProductType=(String)aUSerFunctionalitySB.getAttribute(\"productType\");    SbiProductType productType=findProductType(aSession,userFunctionalityProductType);    if (productType != null) {      SbiUserFunctionality aUserFunctionality=synchronizeUserFunctionalities_extraction_2(aSession,roleTypeUserFunctionalitiesSB,aUSerFunctionalitySB,userFunctionalityName,productType);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.initializers.metadata.FunctionalitiesInitializer.synchronizeUserFunctionalities.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags": {
        "CheckBoxTag": {
            "makeFooterList": {
                "original": {
                    "method_name": "makeFooterList",
                    "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=\"\";  String dotsEnd=\"\";  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    endRangePages=((pageNumber + 3 <= pagesNumber) && (pageNumber + 3 > END_RANGE_PAGES)) ? pageNumber + 3 : END_RANGE_PAGES;    if (pageNumber + 3 <= pagesNumber) {      if (pageNumber + 3 > END_RANGE_PAGES)       endRangePages=pageNumber + 3; else       endRangePages=END_RANGE_PAGES;    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  String pageLabel=msgBuilder.getMessage(\"ListTag.pageLable\",\"messages\",httpRequest);  String pageOfLabel=msgBuilder.getMessage(\"ListTag.pageOfLable\",\"messages\",httpRequest);  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' align='left' width='10%'>\\n\");  _htmlStream.append(\"\t\t\t\t<font class='aindice'>&nbsp;\" + pageLabel + \" \"+ pageNumber+ \" \"+ pageOfLabel+ \" \"+ pagesNumber+ \"&nbsp;</font>\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t\t<TD  class='portlet-section-footer' width='28%'>\\n\");  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  if (pageNumber != 1) {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"firstPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To First Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"prevPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To Previous Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");  } else {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");  }  _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  width='15%'>\\n\");  _htmlStream.append(dotsStart + \"\\n\");  for (int i=startRangePages; i <= endRangePages; i++) {    _htmlStream.append(\"\t<A href=\\\"javascript:changePage('goTo_\" + String.valueOf(i) + \"');document.getElementById('form').submit();\\\">\"+ String.valueOf(i)+ \"</a>\\n\");    _htmlStream.append(\"&nbsp;&nbsp;\\n\");  }  _htmlStream.append(dotsEnd + \"\\n\");  _htmlStream.append(\"\t</TD>\\n\");  if (pageNumber != pagesNumber) {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"nextPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1rightarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)'\"+ \"alt='\"+ \"GO To Next Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"lastPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2rightarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)'\"+ \"alt='\"+ \"GO To Last Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");  } else {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1rightarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0>\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2rightarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0>\\n\");    _htmlStream.append(\"\t</TD>\\n\");  }  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' width='38%'>\\n\");  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t</TR>\\n\");  _htmlStream.append(\"</TABLE>\\n\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.CheckBoxTag.makeFooterList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "makeFooterList",
                        "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=\"\";  String dotsEnd=\"\";  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    endRangePages=((pageNumber + 3 <= pagesNumber) && (pageNumber + 3 > END_RANGE_PAGES)) ? pageNumber + 3 : END_RANGE_PAGES;    if (pageNumber + 3 <= pagesNumber) {      if (pageNumber + 3 > END_RANGE_PAGES)       endRangePages=pageNumber + 3; else       endRangePages=END_RANGE_PAGES;    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  String pageLabel=msgBuilder.getMessage(\"ListTag.pageLable\",\"messages\",httpRequest);  String pageOfLabel=msgBuilder.getMessage(\"ListTag.pageOfLable\",\"messages\",httpRequest);  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' align='left' width='10%'>\\n\");  _htmlStream.append(\"\t\t\t\t<font class='aindice'>&nbsp;\" + pageLabel + \" \"+ pageNumber+ \" \"+ pageOfLabel+ \" \"+ pagesNumber+ \"&nbsp;</font>\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t\t<TD  class='portlet-section-footer' width='28%'>\\n\");  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  if (pageNumber != 1) {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"firstPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To First Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"prevPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To Previous Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");  } else {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");  }  makeFooterList_extraction_3(pageNumber,pagesNumber,startRangePages,endRangePages,dotsStart,dotsEnd);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.CheckBoxTag.makeFooterList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "makeFooterList",
                        "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=\"\";  String dotsEnd=\"\";  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    endRangePages=((pageNumber + 3 <= pagesNumber) && (pageNumber + 3 > END_RANGE_PAGES)) ? pageNumber + 3 : END_RANGE_PAGES;    if (pageNumber + 3 <= pagesNumber) {      endRangePages=makeFooterList_extraction_2(pageNumber);    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  String pageLabel=msgBuilder.getMessage(\"ListTag.pageLable\",\"messages\",httpRequest);  String pageOfLabel=msgBuilder.getMessage(\"ListTag.pageOfLable\",\"messages\",httpRequest);  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' align='left' width='10%'>\\n\");  _htmlStream.append(\"\t\t\t\t<font class='aindice'>&nbsp;\" + pageLabel + \" \"+ pageNumber+ \" \"+ pageOfLabel+ \" \"+ pagesNumber+ \"&nbsp;</font>\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t\t<TD  class='portlet-section-footer' width='28%'>\\n\");  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  if (pageNumber != 1) {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"firstPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To First Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"prevPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To Previous Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");  } else {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");  }  makeFooterList_extraction_3(pageNumber,pagesNumber,startRangePages,endRangePages,dotsStart,dotsEnd);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.CheckBoxTag.makeFooterList.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "makeFooterList",
                        "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=\"\";  String dotsEnd=\"\";  if (deltaPages > 0) {    startRangePages=makeFooterList_extraction_1(pageNumber,pagesNumber);    if (pageNumber + 3 <= pagesNumber) {      endRangePages=makeFooterList_extraction_2(pageNumber);    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  String pageLabel=msgBuilder.getMessage(\"ListTag.pageLable\",\"messages\",httpRequest);  String pageOfLabel=msgBuilder.getMessage(\"ListTag.pageOfLable\",\"messages\",httpRequest);  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' align='left' width='10%'>\\n\");  _htmlStream.append(\"\t\t\t\t<font class='aindice'>&nbsp;\" + pageLabel + \" \"+ pageNumber+ \" \"+ pageOfLabel+ \" \"+ pagesNumber+ \"&nbsp;</font>\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t\t<TD  class='portlet-section-footer' width='28%'>\\n\");  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  if (pageNumber != 1) {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"firstPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To First Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center'  align='left' width='1%'>\\n\");    _htmlStream.append(\"<input type='image' \" + \"name='\" + \"prevPage\"+ \"' \"+ \"src ='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' \"+ \"align='right' border='0' \"+ \"onClick='changePage(this.name)' \"+ \"alt='\"+ \"GO To Previous Page\"+ \"'>\\n\");    _htmlStream.append(\"\t</TD>\\n\");  } else {    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");    _htmlStream.append(\"\t<TD class='portlet-section-footer' valign='center' align='left' width='1%'>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' ALIGN=RIGHT border=0 />\\n\");    _htmlStream.append(\"\t</TD>\\n\");  }  makeFooterList_extraction_3(pageNumber,pagesNumber,startRangePages,endRangePages,dotsStart,dotsEnd);}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.CheckBoxTag.makeFooterList.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "ListTag": {
            "makeFooterList": {
                "original": {
                    "method_name": "makeFooterList",
                    "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=null;  String dotsEnd=null;  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    endRangePages=((pageNumber + 3 <= pagesNumber) && (pageNumber + 3 > END_RANGE_PAGES)) ? pageNumber + 3 : END_RANGE_PAGES;    if (pageNumber + 3 <= pagesNumber) {      if (pageNumber + 3 > END_RANGE_PAGES)       endRangePages=pageNumber + 3; else       endRangePages=END_RANGE_PAGES;    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  String pageLabel=msgBuilder.getMessage(\"ListTag.pageLable\",\"messages\",httpRequest);  String pageOfLabel=msgBuilder.getMessage(\"ListTag.pageOfLable\",\"messages\",httpRequest);  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' style='vertical-align:top;horizontal-align:left;width:30%;'>\\n\");  _htmlStream.append(\"\t\t\t\t<font class='aindice'>&nbsp;\" + pageLabel + \" \"+ pageNumber+ \" \"+ pageOfLabel+ \" \"+ pagesNumber+ \"&nbsp;</font>\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t\t<TD  class='portlet-section-footer' style='vertical-align:top;horizontal-align:center;width:40%;'>\\n\");  if (pageNumber != 1) {    _htmlStream.append(\"\t\t\t<A href=\\\"\" + _firstUrl + \"\\\"><IMG src='\"+ urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme)+ \"' border=0></a>\\n\");    _htmlStream.append(\"\t\t\t<A href=\\\"\" + _prevUrl + \"\\\"><IMG src='\"+ urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme)+ \"' border=0></a>\\n\");  } else {    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2leftarrow.png\",currTheme) + \"' border=0 />\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1leftarrow.png\",currTheme) + \"' border=0 />\\n\");  }  if (dotsStart != null) {    _htmlStream.append(\"<A style='vertical-align:top;'>\" + dotsStart + \"</a>\\n\");    _htmlStream.append(\"&nbsp;&nbsp;\\n\");  }  for (int i=startRangePages; i <= endRangePages; i++) {    HashMap tmpParamsMap=new HashMap();    tmpParamsMap.putAll(_providerUrlMap);    tmpParamsMap.put(\"MESSAGE\",\"LIST_PAGE\");    tmpParamsMap.put(\"LIST_PAGE\",String.valueOf(i));    String tmpUrl=createUrl(tmpParamsMap);    String ORDER=(String)_serviceRequest.getAttribute(\"ORDER\");    String FIELD_ORDER=(String)_serviceRequest.getAttribute(\"FIELD_ORDER\");    if (FIELD_ORDER != null && ORDER != null) {      tmpParamsMap.put(\"FIELD_ORDER\",FIELD_ORDER);      tmpParamsMap.put(\"ORDER\",ORDER);    }    String valueFilter=(String)_serviceRequest.getAttribute(SpagoBIConstants.VALUE_FILTER);    String typeValueFilter=(String)_serviceRequest.getAttribute(SpagoBIConstants.TYPE_VALUE_FILTER);    String columnFilter=(String)_serviceRequest.getAttribute(SpagoBIConstants.COLUMN_FILTER);    String typeFilter=(String)_serviceRequest.getAttribute(SpagoBIConstants.TYPE_FILTER);    if (valueFilter != null && columnFilter != null && typeFilter != null) {      tmpParamsMap.put(SpagoBIConstants.VALUE_FILTER,valueFilter);      tmpParamsMap.put(SpagoBIConstants.TYPE_VALUE_FILTER,typeValueFilter);      tmpParamsMap.put(SpagoBIConstants.COLUMN_FILTER,columnFilter);      tmpParamsMap.put(SpagoBIConstants.TYPE_FILTER,typeFilter);      tmpUrl=createUrl(tmpParamsMap);    }    tmpUrl=StringEscapeUtils.escapeHtml(tmpUrl);    _htmlStream.append(\"\t<A style='vertical-align:top;' href=\\\"\" + tmpUrl + \"\\\">\"+ String.valueOf(i)+ \"</a>\\n\");    _htmlStream.append(\"&nbsp;&nbsp;\\n\");  }  if (dotsEnd != null) {    _htmlStream.append(\"<A style='vertical-align:top;'>\" + dotsEnd + \"</a>\\n\");  }  if (pageNumber != pagesNumber) {    _htmlStream.append(\"\t\t\t<A href=\\\"\" + _nextUrl + \"\\\"><IMG src='\"+ urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1rightarrow.png\",currTheme)+ \"' border=0 /></a>\\n\");    _htmlStream.append(\"\t\t\t<A href=\\\"\" + _lastUrl + \"\\\"><IMG src='\"+ urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2rightarrow.png\",currTheme)+ \"' border=0 /></a>\\n\");  } else {    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/1rightarrow.png\",currTheme) + \"' border=0>\\n\");    _htmlStream.append(\"\t\t\t<IMG src='\" + urlBuilder.getResourceLinkByTheme(httpRequest,\"/img/commons/2rightarrow.png\",currTheme) + \"' border=0>\\n\");  }  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t\t<TD class='portlet-section-footer' style='width:30%;'>\\n\");  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t</TR>\\n\");  _htmlStream.append(\"</TABLE>\\n\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.ListTag.makeFooterList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "makeFooterList",
                        "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=null;  String dotsEnd=null;  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    endRangePages=((pageNumber + 3 <= pagesNumber) && (pageNumber + 3 > END_RANGE_PAGES)) ? pageNumber + 3 : END_RANGE_PAGES;    if (pageNumber + 3 <= pagesNumber) {      if (pageNumber + 3 > END_RANGE_PAGES)       endRangePages=pageNumber + 3; else       endRangePages=END_RANGE_PAGES;    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  makeFooterList_extraction_3(pageNumber,pagesNumber,startRangePages,endRangePages,dotsStart,dotsEnd);  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t</TR>\\n\");  _htmlStream.append(\"</TABLE>\\n\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.ListTag.makeFooterList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "makeFooterList",
                        "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=null;  String dotsEnd=null;  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    endRangePages=((pageNumber + 3 <= pagesNumber) && (pageNumber + 3 > END_RANGE_PAGES)) ? pageNumber + 3 : END_RANGE_PAGES;    if (pageNumber + 3 <= pagesNumber) {      endRangePages=makeFooterList_extraction_2(pageNumber);    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  makeFooterList_extraction_3(pageNumber,pagesNumber,startRangePages,endRangePages,dotsStart,dotsEnd);  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t</TR>\\n\");  _htmlStream.append(\"</TABLE>\\n\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.ListTag.makeFooterList.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "makeFooterList",
                        "code": "/**  * Builds Table list footer, reading all request information. * @throws JspException If any Exception occurs. */protected void makeFooterList() throws JspException {  String pageNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGE_NUMBER\");  int pageNumber=1;  try {    pageNumber=Integer.parseInt(pageNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGE_NUMBER nullo\");  }  String pagesNumberString=(String)_content.getAttribute(\"PAGED_LIST.PAGES_NUMBER\");  int pagesNumber=1;  try {    pagesNumber=Integer.parseInt(pagesNumberString);  } catch (  NumberFormatException ex) {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"ListTag::makeNavigationButton:: PAGES_NUMBER nullo\");  }  int prevPage=pageNumber - 1;  if (prevPage < 1)   prevPage=1;  int nextPage=pageNumber + 1;  if (nextPage > pagesNumber)   nextPage=pagesNumber;  int startRangePages=1;  int endRangePages=END_RANGE_PAGES;  int deltaPages=pagesNumber - endRangePages;  String dotsStart=null;  String dotsEnd=null;  if (deltaPages > 0) {    startRangePages=(pageNumber - 3 > 0) ? pageNumber - 3 : 1;    makeFooterList_extraction_1(pageNumber,pagesNumber);    if (pageNumber + 3 <= pagesNumber) {      endRangePages=makeFooterList_extraction_2(pageNumber);    } else {      startRangePages=startRangePages - (pageNumber + 3 - pagesNumber);      endRangePages=pagesNumber;    }    if (endRangePages < pagesNumber)     dotsEnd=\"... \";    if (startRangePages > 1)     dotsStart=\"... \";  } else {    startRangePages=1;    endRangePages=pagesNumber;  }  _htmlStream.append(\" <TABLE CELLPADDING=0 CELLSPACING=0  WIDTH='100%' BORDER=0>\\n\");  _htmlStream.append(\"\t<TR>\\n\");  makeFooterList_extraction_3(pageNumber,pagesNumber,startRangePages,endRangePages,dotsStart,dotsEnd);  _htmlStream.append(\"\t\t\t    &nbsp;\\n\");  _htmlStream.append(\"\t\t</TD>\\n\");  _htmlStream.append(\"\t</TR>\\n\");  _htmlStream.append(\"</TABLE>\\n\");}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.presentation.tags.ListTag.makeFooterList.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.commons.services": {
        "DelegatedBasicListService": {
            "doesRowSatisfyCondition": {
                "original": {
                    "method_name": "doesRowSatisfyCondition",
                    "code": "private static boolean doesRowSatisfyCondition(SourceBean row,String valuefilter,String valuetypefilter,String columnfilter,String typeFilter) throws EMFValidationError {  Object attribute=row.getAttribute(columnfilter);  if (attribute == null)   return false;  String value=attribute.toString();  if (value == null)   value=\"\";  if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.STRING_TYPE_FILTER)) {    valuefilter=valuefilter.toUpperCase();    value=value.toUpperCase();    if (typeFilter.equalsIgnoreCase(SpagoBIConstants.START_FILTER)) {      return value.trim().startsWith(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.END_FILTER)) {      return value.trim().endsWith(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.CONTAIN_FILTER)) {      return value.indexOf(valuefilter) != -1;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.EQUAL_FILTER)) {      return value.equals(valuefilter) || value.trim().equals(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) < 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_OR_EQUAL_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) <= 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) > 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_OR_EQUAL_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) >= 0;    } else {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);      throw error;    }  } else   if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.NUMBER_TYPE_FILTER)) {    Double valueDouble=null;    Double valueFilterDouble=null;    try {      valueDouble=new Double(value);    } catch (    Exception e) {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the string value is not a recognizable number representations: value to be filtered = \" + value,e);      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList\");      Vector v=new Vector();      v.add(value);      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.WARNING,SpagoBIConstants.TYPE_VALUE_FILTER,\"1051\",v,params);      throw error;    }    try {      valueFilterDouble=new Double(valuefilter);    } catch (    Exception e) {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: input string value is not a recognizable number representations: filter value = \" + valuefilter,e);      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList\");      Vector v=new Vector();      v.add(valuefilter);      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.WARNING,SpagoBIConstants.VALUE_FILTER,\"1052\",v,params);      throw error;    }    if (typeFilter.equalsIgnoreCase(SpagoBIConstants.EQUAL_FILTER)) {      return valueDouble.doubleValue() == valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_FILTER)) {      return valueDouble.doubleValue() < valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_OR_EQUAL_FILTER)) {      return valueDouble.doubleValue() <= valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_FILTER)) {      return valueDouble.doubleValue() > valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_OR_EQUAL_FILTER)) {      return valueDouble.doubleValue() >= valueFilterDouble.doubleValue();    } else {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);      throw error;    }  } else   if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.DATE_TYPE_FILTER)) {    String format=SingletonConfig.getInstance().getConfigValue(\"SPAGOBI.DATE-FORMAT-SERVER.format\");    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: applying date format \" + format + \" for filtering.\");    Date valueDate=null;    Date valueFilterDate=null;    try {      valueDate=toDate(value,format);    } catch (    Exception e) {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the string value is not a valid date representation according to the format \" + format + \": value to be filtered = \"+ value,e);      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList\");      Vector v=new Vector();      v.add(value);      v.add(format);      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.WARNING,SpagoBIConstants.TYPE_VALUE_FILTER,\"1054\",v,params);      throw error;    }    try {      valueFilterDate=toDate(valuefilter,format);    } catch (    Exception e) {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: input string is not a valid date representation according to the format \" + format + \": filter value = \"+ valuefilter,e);      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList\");      Vector v=new Vector();      v.add(valuefilter);      v.add(format);      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.WARNING,SpagoBIConstants.VALUE_FILTER,\"1055\",v,params);      throw error;    }    if (typeFilter.equalsIgnoreCase(SpagoBIConstants.EQUAL_FILTER)) {      return valueDate.compareTo(valueFilterDate) == 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_FILTER)) {      return valueDate.compareTo(valueFilterDate) < 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_OR_EQUAL_FILTER)) {      return valueDate.compareTo(valueFilterDate) <= 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_FILTER)) {      return valueDate.compareTo(valueFilterDate) > 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_OR_EQUAL_FILTER)) {      return valueDate.compareTo(valueFilterDate) >= 0;    } else {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);      throw error;    }  } else {    TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter value type '\" + valuetypefilter + \"' is not a valid filter value type\");    HashMap params=new HashMap();    params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter value type '\" + valuetypefilter + \"' is not a valid filter value type\");    EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);    throw error;  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.services.DelegatedBasicListService.doesRowSatisfyCondition.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "doesRowSatisfyCondition",
                        "code": "private static boolean doesRowSatisfyCondition(SourceBean row,String valuefilter,String valuetypefilter,String columnfilter,String typeFilter) throws EMFValidationError {  Object attribute=row.getAttribute(columnfilter);  if (attribute == null)   return false;  String value=attribute.toString();  if (value == null)   value=\"\";  if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.STRING_TYPE_FILTER)) {    valuefilter=valuefilter.toUpperCase();    value=value.toUpperCase();    if (typeFilter.equalsIgnoreCase(SpagoBIConstants.START_FILTER)) {      return value.trim().startsWith(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.END_FILTER)) {      return value.trim().endsWith(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.CONTAIN_FILTER)) {      return value.indexOf(valuefilter) != -1;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.EQUAL_FILTER)) {      return value.equals(valuefilter) || value.trim().equals(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) < 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_OR_EQUAL_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) <= 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) > 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_OR_EQUAL_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) >= 0;    } else {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);      throw error;    }  } else   if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.NUMBER_TYPE_FILTER)) {    Double valueDouble=null;    Double valueFilterDouble=null;    try {      valueDouble=new Double(value);    } catch (    Exception e) {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the string value is not a recognizable number representations: value to be filtered = \" + value,e);      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList\");      Vector v=new Vector();      v.add(value);      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.WARNING,SpagoBIConstants.TYPE_VALUE_FILTER,\"1051\",v,params);      throw error;    }    try {      valueFilterDouble=new Double(valuefilter);    } catch (    Exception e) {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: input string value is not a recognizable number representations: filter value = \" + valuefilter,e);      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList\");      Vector v=new Vector();      v.add(valuefilter);      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.WARNING,SpagoBIConstants.VALUE_FILTER,\"1052\",v,params);      throw error;    }    if (typeFilter.equalsIgnoreCase(SpagoBIConstants.EQUAL_FILTER)) {      return valueDouble.doubleValue() == valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_FILTER)) {      return valueDouble.doubleValue() < valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_OR_EQUAL_FILTER)) {      return valueDouble.doubleValue() <= valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_FILTER)) {      return valueDouble.doubleValue() > valueFilterDouble.doubleValue();    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_OR_EQUAL_FILTER)) {      return valueDouble.doubleValue() >= valueFilterDouble.doubleValue();    } else {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);      throw error;    }  } else   return doesRowSatisfyCondition_extraction_2(valuefilter,valuetypefilter,typeFilter,value);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.services.DelegatedBasicListService.doesRowSatisfyCondition.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "doesRowSatisfyCondition",
                        "code": "private static boolean doesRowSatisfyCondition(SourceBean row,String valuefilter,String valuetypefilter,String columnfilter,String typeFilter) throws EMFValidationError {  Object attribute=row.getAttribute(columnfilter);  if (attribute == null)   return false;  String value=attribute.toString();  if (value == null)   value=\"\";  if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.STRING_TYPE_FILTER)) {    valuefilter=valuefilter.toUpperCase();    value=value.toUpperCase();    if (typeFilter.equalsIgnoreCase(SpagoBIConstants.START_FILTER)) {      return value.trim().startsWith(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.END_FILTER)) {      return value.trim().endsWith(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.CONTAIN_FILTER)) {      return value.indexOf(valuefilter) != -1;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.EQUAL_FILTER)) {      return value.equals(valuefilter) || value.trim().equals(valuefilter);    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) < 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.LESS_OR_EQUAL_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) <= 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) > 0;    } else     if (typeFilter.equalsIgnoreCase(SpagoBIConstants.GREATER_OR_EQUAL_FILTER)) {      return value.trim().compareToIgnoreCase(valuefilter) >= 0;    } else {      TracerSingleton.log(Constants.NOME_MODULO,TracerSingleton.WARNING,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      HashMap params=new HashMap();      params.put(Constants.NOME_MODULO,\"DelegatedBasicListService::filterList: the filter type '\" + typeFilter + \"' is not a valid filter type\");      EMFValidationError error=new EMFValidationError(EMFErrorSeverity.ERROR,SpagoBIConstants.TYPE_FILTER,\"100\",null,params);      throw error;    }  } else   if (valuetypefilter.equalsIgnoreCase(SpagoBIConstants.NUMBER_TYPE_FILTER)) {    return doesRowSatisfyCondition_extraction_1(valuefilter,typeFilter,value);  } else   return doesRowSatisfyCondition_extraction_2(valuefilter,valuetypefilter,typeFilter,value);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.services.DelegatedBasicListService.doesRowSatisfyCondition.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "LoginModule": {
            "checkPwd": {
                "original": {
                    "method_name": "checkPwd",
                    "code": "private boolean checkPwd(SbiUser user) throws Exception {  logger.debug(\"IN\");  boolean toReturn=false;  if (user == null)   return toReturn;  if (encriptedBefore72(user)) {    logger.info(\"Old encrypting method. Change password required.\");    return true;  }  Date currentDate=new Date();  IConfigDAO configDao=DAOFactory.getSbiConfigDAO();  List lstConfigChecks=configDao.loadConfigParametersByProperties(PROP_NODE);  logger.debug(\"checks found on db: \" + lstConfigChecks.size());  for (int i=0; i < lstConfigChecks.size(); i++) {    Config check=(Config)lstConfigChecks.get(i);    if ((SpagoBIConstants.CHANGEPWD_CHANGE_FIRST).equals(check.getLabel()) && new Boolean(check.getValueCheck()) == true && user.getDtLastAccess() == null) {      logger.info(\"The pwd needs to activate!\");      toReturn=true;      break;    }    if ((SpagoBIConstants.CHANGEPWD_EXPIRED_TIME).equals(check.getLabel()) && user.getDtPwdEnd() != null && currentDate.compareTo(user.getDtPwdEnd()) >= 0) {      logger.info(\"The pwd is expiring... it should be changed\");      toReturn=true;      break;    }    if ((SpagoBIConstants.CHANGEPWD_DISACTIVE_TIME).equals(check.getLabel())) {      Date tmpEndForUnused=null;      if (user.getDtLastAccess() != null) {        SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT);        Calendar cal=Calendar.getInstance();        cal.set(user.getDtLastAccess().getYear() + 1900,user.getDtLastAccess().getMonth(),user.getDtLastAccess().getDate());        cal.add(Calendar.MONTH,6);        try {          tmpEndForUnused=StringUtilities.stringToDate(sdf.format(cal.getTime()),DATE_FORMAT);          logger.debug(\"End Date For Unused: \" + tmpEndForUnused);        } catch (        Exception e) {          logger.error(\"The control pwd goes on error: \" + e);        }      }      if (tmpEndForUnused != null && currentDate.compareTo(tmpEndForUnused) >= 0) {        logger.info(\"The pwd is unused more than 6 months! It's locked!!\");        toReturn=true;        break;      }    }  }  if (user.getFlgPwdBlocked() != null && user.getFlgPwdBlocked()) {    logger.info(\"The pwd needs to activate!\");    toReturn=true;  }  logger.debug(\"OUT\");  return toReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.services.LoginModule.checkPwd.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "checkPwd",
                        "code": "private boolean checkPwd(SbiUser user) throws Exception {  logger.debug(\"IN\");  boolean toReturn=false;  if (user == null)   return toReturn;  if (encriptedBefore72(user)) {    logger.info(\"Old encrypting method. Change password required.\");    return true;  }  Date currentDate=new Date();  IConfigDAO configDao=DAOFactory.getSbiConfigDAO();  List lstConfigChecks=configDao.loadConfigParametersByProperties(PROP_NODE);  logger.debug(\"checks found on db: \" + lstConfigChecks.size());  for (int i=0; i < lstConfigChecks.size(); i++) {    Config check=(Config)lstConfigChecks.get(i);    if ((SpagoBIConstants.CHANGEPWD_CHANGE_FIRST).equals(check.getLabel()) && new Boolean(check.getValueCheck()) == true && user.getDtLastAccess() == null) {      logger.info(\"The pwd needs to activate!\");      toReturn=true;      break;    }    if ((SpagoBIConstants.CHANGEPWD_EXPIRED_TIME).equals(check.getLabel()) && user.getDtPwdEnd() != null && currentDate.compareTo(user.getDtPwdEnd()) >= 0) {      logger.info(\"The pwd is expiring... it should be changed\");      toReturn=true;      break;    }    if ((SpagoBIConstants.CHANGEPWD_DISACTIVE_TIME).equals(check.getLabel())) {      Date tmpEndForUnused=null;      if (user.getDtLastAccess() != null) {        SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT);        Calendar cal=Calendar.getInstance();        cal.set(user.getDtLastAccess().getYear() + 1900,user.getDtLastAccess().getMonth(),user.getDtLastAccess().getDate());        cal.add(Calendar.MONTH,6);        try {          tmpEndForUnused=StringUtilities.stringToDate(sdf.format(cal.getTime()),DATE_FORMAT);          logger.debug(\"End Date For Unused: \" + tmpEndForUnused);        } catch (        Exception e) {          logger.error(\"The control pwd goes on error: \" + e);        }      }      if (tmpEndForUnused != null && currentDate.compareTo(tmpEndForUnused) >= 0) {        logger.info(\"The pwd is unused more than 6 months! It's locked!!\");        toReturn=true;        break;      }    }  }  toReturn=checkPwd_extraction_2(user,toReturn);  logger.debug(\"OUT\");  return toReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.services.LoginModule.checkPwd.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "checkPwd",
                        "code": "private boolean checkPwd(SbiUser user) throws Exception {  logger.debug(\"IN\");  boolean toReturn=false;  if (user == null)   return toReturn;  if (encriptedBefore72(user)) {    logger.info(\"Old encrypting method. Change password required.\");    return true;  }  Date currentDate=new Date();  IConfigDAO configDao=DAOFactory.getSbiConfigDAO();  List lstConfigChecks=configDao.loadConfigParametersByProperties(PROP_NODE);  logger.debug(\"checks found on db: \" + lstConfigChecks.size());  for (int i=0; i < lstConfigChecks.size(); i++) {    Config check=(Config)lstConfigChecks.get(i);    if ((SpagoBIConstants.CHANGEPWD_CHANGE_FIRST).equals(check.getLabel()) && new Boolean(check.getValueCheck()) == true && user.getDtLastAccess() == null) {      logger.info(\"The pwd needs to activate!\");      toReturn=true;      break;    }    if ((SpagoBIConstants.CHANGEPWD_EXPIRED_TIME).equals(check.getLabel()) && user.getDtPwdEnd() != null && currentDate.compareTo(user.getDtPwdEnd()) >= 0) {      logger.info(\"The pwd is expiring... it should be changed\");      toReturn=true;      break;    }    if ((SpagoBIConstants.CHANGEPWD_DISACTIVE_TIME).equals(check.getLabel())) {      Date tmpEndForUnused=null;      tmpEndForUnused=checkPwd_extraction_1(user,tmpEndForUnused);      if (tmpEndForUnused != null && currentDate.compareTo(tmpEndForUnused) >= 0) {        logger.info(\"The pwd is unused more than 6 months! It's locked!!\");        toReturn=true;        break;      }    }  }  toReturn=checkPwd_extraction_2(user,toReturn);  logger.debug(\"OUT\");  return toReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.services.LoginModule.checkPwd.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.commons.utilities": {
        "ParameterValuesEncoder": {
            "encodeDescription": {
                "original": {
                    "method_name": "encodeDescription",
                    "code": "/**  * Get the description of a BIObjectParameter and encode it's description.. In this way we create a new parameter with the description of the parameter to pass at the engine * @param biobjPar the parameter * @return a string with the encoded description */public String encodeDescription(BIObjectParameter biobjPar){  logger.debug(\"IN\");  if (biobjPar.getParameterValues() == null) {    logger.debug(\"biobjPar.getParameterValues() == null\");    return null;  }  Parameter parameter=biobjPar.getParameter();  if (parameter != null) {    if (biobjPar.getParameterValuesDescription() == null) {      return \"\";    }    ModalitiesValue modValue=parameter.getModalityValue();    if (modValue != null) {      boolean mult=biobjPar.isMultivalue();      String typeCode=biobjPar.getParameter().getModalityValue().getITypeCd();      logger.debug(\"typeCode=\" + typeCode);      if (typeCode.equalsIgnoreCase(SpagoBIConstants.INPUT_TYPE_MAN_IN_CODE)) {        mult=false;      }      if (!mult) {        return (String)biobjPar.getParameterValuesDescription().get(0);      } else {        return encodeMultivalueParamsDesciption(biobjPar.getParameterValuesDescription());      }    } else {      List values=biobjPar.getParameterValuesDescription();      if (values != null && values.size() > 0) {        if (values.size() == 1)         return (String)biobjPar.getParameterValuesDescription().get(0); else         return encodeMultivalueParamsDesciption(biobjPar.getParameterValuesDescription());      } else       return \"\";    }  } else {    Integer parId=biobjPar.getParID();    String type=null;    if (parId == null) {      logger.warn(\"Parameter object nor parameter id are set into BiObjectPrameter with label = \" + biobjPar.getLabel() + \" of document with id = \"+ biobjPar.getBiObjectID());    } else {      try {        Parameter aParameter=DAOFactory.getParameterDAO().loadForDetailByParameterID(parId);        type=aParameter.getType();      } catch (      EMFUserError e) {        logger.warn(\"Error loading parameter with id = \" + biobjPar.getParID());      }    }    List values=biobjPar.getParameterValuesDescription();    if (values != null && values.size() > 0) {      if (values.size() == 1)       return (String)biobjPar.getParameterValuesDescription().get(0); else       return encodeMultivalueParamsDesciption(biobjPar.getParameterValuesDescription());    } else     return \"\";  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.utilities.ParameterValuesEncoder.encodeDescription.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "encodeDescription",
                        "code": "/**  * Get the description of a BIObjectParameter and encode it's description.. In this way we create a new parameter with the description of the parameter to pass at the engine * @param biobjPar the parameter * @return a string with the encoded description */public String encodeDescription(BIObjectParameter biobjPar){  logger.debug(\"IN\");  if (biobjPar.getParameterValues() == null) {    logger.debug(\"biobjPar.getParameterValues() == null\");    return null;  }  Parameter parameter=biobjPar.getParameter();  if (parameter != null) {    if (biobjPar.getParameterValuesDescription() == null) {      return \"\";    }    ModalitiesValue modValue=parameter.getModalityValue();    if (modValue != null) {      boolean mult=biobjPar.isMultivalue();      String typeCode=biobjPar.getParameter().getModalityValue().getITypeCd();      logger.debug(\"typeCode=\" + typeCode);      if (typeCode.equalsIgnoreCase(SpagoBIConstants.INPUT_TYPE_MAN_IN_CODE)) {        mult=false;      }      if (!mult) {        return (String)biobjPar.getParameterValuesDescription().get(0);      } else {        return encodeMultivalueParamsDesciption(biobjPar.getParameterValuesDescription());      }    } else {      List values=biobjPar.getParameterValuesDescription();      if (values != null && values.size() > 0) {        if (values.size() == 1)         return (String)biobjPar.getParameterValuesDescription().get(0); else         return encodeMultivalueParamsDesciption(biobjPar.getParameterValuesDescription());      } else       return \"\";    }  } else {    Integer parId=biobjPar.getParID();    String type=null;    if (parId == null) {      logger.warn(\"Parameter object nor parameter id are set into BiObjectPrameter with label = \" + biobjPar.getLabel() + \" of document with id = \"+ biobjPar.getBiObjectID());    } else {      try {        Parameter aParameter=DAOFactory.getParameterDAO().loadForDetailByParameterID(parId);        type=aParameter.getType();      } catch (      EMFUserError e) {        logger.warn(\"Error loading parameter with id = \" + biobjPar.getParID());      }    }    List values=biobjPar.getParameterValuesDescription();    if (values != null && values.size() > 0) {      return encodeDescription_extraction_2(biobjPar,values);    } else     return \"\";  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.utilities.ParameterValuesEncoder.encodeDescription.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "encodeDescription",
                        "code": "/**  * Get the description of a BIObjectParameter and encode it's description.. In this way we create a new parameter with the description of the parameter to pass at the engine * @param biobjPar the parameter * @return a string with the encoded description */public String encodeDescription(BIObjectParameter biobjPar){  logger.debug(\"IN\");  if (biobjPar.getParameterValues() == null) {    logger.debug(\"biobjPar.getParameterValues() == null\");    return null;  }  Parameter parameter=biobjPar.getParameter();  if (parameter != null) {    if (biobjPar.getParameterValuesDescription() == null) {      return \"\";    }    ModalitiesValue modValue=parameter.getModalityValue();    return encodeDescription_extraction_1(biobjPar,modValue);  } else {    Integer parId=biobjPar.getParID();    String type=null;    if (parId == null) {      logger.warn(\"Parameter object nor parameter id are set into BiObjectPrameter with label = \" + biobjPar.getLabel() + \" of document with id = \"+ biobjPar.getBiObjectID());    } else {      try {        Parameter aParameter=DAOFactory.getParameterDAO().loadForDetailByParameterID(parId);        type=aParameter.getType();      } catch (      EMFUserError e) {        logger.warn(\"Error loading parameter with id = \" + biobjPar.getParID());      }    }    List values=biobjPar.getParameterValuesDescription();    if (values != null && values.size() > 0) {      return encodeDescription_extraction_2(biobjPar,values);    } else     return \"\";  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.commons.utilities.ParameterValuesEncoder.encodeDescription.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts": {
        "BarCharts": {
            "calculateValue": {
                "original": {
                    "method_name": "calculateValue",
                    "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  categories=new HashMap();  seriesCaptions=new LinkedHashMap();  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  categoriesNumber=0;  seriesNames=new Vector();  catGroupNames=new Vector();  if (filterCatGroups == true) {    catGroups=new HashMap();  }  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean category=(SourceBean)iterator.next();    List atts=category.getContainedAttributes();    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      first=false;    }    HashMap series=new HashMap();    String catValue=\"\";    String cat_group_name=\"\";    String name=\"\";    String value=\"\";    int contSer=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=new String((String)object.getValue());      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;        categoriesNumber=categoriesNumber + 1;        categories.put(new Integer(categoriesNumber),value);      } else       if (name.equalsIgnoreCase(\"cat_group\")) {        cat_group_name=value;      } else       if (this.getNumberSerVisualization().intValue() > 0 && contSer < this.getNumberSerVisualization().intValue()) {        series.put(name,value);        contSer++;      } else       if (seriesLabelsMap != null) {        String serieLabel=(String)seriesLabelsMap.get(name);        if (serieLabel != null) {          series.put(serieLabel,value);          seriesCaptions.put(serieLabel,name);        }      } else       series.put(name,value);    }    if (!cat_group_name.equalsIgnoreCase(\"\") && !catValue.equalsIgnoreCase(\"\") && catGroups != null) {      catGroups.put(catValue,cat_group_name);      if (!(catGroupNames.contains(cat_group_name))) {        catGroupNames.add(cat_group_name);      }    }    for (Iterator iterator3=series.keySet().iterator(); iterator3.hasNext(); ) {      String nameS=(String)iterator3.next();      String labelS=\"\";      if (!hiddenSeries.contains(nameS)) {        if (seriesLabelsMap != null && (seriesCaptions != null && seriesCaptions.size() > 0)) {          nameS=(String)(seriesCaptions.get(nameS));          labelS=(String)seriesLabelsMap.get(nameS);        } else         labelS=nameS;        String valueS=(String)series.get(labelS);        if (labelS != null && valueS != null && !valueS.equals(\"null\") && !valueS.equals(\"\")) {          dataset.addValue(Double.valueOf(valueS).doubleValue(),labelS,catValue);          if (!seriesNames.contains(labelS)) {            seriesNames.add(labelS);          }        }      }    }  }  if (listAtts.size() == 0) {    if (name.indexOf(\"$F{\") >= 0) {      setTitleParameter(\"\");    }    if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {      setSubTitleParameter(\"\");    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.BarCharts.calculateValue.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  categories=new HashMap();  seriesCaptions=new LinkedHashMap();  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  categoriesNumber=0;  seriesNames=new Vector();  catGroupNames=new Vector();  if (filterCatGroups == true) {    catGroups=new HashMap();  }  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean category=(SourceBean)iterator.next();    List atts=category.getContainedAttributes();    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      first=false;    }    HashMap series=new HashMap();    String catValue=\"\";    String cat_group_name=\"\";    String name=\"\";    String value=\"\";    int contSer=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=new String((String)object.getValue());      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;        categoriesNumber=categoriesNumber + 1;        categories.put(new Integer(categoriesNumber),value);      } else       if (name.equalsIgnoreCase(\"cat_group\")) {        cat_group_name=value;      } else       if (this.getNumberSerVisualization().intValue() > 0 && contSer < this.getNumberSerVisualization().intValue()) {        series.put(name,value);        contSer++;      } else       if (seriesLabelsMap != null) {        String serieLabel=(String)seriesLabelsMap.get(name);        if (serieLabel != null) {          series.put(serieLabel,value);          seriesCaptions.put(serieLabel,name);        }      } else       series.put(name,value);    }    if (!cat_group_name.equalsIgnoreCase(\"\") && !catValue.equalsIgnoreCase(\"\") && catGroups != null) {      catGroups.put(catValue,cat_group_name);      if (!(catGroupNames.contains(cat_group_name))) {        catGroupNames.add(cat_group_name);      }    }    for (Iterator iterator3=series.keySet().iterator(); iterator3.hasNext(); ) {      calculateValue_extraction_3(dataset,series,catValue,iterator3);    }  }  if (listAtts.size() == 0) {    if (name.indexOf(\"$F{\") >= 0) {      setTitleParameter(\"\");    }    if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {      setSubTitleParameter(\"\");    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.BarCharts.calculateValue.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  categories=new HashMap();  seriesCaptions=new LinkedHashMap();  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  categoriesNumber=0;  seriesNames=new Vector();  catGroupNames=new Vector();  if (filterCatGroups == true) {    catGroups=new HashMap();  }  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean category=(SourceBean)iterator.next();    List atts=category.getContainedAttributes();    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      first=false;    }    HashMap series=new HashMap();    String catValue=\"\";    catValue=calculateValue_extraction_2(atts,series,catValue);    for (Iterator iterator3=series.keySet().iterator(); iterator3.hasNext(); ) {      calculateValue_extraction_3(dataset,series,catValue,iterator3);    }  }  if (listAtts.size() == 0) {    if (name.indexOf(\"$F{\") >= 0) {      setTitleParameter(\"\");    }    if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {      setSubTitleParameter(\"\");    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.BarCharts.calculateValue.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  categories=new HashMap();  seriesCaptions=new LinkedHashMap();  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  categoriesNumber=0;  seriesNames=new Vector();  catGroupNames=new Vector();  if (filterCatGroups == true) {    catGroups=new HashMap();  }  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean category=(SourceBean)iterator.next();    List atts=category.getContainedAttributes();    if (first) {      first=calculateValue_extraction_1(atts);    }    HashMap series=new HashMap();    String catValue=\"\";    catValue=calculateValue_extraction_2(atts,series,catValue);    for (Iterator iterator3=series.keySet().iterator(); iterator3.hasNext(); ) {      calculateValue_extraction_3(dataset,series,catValue,iterator3);    }  }  if (listAtts.size() == 0) {    if (name.indexOf(\"$F{\") >= 0) {      setTitleParameter(\"\");    }    if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {      setSubTitleParameter(\"\");    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.BarCharts.calculateValue.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "CombinedCategoryBar": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  SourceBean draws=(SourceBean)content.getAttribute(\"SERIES_DRAW\");  if (draws == null) {    draws=(SourceBean)content.getAttribute(\"CONF.SERIES_DRAW\");  }  seriesDraw=new LinkedHashMap();  if (draws != null) {    List atts=draws.getContainedAttributes();    String serieName=\"\";    String serieDraw=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      serieDraw=new String((String)object.getValue());      if (serieDraw.equalsIgnoreCase(\"line\")) {        seriesDraw.put(serieName,\"line\");      } else       if (serieDraw.equalsIgnoreCase(\"line_no_shapes\")) {        seriesDraw.put(serieName,\"line_no_shapes\");      } else {        seriesDraw.put(serieName,\"bar\");      }    }  }  if (confParameters.get(\"second_axis_label\") != null) {    secondAxisLabel=(String)confParameters.get(\"second_axis_label\");  }  SourceBean scales=(SourceBean)content.getAttribute(\"SERIES_SCALES\");  if (scales == null) {    scales=(SourceBean)content.getAttribute(\"CONF.SERIES_SCALES\");  }  seriesScale=new LinkedHashMap();  if (scales != null) {    List attsScales=scales.getContainedAttributes();    String serieName=\"\";    Integer serieScale=1;    for (Iterator iterator=attsScales.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      try {        String serieScaleS=(String)object.getValue();        serieScale=Integer.valueOf(serieScaleS);      } catch (      Exception e) {        logger.error(\"Not correct numebr scale; setting default 1\");        serieScale=Integer.valueOf(1);      }      if (serieScale.equals(2)) {        seriesScale.put(serieName,\"2\");      } else {        seriesScale.put(serieName,\"1\");      }    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.CombinedCategoryBar.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  SourceBean draws=(SourceBean)content.getAttribute(\"SERIES_DRAW\");  if (draws == null) {    draws=(SourceBean)content.getAttribute(\"CONF.SERIES_DRAW\");  }  seriesDraw=new LinkedHashMap();  if (draws != null) {    List atts=draws.getContainedAttributes();    String serieName=\"\";    String serieDraw=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      serieDraw=new String((String)object.getValue());      if (serieDraw.equalsIgnoreCase(\"line\")) {        seriesDraw.put(serieName,\"line\");      } else       if (serieDraw.equalsIgnoreCase(\"line_no_shapes\")) {        seriesDraw.put(serieName,\"line_no_shapes\");      } else {        seriesDraw.put(serieName,\"bar\");      }    }  }  if (confParameters.get(\"second_axis_label\") != null) {    secondAxisLabel=(String)confParameters.get(\"second_axis_label\");  }  SourceBean scales=(SourceBean)content.getAttribute(\"SERIES_SCALES\");  if (scales == null) {    scales=(SourceBean)content.getAttribute(\"CONF.SERIES_SCALES\");  }  seriesScale=new LinkedHashMap();  if (scales != null) {    List attsScales=scales.getContainedAttributes();    String serieName=\"\";    Integer serieScale=1;    for (Iterator iterator=attsScales.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      configureChart_extraction_2(serieName,object);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.CombinedCategoryBar.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  SourceBean draws=(SourceBean)content.getAttribute(\"SERIES_DRAW\");  if (draws == null) {    draws=(SourceBean)content.getAttribute(\"CONF.SERIES_DRAW\");  }  configureChart_extraction_1(draws);  SourceBean scales=(SourceBean)content.getAttribute(\"SERIES_SCALES\");  if (scales == null) {    scales=(SourceBean)content.getAttribute(\"CONF.SERIES_SCALES\");  }  seriesScale=new LinkedHashMap();  if (scales != null) {    List attsScales=scales.getContainedAttributes();    String serieName=\"\";    Integer serieScale=1;    for (Iterator iterator=attsScales.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      configureChart_extraction_2(serieName,object);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.CombinedCategoryBar.configureChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "OverlaidBarLine": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"stacked_bar_renderer_1\") != null) {    String stacked=(String)confParameters.get(\"stacked_bar_renderer_1\");    if (stacked.equalsIgnoreCase(\"true\")) {      stackedBarRenderer_1=true;    }  }  if (confParameters.get(\"stacked_bar_renderer_2\") != null) {    String stacked=(String)confParameters.get(\"stacked_bar_renderer_2\");    if (stacked.equalsIgnoreCase(\"true\")) {      stackedBarRenderer_2=true;    }  }  SourceBean draws=(SourceBean)content.getAttribute(\"SERIES_DRAW\");  if (draws == null) {    draws=(SourceBean)content.getAttribute(\"CONF.SERIES_DRAW\");  }  seriesDraw=new LinkedHashMap();  if (draws != null) {    List atts=draws.getContainedAttributes();    String serieName=\"\";    String serieDraw=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      serieDraw=new String((String)object.getValue());      if (serieDraw.equalsIgnoreCase(\"line\")) {        seriesDraw.put(serieName,\"line\");      } else       if (serieDraw.equalsIgnoreCase(\"line_no_shapes\")) {        seriesDraw.put(serieName,\"line_no_shapes\");      } else {        seriesDraw.put(serieName,\"bar\");      }    }  } else {    useBars=true;  }  if (confParameters.get(SECOND_AXIS_LABEL) != null && !confParameters.get(SECOND_AXIS_LABEL).equals(\"\")) {    secondAxis=true;    secondAxisLabel=(String)confParameters.get(SECOND_AXIS_LABEL);    SourceBean scales=(SourceBean)content.getAttribute(\"SERIES_SCALES\");    if (scales == null) {      scales=(SourceBean)content.getAttribute(\"CONF.SERIES_SCALES\");    }    seriesScale=new LinkedHashMap();    if (scales != null) {      List attsScales=scales.getContainedAttributes();      String serieName=\"\";      Integer serieScale=1;      for (Iterator iterator=attsScales.iterator(); iterator.hasNext(); ) {        SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();        serieName=new String(object.getKey());        try {          String serieScaleS=(String)object.getValue();          serieScale=Integer.valueOf(serieScaleS);        } catch (        Exception e) {          logger.error(\"Not correct numebr scale; setting default 1\");          serieScale=Integer.valueOf(1);        }        if (serieScale.equals(2)) {          seriesScale.put(serieName,\"2\");        } else {          seriesScale.put(serieName,\"1\");        }      }    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.OverlaidBarLine.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (confParameters.get(\"add_labels\") != null) {    String additional=(String)confParameters.get(\"add_labels\");    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"stacked_bar_renderer_1\") != null) {    String stacked=(String)confParameters.get(\"stacked_bar_renderer_1\");    if (stacked.equalsIgnoreCase(\"true\")) {      stackedBarRenderer_1=true;    }  }  if (confParameters.get(\"stacked_bar_renderer_2\") != null) {    String stacked=(String)confParameters.get(\"stacked_bar_renderer_2\");    if (stacked.equalsIgnoreCase(\"true\")) {      stackedBarRenderer_2=true;    }  }  SourceBean draws=(SourceBean)content.getAttribute(\"SERIES_DRAW\");  if (draws == null) {    draws=(SourceBean)content.getAttribute(\"CONF.SERIES_DRAW\");  }  seriesDraw=new LinkedHashMap();  if (draws != null) {    List atts=draws.getContainedAttributes();    String serieName=\"\";    String serieDraw=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      serieDraw=new String((String)object.getValue());      if (serieDraw.equalsIgnoreCase(\"line\")) {        seriesDraw.put(serieName,\"line\");      } else       if (serieDraw.equalsIgnoreCase(\"line_no_shapes\")) {        seriesDraw.put(serieName,\"line_no_shapes\");      } else {        seriesDraw.put(serieName,\"bar\");      }    }  } else {    useBars=true;  }  if (confParameters.get(SECOND_AXIS_LABEL) != null && !confParameters.get(SECOND_AXIS_LABEL).equals(\"\")) {    secondAxis=true;    configureChart_extraction_2(content);  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.OverlaidBarLine.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  configureChart_extraction_1();  if (confParameters.get(\"stacked_bar_renderer_2\") != null) {    String stacked=(String)confParameters.get(\"stacked_bar_renderer_2\");    if (stacked.equalsIgnoreCase(\"true\")) {      stackedBarRenderer_2=true;    }  }  SourceBean draws=(SourceBean)content.getAttribute(\"SERIES_DRAW\");  if (draws == null) {    draws=(SourceBean)content.getAttribute(\"CONF.SERIES_DRAW\");  }  seriesDraw=new LinkedHashMap();  if (draws != null) {    List atts=draws.getContainedAttributes();    String serieName=\"\";    String serieDraw=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      serieName=new String(object.getKey());      serieDraw=new String((String)object.getValue());      if (serieDraw.equalsIgnoreCase(\"line\")) {        seriesDraw.put(serieName,\"line\");      } else       if (serieDraw.equalsIgnoreCase(\"line_no_shapes\")) {        seriesDraw.put(serieName,\"line_no_shapes\");      } else {        seriesDraw.put(serieName,\"bar\");      }    }  } else {    useBars=true;  }  if (confParameters.get(SECOND_AXIS_LABEL) != null && !confParameters.get(SECOND_AXIS_LABEL).equals(\"\")) {    secondAxis=true;    configureChart_extraction_2(content);  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.OverlaidBarLine.configureChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "StackedBarGroup": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "@Override public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  if (confParameters.get(ORIENTATION) != null) {    String orientation=(String)confParameters.get(ORIENTATION);    if (orientation.equalsIgnoreCase(\"vertical\")) {      horizontalViewConfigured=true;      horizontalView=false;    } else     if (orientation.equalsIgnoreCase(\"horizontal\")) {      horizontalViewConfigured=true;      horizontalView=true;    }  }  if (confParameters.get(SUBCATEGORY_LABEL) != null) {    subCategoryLabel=(String)confParameters.get(SUBCATEGORY_LABEL);  } else {    subCategoryLabel=\"\";  }  if (confParameters.get(ADD_LABELS) != null) {    String additional=(String)confParameters.get(ADD_LABELS);    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"percentage_value\") != null) {    String perc=(String)confParameters.get(\"percentage_value\");    if (perc.equalsIgnoreCase(\"true\")) {      percentageValue=true;    } else     percentageValue=false;  } else {    percentageValue=false;  }  if (confParameters.get(\"n_serie_for_group\") != null) {    numSerieForGroup=Integer.valueOf((String)confParameters.get(\"n_serie_for_group\"));  } else {    numSerieForGroup=new Integer(\"1\");  }  if (confParameters.get(\"n_groups\") != null) {    numGroups=Integer.valueOf((String)confParameters.get(\"n_groups\"));  } else {    numGroups=new Integer(\"1\");  }  SourceBean colors=(SourceBean)content.getAttribute(\"SERIES_COLORS\");  if (colors == null) {    colors=(SourceBean)content.getAttribute(\"CONF.SERIES_COLORS\");  }  if (colors != null) {    colorMap=new LinkedHashMap();    List atts=colors.getContainedAttributes();    String colorSerie=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      String serieName=new String(object.getKey());      colorSerie=new String((String)object.getValue());      Color col=new Color(Integer.decode(colorSerie).intValue());      if (col != null) {        colorMap.put(serieName,col);      }    }  }  SourceBean gradients=(SourceBean)content.getAttribute(\"GRADIENTS_COLORS\");  if (gradients == null) {    gradients=(SourceBean)content.getAttribute(\"CONF.GRADIENTS_COLORS\");  }  if (gradients != null) {    gradientMap=new LinkedHashMap();    List atts=gradients.getContainedAttributes();    String gradientSerie=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      String serieName=new String(object.getKey());      gradientSerie=new String((String)object.getValue());      Color col=new Color(Integer.decode(gradientSerie).intValue());      if (col != null) {        gradientMap.put(serieName,col);      }    }  }  SourceBean subcatLabels=(SourceBean)content.getAttribute(\"SUBCATEGORY_LABELS\");  if (subcatLabels == null) {    subcatLabels=(SourceBean)content.getAttribute(\"CONF.SUBCATEGORY_LABELS\");  }  if (subcatLabels != null) {    subCatLabelsMap=new LinkedHashMap();    List atts=subcatLabels.getContainedAttributes();    String label=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      String subcatName=new String(object.getKey());      label=new String((String)object.getValue());      if (label != null) {        subCatLabelsMap.put(subcatName,label);      }    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.StackedBarGroup.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "@Override public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  if (confParameters.get(ORIENTATION) != null) {    String orientation=(String)confParameters.get(ORIENTATION);    if (orientation.equalsIgnoreCase(\"vertical\")) {      horizontalViewConfigured=true;      horizontalView=false;    } else     if (orientation.equalsIgnoreCase(\"horizontal\")) {      horizontalViewConfigured=true;      horizontalView=true;    }  }  if (confParameters.get(SUBCATEGORY_LABEL) != null) {    subCategoryLabel=(String)confParameters.get(SUBCATEGORY_LABEL);  } else {    subCategoryLabel=\"\";  }  if (confParameters.get(ADD_LABELS) != null) {    String additional=(String)confParameters.get(ADD_LABELS);    if (additional.equalsIgnoreCase(\"true\")) {      additionalLabels=true;      catSerLabels=new LinkedHashMap();    } else     additionalLabels=false;  } else {    additionalLabels=false;  }  if (confParameters.get(\"percentage_value\") != null) {    String perc=(String)confParameters.get(\"percentage_value\");    if (perc.equalsIgnoreCase(\"true\")) {      percentageValue=true;    } else     percentageValue=false;  } else {    percentageValue=false;  }  if (confParameters.get(\"n_serie_for_group\") != null) {    numSerieForGroup=Integer.valueOf((String)confParameters.get(\"n_serie_for_group\"));  } else {    numSerieForGroup=new Integer(\"1\");  }  if (confParameters.get(\"n_groups\") != null) {    numGroups=Integer.valueOf((String)confParameters.get(\"n_groups\"));  } else {    numGroups=new Integer(\"1\");  }  configureChart_extraction_2(content);  SourceBean subcatLabels=(SourceBean)content.getAttribute(\"SUBCATEGORY_LABELS\");  if (subcatLabels == null) {    subcatLabels=(SourceBean)content.getAttribute(\"CONF.SUBCATEGORY_LABELS\");  }  if (subcatLabels != null) {    subCatLabelsMap=new LinkedHashMap();    List atts=subcatLabels.getContainedAttributes();    String label=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      String subcatName=new String(object.getKey());      label=new String((String)object.getValue());      if (label != null) {        subCatLabelsMap.put(subcatName,label);      }    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.StackedBarGroup.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "@Override public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  if (confParameters.get(ORIENTATION) != null) {    String orientation=(String)confParameters.get(ORIENTATION);    if (orientation.equalsIgnoreCase(\"vertical\")) {      horizontalViewConfigured=true;      horizontalView=false;    } else     if (orientation.equalsIgnoreCase(\"horizontal\")) {      horizontalViewConfigured=true;      horizontalView=true;    }  }  if (confParameters.get(SUBCATEGORY_LABEL) != null) {    subCategoryLabel=(String)confParameters.get(SUBCATEGORY_LABEL);  } else {    subCategoryLabel=\"\";  }  configureChart_extraction_1();  if (confParameters.get(\"n_groups\") != null) {    numGroups=Integer.valueOf((String)confParameters.get(\"n_groups\"));  } else {    numGroups=new Integer(\"1\");  }  configureChart_extraction_2(content);  SourceBean subcatLabels=(SourceBean)content.getAttribute(\"SUBCATEGORY_LABELS\");  if (subcatLabels == null) {    subcatLabels=(SourceBean)content.getAttribute(\"CONF.SUBCATEGORY_LABELS\");  }  if (subcatLabels != null) {    subCatLabelsMap=new LinkedHashMap();    List atts=subcatLabels.getContainedAttributes();    String label=\"\";    for (Iterator iterator=atts.iterator(); iterator.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator.next();      String subcatName=new String(object.getKey());      label=new String((String)object.getValue());      if (label != null) {        subCatLabelsMap.put(subcatName,label);      }    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.barcharts.StackedBarGroup.configureChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts": {
        "BlockCharts": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "@Override public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  confParameters=new HashMap();  SourceBean confSB=(SourceBean)content.getAttribute(\"CONF\");  List confAttrsList=confSB.getAttributeAsList(\"PARAMETER\");  Iterator confAttrsIter=confAttrsList.iterator();  while (confAttrsIter.hasNext()) {    SourceBean param=(SourceBean)confAttrsIter.next();    String nameParam=(String)param.getAttribute(\"name\");    String valueParam=(String)param.getAttribute(\"value\");    confParameters.put(nameParam,valueParam);  }  if (confParameters.get(X_LABEL) != null) {    xLabel=(String)confParameters.get(X_LABEL);  } else {    xLabel=\"Hours\";  }  if (confParameters.get(Y_LABEL) != null) {    yLabel=(String)confParameters.get(Y_LABEL);  } else {    yLabel=\"Time\";  }  if (confParameters.get(HOUR_MAX) != null && confParameters.get(HOUR_MIN) != null) {    String xMaxS=(String)confParameters.get(HOUR_MAX);    String xMinS=(String)confParameters.get(HOUR_MIN);    hourMax=Double.valueOf(xMaxS);    hourMin=Double.valueOf(xMinS);  } else {    hourMax=24.0;    hourMin=0.0;  }  if (confParameters.get(DATE_AUTO_RANGE) != null) {    if (confParameters.get(DATE_AUTO_RANGE).toString().equalsIgnoreCase(\"true\"))     dateAutoRange=true; else     dateAutoRange=false;  } else {    dateAutoRange=false;  }  if (confParameters.get(ADD_TRANSPARENCY) != null) {    if (confParameters.get(ADD_TRANSPARENCY).toString().equalsIgnoreCase(\"true\"))     addTransparency=true; else     addTransparency=false;  } else {    addTransparency=false;  }  if (confParameters.get(VIEW_DATE_FORMAT) != null) {    String viewFormat=(String)confParameters.get(VIEW_DATE_FORMAT);    try {      viewDateFormat=new SimpleDateFormat(viewFormat);    } catch (    Exception e) {      logger.error(\"Wrong date format \" + viewFormat + \": use default\");      viewDateFormat=new SimpleDateFormat(\"dd/MM/yyyy\");    }  } else {    viewDateFormat=new SimpleDateFormat(\"dd/MM/yyyy\");  }  if (confParameters.get(BEGIN_DATE_FORMAT) != null) {    beginDateFormat=(String)confParameters.get(BEGIN_DATE_FORMAT);  } else {    beginDateFormat=\"dd/MM/yyyy\";  }  logger.debug(\"begin date format \" + beginDateFormat);  if (confParameters.get(BEGIN_HOUR_FORMAT) != null) {    beginHourFormat=(String)confParameters.get(BEGIN_HOUR_FORMAT);  } else {    beginHourFormat=\"dd/MM/yyyy HH:mm:ss\";  }  logger.debug(\"begin hour format \" + beginHourFormat);  if (confParameters.get(DATE_MAX) != null && confParameters.get(DATE_MIN) != null) {    String dateMaxS=(String)confParameters.get(DATE_MAX);    String dateMinS=(String)confParameters.get(DATE_MIN);    try {      DateFormat myDateFormat=new SimpleDateFormat(\"dd/MM/yyyy\");      dateMin=myDateFormat.parse(dateMinS);      dateMax=myDateFormat.parse(dateMaxS);    } catch (    Exception e) {      logger.error(\"Could not convert begin or end date\");      dateMin=null;      dateMax=null;    }  }  ranges=new ArrayList<RangeBlocks>();  SourceBean rangesSB=(SourceBean)content.getAttribute(\"RANGES\");  List rangesList=rangesSB.getAttributeAsList(\"RANGE\");  Iterator rangesIter=rangesList.iterator();  while (rangesIter.hasNext()) {    SourceBean range=(SourceBean)rangesIter.next();    String rangeLabel=(String)range.getAttribute(\"label\");    String rangeColor=(String)range.getAttribute(\"color\");    String rangePattern=(String)range.getAttribute(\"pattern\");    Color color=null;    if (rangeColor != null) {      color=new Color(Integer.decode(rangeColor).intValue());    }    RangeBlocks block=new RangeBlocks(rangeLabel,rangePattern,color);    ranges.add(block);  }  SourceBean styleAnnotationSB=(SourceBean)content.getAttribute(STYLE_ANNOTATION_LABELS);  if (styleAnnotationSB != null) {    String fontS=(String)styleAnnotationSB.getAttribute(FONT_STYLE);    if (fontS == null)     fontS=\"ARIAL\";    String sizeS=(String)styleAnnotationSB.getAttribute(SIZE_STYLE);    if (sizeS == null)     sizeS=\"8\";    String colorS=(String)styleAnnotationSB.getAttribute(COLOR_STYLE);    if (colorS == null)     colorS=\"#000000\";    try {      Color color=Color.decode(colorS);      int size=Integer.valueOf(sizeS).intValue();      styleAnnotation=new StyleLabel(fontS,size,color);    } catch (    Exception e) {      logger.error(\"Wrong style Annotation settings, use default\");    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts.BlockCharts.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "@Override public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  confParameters=new HashMap();  SourceBean confSB=(SourceBean)content.getAttribute(\"CONF\");  List confAttrsList=confSB.getAttributeAsList(\"PARAMETER\");  Iterator confAttrsIter=confAttrsList.iterator();  while (confAttrsIter.hasNext()) {    SourceBean param=(SourceBean)confAttrsIter.next();    String nameParam=(String)param.getAttribute(\"name\");    String valueParam=(String)param.getAttribute(\"value\");    confParameters.put(nameParam,valueParam);  }  if (confParameters.get(X_LABEL) != null) {    xLabel=(String)confParameters.get(X_LABEL);  } else {    xLabel=\"Hours\";  }  if (confParameters.get(Y_LABEL) != null) {    yLabel=(String)confParameters.get(Y_LABEL);  } else {    yLabel=\"Time\";  }  if (confParameters.get(HOUR_MAX) != null && confParameters.get(HOUR_MIN) != null) {    String xMaxS=(String)confParameters.get(HOUR_MAX);    String xMinS=(String)confParameters.get(HOUR_MIN);    hourMax=Double.valueOf(xMaxS);    hourMin=Double.valueOf(xMinS);  } else {    hourMax=24.0;    hourMin=0.0;  }  if (confParameters.get(DATE_AUTO_RANGE) != null) {    if (confParameters.get(DATE_AUTO_RANGE).toString().equalsIgnoreCase(\"true\"))     dateAutoRange=true; else     dateAutoRange=false;  } else {    dateAutoRange=false;  }  if (confParameters.get(ADD_TRANSPARENCY) != null) {    if (confParameters.get(ADD_TRANSPARENCY).toString().equalsIgnoreCase(\"true\"))     addTransparency=true; else     addTransparency=false;  } else {    addTransparency=false;  }  SourceBean styleAnnotationSB=configureChart_extraction_2(content);  if (styleAnnotationSB != null) {    String fontS=(String)styleAnnotationSB.getAttribute(FONT_STYLE);    if (fontS == null)     fontS=\"ARIAL\";    String sizeS=(String)styleAnnotationSB.getAttribute(SIZE_STYLE);    if (sizeS == null)     sizeS=\"8\";    String colorS=(String)styleAnnotationSB.getAttribute(COLOR_STYLE);    if (colorS == null)     colorS=\"#000000\";    try {      Color color=Color.decode(colorS);      int size=Integer.valueOf(sizeS).intValue();      styleAnnotation=new StyleLabel(fontS,size,color);    } catch (    Exception e) {      logger.error(\"Wrong style Annotation settings, use default\");    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts.BlockCharts.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "@Override public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  confParameters=new HashMap();  SourceBean confSB=(SourceBean)content.getAttribute(\"CONF\");  List confAttrsList=confSB.getAttributeAsList(\"PARAMETER\");  Iterator confAttrsIter=confAttrsList.iterator();  while (confAttrsIter.hasNext()) {    SourceBean param=(SourceBean)confAttrsIter.next();    String nameParam=(String)param.getAttribute(\"name\");    String valueParam=(String)param.getAttribute(\"value\");    confParameters.put(nameParam,valueParam);  }  if (confParameters.get(X_LABEL) != null) {    xLabel=(String)confParameters.get(X_LABEL);  } else {    xLabel=\"Hours\";  }  if (confParameters.get(Y_LABEL) != null) {    yLabel=(String)confParameters.get(Y_LABEL);  } else {    yLabel=\"Time\";  }  configureChart_extraction_1();  SourceBean styleAnnotationSB=configureChart_extraction_2(content);  if (styleAnnotationSB != null) {    String fontS=(String)styleAnnotationSB.getAttribute(FONT_STYLE);    if (fontS == null)     fontS=\"ARIAL\";    String sizeS=(String)styleAnnotationSB.getAttribute(SIZE_STYLE);    if (sizeS == null)     sizeS=\"8\";    String colorS=(String)styleAnnotationSB.getAttribute(COLOR_STYLE);    if (colorS == null)     colorS=\"#000000\";    try {      Color color=Color.decode(colorS);      int size=Integer.valueOf(sizeS).intValue();      styleAnnotation=new StyleLabel(fontS,size,color);    } catch (    Exception e) {      logger.error(\"Wrong style Annotation settings, use default\");    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts.BlockCharts.configureChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "TimeBlockChart": {
            "calculateValue": {
                "original": {
                    "method_name": "calculateValue",
                    "code": "@Override public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  super.calculateValue();  DatasetMap datasetMap=new DatasetMap();  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  ArrayList<Activity> activities=new ArrayList<Activity>();  RegularTimePeriod timePeriod=null;  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  if (listAtts == null) {    logger.error(\"Null rows retrieved from dataset\");    return null;  }  int j=0;  logger.debug(\"retrieved number rows: \" + listAtts.size());  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean row=(SourceBean)iterator.next();    Activity activity=new Activity(row,beginDateFormat,beginHourFormat);    activities.add(activity);    logger.debug(\"Activity built from \" + activity.getBeginDate() + \" minutes\"+ activity.getMinutes() != null ? activity.getMinutes().toString() : \"\");    if (maxDateFound != null && !activity.getBeginDate().after(maxDateFound)) {    } else {      maxDateFound=activity.getBeginDate();    }    if (minDateFound != null && !activity.getBeginDate().before(minDateFound)) {    } else {      minDateFound=activity.getBeginDate();    }  }  long daysBetween;  if (dateMin != null && dateMax != null) {    logger.debug(\"use date limit defined in template: from \" + dateMin.toString() + \" to \"+ dateMax.toString());    daysBetween=daysBetween(dateMin,dateMax);  } else {    logger.debug(\"use date limit found: from \" + minDateFound.toString() + \" to \"+ maxDateFound.toString());    daysBetween=daysBetween(minDateFound,maxDateFound);  }  logger.debug(\"Days between the two dates \" + daysBetween);  long minutesBetweenLong=daysBetween * 24 * 60* 2;  int mbl=Long.valueOf(minutesBetweenLong).intValue();  DefaultXYZDataset dataset=new DefaultXYZDataset();  ArrayList<Long> xValuesList=new ArrayList<Long>();  ArrayList<Double> yValuesList=new ArrayList<Double>();  ArrayList<Double> zValuesList=new ArrayList<Double>();  annotations=new HashMap<String,AnnotationBlock>();  for (Iterator iterator=activities.iterator(); iterator.hasNext(); ) {    Activity activity=(Activity)iterator.next();    if (dateMin != null && dateMax != null && (activity.getBeginDate().after(dateMax) || activity.getBeginDate().before(dateMin))) {      logger.debug(\"Activity discarde because starting out of selected bounds in \" + activity.getBeginDate());    } else {      logger.debug(\"Inserting activity with begin date \" + activity.getBeginDate() + \" adn pattern \"+ activity.getPattern());      RegularTimePeriod rtp=new Day(activity.getBeginDate());      long secondmills=rtp.getFirstMillisecond();      Minute minute=activity.getMinutes();      for (int i=0; i < activity.getDuration(); i++) {        Integer hour=Integer.valueOf(minute.getHourValue());        Integer minuteValue=Integer.valueOf(minute.getMinute());        Double doubleMinuteValue=Double.valueOf((minuteValue.intValue()));        double convertedMinuteValue=(doubleMinuteValue * 100) / 60.0;        double convertedMinuteValueCent=convertedMinuteValue / 100;        double hourD=hour.intValue();        double converted=hourD + convertedMinuteValueCent;        String yVal=Double.valueOf(converted).toString();        xValuesList.add(new Long(secondmills));        yValuesList.add(Double.valueOf(yVal));        Object cosa=patternRangeIndex.get(activity.getPattern());        if (cosa != null) {          zValuesList.add(Double.valueOf(patternRangeIndex.get(activity.getPattern())).doubleValue() + 0.5);        } else {          zValuesList.add(-1.0);        }        if (annotations.get(activity.getCode()) == null) {          AnnotationBlock annotation=new AnnotationBlock(activity.getCode());          annotation.setXPosition(xValuesList.get(j).doubleValue());          annotation.setYPosition(yValuesList.get(j).doubleValue());          annotations.put(annotation.getAnnotation(),annotation);        }        minute=(Minute)minute.next();        j++;      }    }  }  double[] xvalues=new double[xValuesList.size()];  double[] yvalues=new double[yValuesList.size()];  double[] zvalues=new double[zValuesList.size()];  for (int i=0; i < zValuesList.size(); i++) {    Long l=xValuesList.get(i);    xvalues[i]=l;    Double d2=yValuesList.get(i);    yvalues[i]=d2;    Double d=zValuesList.get(i);    zvalues[i]=d;  }  logger.debug(\"adding the serie\");  dataset.addSeries(\"Series 1\",new double[][]{xvalues,yvalues,zvalues});  datasetMap.getDatasets().put(\"1\",dataset);  logger.debug(\"OUT\");  return datasetMap;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts.TimeBlockChart.calculateValue.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "calculateValue",
                        "code": "@Override public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  super.calculateValue();  DatasetMap datasetMap=new DatasetMap();  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  ArrayList<Activity> activities=new ArrayList<Activity>();  RegularTimePeriod timePeriod=null;  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  if (listAtts == null) {    logger.error(\"Null rows retrieved from dataset\");    return null;  }  int j=0;  logger.debug(\"retrieved number rows: \" + listAtts.size());  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean row=(SourceBean)iterator.next();    Activity activity=new Activity(row,beginDateFormat,beginHourFormat);    activities.add(activity);    logger.debug(\"Activity built from \" + activity.getBeginDate() + \" minutes\"+ activity.getMinutes() != null ? activity.getMinutes().toString() : \"\");    if (maxDateFound != null && !activity.getBeginDate().after(maxDateFound)) {    } else {      maxDateFound=activity.getBeginDate();    }    if (minDateFound != null && !activity.getBeginDate().before(minDateFound)) {    } else {      minDateFound=activity.getBeginDate();    }  }  long daysBetween;  if (dateMin != null && dateMax != null) {    logger.debug(\"use date limit defined in template: from \" + dateMin.toString() + \" to \"+ dateMax.toString());    daysBetween=daysBetween(dateMin,dateMax);  } else {    logger.debug(\"use date limit found: from \" + minDateFound.toString() + \" to \"+ maxDateFound.toString());    daysBetween=daysBetween(minDateFound,maxDateFound);  }  logger.debug(\"Days between the two dates \" + daysBetween);  long minutesBetweenLong=daysBetween * 24 * 60* 2;  int mbl=Long.valueOf(minutesBetweenLong).intValue();  DefaultXYZDataset dataset=new DefaultXYZDataset();  ArrayList<Long> xValuesList=new ArrayList<Long>();  ArrayList<Double> yValuesList=new ArrayList<Double>();  ArrayList<Double> zValuesList=new ArrayList<Double>();  annotations=new HashMap<String,AnnotationBlock>();  for (Iterator iterator=activities.iterator(); iterator.hasNext(); ) {    Activity activity=(Activity)iterator.next();    if (dateMin != null && dateMax != null && (activity.getBeginDate().after(dateMax) || activity.getBeginDate().before(dateMin))) {      logger.debug(\"Activity discarde because starting out of selected bounds in \" + activity.getBeginDate());    } else {      logger.debug(\"Inserting activity with begin date \" + activity.getBeginDate() + \" adn pattern \"+ activity.getPattern());      RegularTimePeriod rtp=new Day(activity.getBeginDate());      long secondmills=rtp.getFirstMillisecond();      j=calculateValue_extraction_2(j,xValuesList,yValuesList,zValuesList,activity,secondmills);    }  }  double[] xvalues=new double[xValuesList.size()];  double[] yvalues=new double[yValuesList.size()];  double[] zvalues=new double[zValuesList.size()];  for (int i=0; i < zValuesList.size(); i++) {    Long l=xValuesList.get(i);    xvalues[i]=l;    Double d2=yValuesList.get(i);    yvalues[i]=d2;    Double d=zValuesList.get(i);    zvalues[i]=d;  }  logger.debug(\"adding the serie\");  dataset.addSeries(\"Series 1\",new double[][]{xvalues,yvalues,zvalues});  datasetMap.getDatasets().put(\"1\",dataset);  logger.debug(\"OUT\");  return datasetMap;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts.TimeBlockChart.calculateValue.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "@Override public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  super.calculateValue();  DatasetMap datasetMap=new DatasetMap();  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  ArrayList<Activity> activities=new ArrayList<Activity>();  RegularTimePeriod timePeriod=null;  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  if (listAtts == null) {    logger.error(\"Null rows retrieved from dataset\");    return null;  }  int j=0;  calculateValue_extraction_1(activities,listAtts);  long daysBetween;  if (dateMin != null && dateMax != null) {    logger.debug(\"use date limit defined in template: from \" + dateMin.toString() + \" to \"+ dateMax.toString());    daysBetween=daysBetween(dateMin,dateMax);  } else {    logger.debug(\"use date limit found: from \" + minDateFound.toString() + \" to \"+ maxDateFound.toString());    daysBetween=daysBetween(minDateFound,maxDateFound);  }  logger.debug(\"Days between the two dates \" + daysBetween);  long minutesBetweenLong=daysBetween * 24 * 60* 2;  int mbl=Long.valueOf(minutesBetweenLong).intValue();  DefaultXYZDataset dataset=new DefaultXYZDataset();  ArrayList<Long> xValuesList=new ArrayList<Long>();  ArrayList<Double> yValuesList=new ArrayList<Double>();  ArrayList<Double> zValuesList=new ArrayList<Double>();  annotations=new HashMap<String,AnnotationBlock>();  for (Iterator iterator=activities.iterator(); iterator.hasNext(); ) {    Activity activity=(Activity)iterator.next();    if (dateMin != null && dateMax != null && (activity.getBeginDate().after(dateMax) || activity.getBeginDate().before(dateMin))) {      logger.debug(\"Activity discarde because starting out of selected bounds in \" + activity.getBeginDate());    } else {      logger.debug(\"Inserting activity with begin date \" + activity.getBeginDate() + \" adn pattern \"+ activity.getPattern());      RegularTimePeriod rtp=new Day(activity.getBeginDate());      long secondmills=rtp.getFirstMillisecond();      j=calculateValue_extraction_2(j,xValuesList,yValuesList,zValuesList,activity,secondmills);    }  }  double[] xvalues=new double[xValuesList.size()];  double[] yvalues=new double[yValuesList.size()];  double[] zvalues=new double[zValuesList.size()];  for (int i=0; i < zValuesList.size(); i++) {    Long l=xValuesList.get(i);    xvalues[i]=l;    Double d2=yValuesList.get(i);    yvalues[i]=d2;    Double d=zValuesList.get(i);    zvalues[i]=d;  }  logger.debug(\"adding the serie\");  dataset.addSeries(\"Series 1\",new double[][]{xvalues,yvalues,zvalues});  datasetMap.getDatasets().put(\"1\",dataset);  logger.debug(\"OUT\");  return datasetMap;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.blockcharts.TimeBlockChart.calculateValue.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts": {
        "DialCharts": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  try {    SourceBean styleTickLabelsSB=(SourceBean)content.getAttribute(STYLE_TICK_LABELS);    if (styleTickLabelsSB != null) {      String fontS=(String)styleTickLabelsSB.getAttribute(FONT_STYLE);      if (fontS == null) {        fontS=defaultLabelsStyle.getFontName();      }      String sizeS=(String)styleTickLabelsSB.getAttribute(SIZE_STYLE);      String colorS=(String)styleTickLabelsSB.getAttribute(COLOR_STYLE);      try {        Color color=Color.BLACK;        if (colorS != null) {          color=Color.decode(colorS);        } else {          defaultLabelsStyle.getColor();        }        int size=12;        if (sizeS != null) {          size=Integer.valueOf(sizeS).intValue();        } else {          size=defaultLabelsStyle.getSize();        }        labelsTickStyle=new StyleLabel(fontS,size,color);      } catch (      Exception e) {        logger.error(\"Wrong style labels settings, use default\");      }    } else {      labelsTickStyle=defaultLabelsStyle;    }    SourceBean styleValueLabelsSB=(SourceBean)content.getAttribute(STYLE_VALUE_LABEL);    if (styleValueLabelsSB != null) {      String fontS=(String)styleValueLabelsSB.getAttribute(FONT_STYLE);      if (fontS == null) {        fontS=defaultLabelsStyle.getFontName();      }      String sizeS=(String)styleValueLabelsSB.getAttribute(SIZE_STYLE);      String colorS=(String)styleValueLabelsSB.getAttribute(COLOR_STYLE);      try {        Color color=Color.BLACK;        if (colorS != null) {          color=Color.decode(colorS);        } else {          defaultLabelsStyle.getColor();        }        int size=12;        if (sizeS != null) {          size=Integer.valueOf(sizeS).intValue();        } else {          size=defaultLabelsStyle.getSize();        }        labelsValueStyle=new StyleLabel(fontS,size,color);      } catch (      Exception e) {        logger.error(\"Wrong style labels settings, use default\");      }    } else {      labelsValueStyle=defaultLabelsStyle;    }    if (isLovConfDefined == false) {      logger.debug(\"Configuration in template\");      confParameters=new HashMap();      SourceBean confSB=(SourceBean)content.getAttribute(\"CONF\");      List confAttrsList=confSB.getAttributeAsList(\"PARAMETER\");      Iterator confAttrsIter=confAttrsList.iterator();      while (confAttrsIter.hasNext()) {        SourceBean param=(SourceBean)confAttrsIter.next();        String nameParam=(String)param.getAttribute(\"name\");        String valueParam=(String)param.getAttribute(\"value\");        confParameters.put(nameParam,valueParam);      }      if (confParameters.get(LOWER) != null) {        String lower=(String)confParameters.get(LOWER);        setLower(Double.valueOf(lower).doubleValue());      } else {        logger.error(\"lower bound not defined\");        throw new Exception(\"lower bound not defined\");      }      if (confParameters.get(UPPER) != null) {        String upper=(String)confParameters.get(UPPER);        setUpper(Double.valueOf(upper).doubleValue());      } else {        logger.error(\"upper bound not defined\");        throw new Exception(\"upper bound not defined\");      }      if (confParameters.get(UNITS) != null) {        String units=(String)confParameters.get(UNITS);        setUnits(units);      }      multichart=false;      if (confParameters.get(\"multichart\") != null && !(((String)confParameters.get(MULTICHART)).equalsIgnoreCase(\"\"))) {        String multiple=(String)confParameters.get(MULTICHART);        if (multiple.equalsIgnoreCase(\"true\"))         setMultichart(true);      }      orientationMultichart=\"horizontal\";      if (confParameters.get(ORIENTATION_MULTICHART) != null && !(((String)confParameters.get(ORIENTATION_MULTICHART)).equalsIgnoreCase(\"\"))) {        String ori=(String)confParameters.get(ORIENTATION_MULTICHART);        if (ori.equalsIgnoreCase(\"horizontal\") || ori.equalsIgnoreCase(\"vertical\"))         setOrientationMultichart(ori);      }    } else {      logger.debug(\"configuration parameters set in LOV\");      String parameters=DataSetAccessFunctions.getDataSetResultFromLabel(profile,confDataset,parametersObject);      SourceBean sourceBeanResult=null;      try {        sourceBeanResult=SourceBean.fromXMLString(parameters);      } catch (      SourceBeanException e) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      sbRow=(SourceBean)sourceBeanResult.getAttribute(\"ROW\");      String lower=(String)sbRow.getAttribute(LOWER);      String upper=(String)sbRow.getAttribute(UPPER);      String legend=(String)sbRow.getAttribute(LEGEND);      String multichart=(String)sbRow.getAttribute(MULTICHART);      String orientation=(String)sbRow.getAttribute(ORIENTATION_MULTICHART);      if (lower == null || upper == null) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      setLower(Double.valueOf(lower).doubleValue());      setUpper(Double.valueOf(upper).doubleValue());      setMultichart((multichart.equalsIgnoreCase(\"true\") ? true : false));      setLegend(legend.equalsIgnoreCase(\"true\") ? true : false);      setOrientationMultichart(orientation);    }  } catch (  Exception e) {    logger.error(\"error in reading template configurations\");  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.DialCharts.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  try {    SourceBean styleTickLabelsSB=(SourceBean)content.getAttribute(STYLE_TICK_LABELS);    if (styleTickLabelsSB != null) {      String fontS=(String)styleTickLabelsSB.getAttribute(FONT_STYLE);      if (fontS == null) {        fontS=defaultLabelsStyle.getFontName();      }      String sizeS=(String)styleTickLabelsSB.getAttribute(SIZE_STYLE);      String colorS=(String)styleTickLabelsSB.getAttribute(COLOR_STYLE);      try {        Color color=Color.BLACK;        if (colorS != null) {          color=Color.decode(colorS);        } else {          defaultLabelsStyle.getColor();        }        int size=12;        if (sizeS != null) {          size=Integer.valueOf(sizeS).intValue();        } else {          size=defaultLabelsStyle.getSize();        }        labelsTickStyle=new StyleLabel(fontS,size,color);      } catch (      Exception e) {        logger.error(\"Wrong style labels settings, use default\");      }    } else {      labelsTickStyle=defaultLabelsStyle;    }    SourceBean styleValueLabelsSB=(SourceBean)content.getAttribute(STYLE_VALUE_LABEL);    if (styleValueLabelsSB != null) {      String fontS=(String)styleValueLabelsSB.getAttribute(FONT_STYLE);      if (fontS == null) {        fontS=defaultLabelsStyle.getFontName();      }      String sizeS=(String)styleValueLabelsSB.getAttribute(SIZE_STYLE);      String colorS=(String)styleValueLabelsSB.getAttribute(COLOR_STYLE);      try {        Color color=Color.BLACK;        if (colorS != null) {          color=Color.decode(colorS);        } else {          defaultLabelsStyle.getColor();        }        int size=12;        if (sizeS != null) {          size=Integer.valueOf(sizeS).intValue();        } else {          size=defaultLabelsStyle.getSize();        }        labelsValueStyle=new StyleLabel(fontS,size,color);      } catch (      Exception e) {        logger.error(\"Wrong style labels settings, use default\");      }    } else {      labelsValueStyle=defaultLabelsStyle;    }    if (isLovConfDefined == false) {      logger.debug(\"Configuration in template\");      confParameters=new HashMap();      configureChart_extraction_3(content);    } else {      logger.debug(\"configuration parameters set in LOV\");      String parameters=DataSetAccessFunctions.getDataSetResultFromLabel(profile,confDataset,parametersObject);      SourceBean sourceBeanResult=null;      try {        sourceBeanResult=SourceBean.fromXMLString(parameters);      } catch (      SourceBeanException e) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      sbRow=(SourceBean)sourceBeanResult.getAttribute(\"ROW\");      String lower=(String)sbRow.getAttribute(LOWER);      String upper=(String)sbRow.getAttribute(UPPER);      String legend=(String)sbRow.getAttribute(LEGEND);      String multichart=(String)sbRow.getAttribute(MULTICHART);      String orientation=(String)sbRow.getAttribute(ORIENTATION_MULTICHART);      if (lower == null || upper == null) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      setLower(Double.valueOf(lower).doubleValue());      setUpper(Double.valueOf(upper).doubleValue());      setMultichart((multichart.equalsIgnoreCase(\"true\") ? true : false));      setLegend(legend.equalsIgnoreCase(\"true\") ? true : false);      setOrientationMultichart(orientation);    }  } catch (  Exception e) {    logger.error(\"error in reading template configurations\");  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.DialCharts.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  try {    SourceBean styleTickLabelsSB=(SourceBean)content.getAttribute(STYLE_TICK_LABELS);    if (styleTickLabelsSB != null) {      String fontS=(String)styleTickLabelsSB.getAttribute(FONT_STYLE);      if (fontS == null) {        fontS=defaultLabelsStyle.getFontName();      }      String sizeS=(String)styleTickLabelsSB.getAttribute(SIZE_STYLE);      String colorS=(String)styleTickLabelsSB.getAttribute(COLOR_STYLE);      try {        Color color=Color.BLACK;        if (colorS != null) {          color=Color.decode(colorS);        } else {          defaultLabelsStyle.getColor();        }        int size=12;        if (sizeS != null) {          size=Integer.valueOf(sizeS).intValue();        } else {          size=defaultLabelsStyle.getSize();        }        labelsTickStyle=new StyleLabel(fontS,size,color);      } catch (      Exception e) {        logger.error(\"Wrong style labels settings, use default\");      }    } else {      labelsTickStyle=defaultLabelsStyle;    }    SourceBean styleValueLabelsSB=(SourceBean)content.getAttribute(STYLE_VALUE_LABEL);    if (styleValueLabelsSB != null) {      configureChart_extraction_2(styleValueLabelsSB);    } else {      labelsValueStyle=defaultLabelsStyle;    }    if (isLovConfDefined == false) {      logger.debug(\"Configuration in template\");      confParameters=new HashMap();      configureChart_extraction_3(content);    } else {      logger.debug(\"configuration parameters set in LOV\");      String parameters=DataSetAccessFunctions.getDataSetResultFromLabel(profile,confDataset,parametersObject);      SourceBean sourceBeanResult=null;      try {        sourceBeanResult=SourceBean.fromXMLString(parameters);      } catch (      SourceBeanException e) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      sbRow=(SourceBean)sourceBeanResult.getAttribute(\"ROW\");      String lower=(String)sbRow.getAttribute(LOWER);      String upper=(String)sbRow.getAttribute(UPPER);      String legend=(String)sbRow.getAttribute(LEGEND);      String multichart=(String)sbRow.getAttribute(MULTICHART);      String orientation=(String)sbRow.getAttribute(ORIENTATION_MULTICHART);      if (lower == null || upper == null) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      setLower(Double.valueOf(lower).doubleValue());      setUpper(Double.valueOf(upper).doubleValue());      setMultichart((multichart.equalsIgnoreCase(\"true\") ? true : false));      setLegend(legend.equalsIgnoreCase(\"true\") ? true : false);      setOrientationMultichart(orientation);    }  } catch (  Exception e) {    logger.error(\"error in reading template configurations\");  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.DialCharts.configureChart.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  logger.debug(\"IN\");  super.configureChart(content);  try {    configureChart_extraction_1(content);    SourceBean styleValueLabelsSB=(SourceBean)content.getAttribute(STYLE_VALUE_LABEL);    if (styleValueLabelsSB != null) {      configureChart_extraction_2(styleValueLabelsSB);    } else {      labelsValueStyle=defaultLabelsStyle;    }    if (isLovConfDefined == false) {      logger.debug(\"Configuration in template\");      confParameters=new HashMap();      configureChart_extraction_3(content);    } else {      logger.debug(\"configuration parameters set in LOV\");      String parameters=DataSetAccessFunctions.getDataSetResultFromLabel(profile,confDataset,parametersObject);      SourceBean sourceBeanResult=null;      try {        sourceBeanResult=SourceBean.fromXMLString(parameters);      } catch (      SourceBeanException e) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      sbRow=(SourceBean)sourceBeanResult.getAttribute(\"ROW\");      String lower=(String)sbRow.getAttribute(LOWER);      String upper=(String)sbRow.getAttribute(UPPER);      String legend=(String)sbRow.getAttribute(LEGEND);      String multichart=(String)sbRow.getAttribute(MULTICHART);      String orientation=(String)sbRow.getAttribute(ORIENTATION_MULTICHART);      if (lower == null || upper == null) {        logger.error(\"error in reading configuration lov\");        throw new Exception(\"error in reading configuration lov\");      }      setLower(Double.valueOf(lower).doubleValue());      setUpper(Double.valueOf(upper).doubleValue());      setMultichart((multichart.equalsIgnoreCase(\"true\") ? true : false));      setLegend(legend.equalsIgnoreCase(\"true\") ? true : false);      setOrientationMultichart(orientation);    }  } catch (  Exception e) {    logger.error(\"error in reading template configurations\");  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.DialCharts.configureChart.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "SBISpeedometer": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "/**  * set parameters for the creation of the chart getting them from template or from LOV. * @param content the content of the template. * @return A chart that displays a value as a dial. */public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (!isLovConfDefined) {    logger.debug(\"Configuration set in template\");    if (confParameters.get(\"increment\") != null) {      String increment=(String)confParameters.get(\"increment\");      setIncrement(Double.valueOf(increment).doubleValue());    } else {      logger.error(\"increment not defined\");      return;    }    if (confParameters.get(\"minor_tick\") != null) {      String minorTickCount=(String)confParameters.get(\"minor_tick\");      setMinorTickCount(Integer.valueOf(minorTickCount).intValue());    } else {      setMinorTickCount(10);    }    if (confParameters.get(\"dialtextuse\") != null) {      String dialtextusetemp=(String)confParameters.get(\"dialtextuse\");      if (dialtextusetemp.equalsIgnoreCase(\"true\")) {        dialtextuse=true;      } else       dialtextuse=false;    }    if (dialtextuse && confParameters.get(\"dialtext\") != null) {      dialtext=(String)confParameters.get(\"dialtext\");    }    SourceBean intervalsSB=(SourceBean)content.getAttribute(\"INTERVALS\");    if (intervalsSB == null) {      intervalsSB=(SourceBean)content.getAttribute(\"CONF.INTERVALS\");    }    List intervalsAttrsList=null;    if (intervalsSB != null) {      intervalsAttrsList=intervalsSB.getContainedSourceBeanAttributes();    }    if (intervalsAttrsList == null || intervalsAttrsList.isEmpty()) {      logger.warn(\"intervals not defined; default settings\");      KpiInterval interval=new KpiInterval();      interval.setMin(getLower());      interval.setMax(getUpper());      interval.setColor(Color.WHITE);      addInterval(interval);    } else {      Iterator intervalsAttrsIter=intervalsAttrsList.iterator();      while (intervalsAttrsIter.hasNext()) {        SourceBeanAttribute paramSBA=(SourceBeanAttribute)intervalsAttrsIter.next();        SourceBean param=(SourceBean)paramSBA.getValue();        String min=(String)param.getAttribute(\"min\");        String max=(String)param.getAttribute(\"max\");        String col=(String)param.getAttribute(\"color\");        KpiInterval interval=new KpiInterval();        interval.setMin(Double.valueOf(min).doubleValue());        interval.setMax(Double.valueOf(max).doubleValue());        Color color=new Color(Integer.decode(col).intValue());        if (color != null) {          interval.setColor(color);        } else {          interval.setColor(Color.WHITE);        }        addInterval(interval);      }    }  } else {    logger.debug(\"configuration defined in LOV\" + confDataset);    String increment=(String)sbRow.getAttribute(\"increment\");    String minorTickCount=(String)sbRow.getAttribute(\"minor_tick\");    setIncrement(Double.valueOf(increment).doubleValue());    setMinorTickCount(Integer.valueOf(minorTickCount).intValue());    String intervalsNumber=(String)sbRow.getAttribute(\"intervals_number\");    if (intervalsNumber == null || intervalsNumber.equals(\"\") || intervalsNumber.equals(\"0\")) {      KpiInterval interval=new KpiInterval();      interval.setMin(getLower());      interval.setMax(getUpper());      interval.setColor(Color.WHITE);      addInterval(interval);    } else {      for (int i=1; i <= Integer.valueOf(intervalsNumber).intValue(); i++) {        KpiInterval interval=new KpiInterval();        String min=(String)sbRow.getAttribute(\"min\" + (new Integer(i)).toString());        String max=(String)sbRow.getAttribute(\"max\" + (new Integer(i)).toString());        String col=(String)sbRow.getAttribute(\"color\" + (new Integer(i)).toString());        interval.setMin(Double.valueOf(min).doubleValue());        interval.setMax(Double.valueOf(max).doubleValue());        Color color=new Color(Integer.decode(col).intValue());        interval.setColor(color);        addInterval(interval);      }    }  }  logger.debug(\"out\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.SBISpeedometer.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "/**  * set parameters for the creation of the chart getting them from template or from LOV. * @param content the content of the template. * @return A chart that displays a value as a dial. */public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (!isLovConfDefined) {    logger.debug(\"Configuration set in template\");    if (confParameters.get(\"increment\") != null) {      String increment=(String)confParameters.get(\"increment\");      setIncrement(Double.valueOf(increment).doubleValue());    } else {      logger.error(\"increment not defined\");      return;    }    if (confParameters.get(\"minor_tick\") != null) {      String minorTickCount=(String)confParameters.get(\"minor_tick\");      setMinorTickCount(Integer.valueOf(minorTickCount).intValue());    } else {      setMinorTickCount(10);    }    if (confParameters.get(\"dialtextuse\") != null) {      String dialtextusetemp=(String)confParameters.get(\"dialtextuse\");      if (dialtextusetemp.equalsIgnoreCase(\"true\")) {        dialtextuse=true;      } else       dialtextuse=false;    }    if (dialtextuse && confParameters.get(\"dialtext\") != null) {      dialtext=(String)confParameters.get(\"dialtext\");    }    SourceBean intervalsSB=(SourceBean)content.getAttribute(\"INTERVALS\");    configureChart_extraction_2(content,intervalsSB);  } else {    logger.debug(\"configuration defined in LOV\" + confDataset);    String increment=(String)sbRow.getAttribute(\"increment\");    String minorTickCount=(String)sbRow.getAttribute(\"minor_tick\");    setIncrement(Double.valueOf(increment).doubleValue());    setMinorTickCount(Integer.valueOf(minorTickCount).intValue());    String intervalsNumber=(String)sbRow.getAttribute(\"intervals_number\");    if (intervalsNumber == null || intervalsNumber.equals(\"\") || intervalsNumber.equals(\"0\")) {      KpiInterval interval=new KpiInterval();      interval.setMin(getLower());      interval.setMax(getUpper());      interval.setColor(Color.WHITE);      addInterval(interval);    } else {      for (int i=1; i <= Integer.valueOf(intervalsNumber).intValue(); i++) {        KpiInterval interval=new KpiInterval();        String min=(String)sbRow.getAttribute(\"min\" + (new Integer(i)).toString());        String max=(String)sbRow.getAttribute(\"max\" + (new Integer(i)).toString());        String col=(String)sbRow.getAttribute(\"color\" + (new Integer(i)).toString());        interval.setMin(Double.valueOf(min).doubleValue());        interval.setMax(Double.valueOf(max).doubleValue());        Color color=new Color(Integer.decode(col).intValue());        interval.setColor(color);        addInterval(interval);      }    }  }  logger.debug(\"out\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.SBISpeedometer.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "/**  * set parameters for the creation of the chart getting them from template or from LOV. * @param content the content of the template. * @return A chart that displays a value as a dial. */public void configureChart(SourceBean content){  super.configureChart(content);  logger.debug(\"IN\");  if (!isLovConfDefined) {    logger.debug(\"Configuration set in template\");    if (confParameters.get(\"increment\") != null) {      String increment=(String)confParameters.get(\"increment\");      setIncrement(Double.valueOf(increment).doubleValue());    } else {      logger.error(\"increment not defined\");      return;    }    if (confParameters.get(\"minor_tick\") != null) {      String minorTickCount=(String)confParameters.get(\"minor_tick\");      setMinorTickCount(Integer.valueOf(minorTickCount).intValue());    } else {      setMinorTickCount(10);    }    configureChart_extraction_1();    SourceBean intervalsSB=(SourceBean)content.getAttribute(\"INTERVALS\");    configureChart_extraction_2(content,intervalsSB);  } else {    logger.debug(\"configuration defined in LOV\" + confDataset);    String increment=(String)sbRow.getAttribute(\"increment\");    String minorTickCount=(String)sbRow.getAttribute(\"minor_tick\");    setIncrement(Double.valueOf(increment).doubleValue());    setMinorTickCount(Integer.valueOf(minorTickCount).intValue());    String intervalsNumber=(String)sbRow.getAttribute(\"intervals_number\");    if (intervalsNumber == null || intervalsNumber.equals(\"\") || intervalsNumber.equals(\"0\")) {      KpiInterval interval=new KpiInterval();      interval.setMin(getLower());      interval.setMax(getUpper());      interval.setColor(Color.WHITE);      addInterval(interval);    } else {      for (int i=1; i <= Integer.valueOf(intervalsNumber).intValue(); i++) {        KpiInterval interval=new KpiInterval();        String min=(String)sbRow.getAttribute(\"min\" + (new Integer(i)).toString());        String max=(String)sbRow.getAttribute(\"max\" + (new Integer(i)).toString());        String col=(String)sbRow.getAttribute(\"color\" + (new Integer(i)).toString());        interval.setMin(Double.valueOf(min).doubleValue());        interval.setMax(Double.valueOf(max).doubleValue());        Color color=new Color(Integer.decode(col).intValue());        interval.setColor(color);        addInterval(interval);      }    }  }  logger.debug(\"out\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.dialcharts.SBISpeedometer.configureChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.piecharts": {
        "LinkablePie": {
            "configureChart": {
                "original": {
                    "method_name": "configureChart",
                    "code": "public void configureChart(SourceBean content){  super.configureChart(content);  if (confParameters.get(\"dimensions\") != null) {    String orientation=(String)confParameters.get(\"dimensions\");    if (orientation.equalsIgnoreCase(\"3D\")) {      threeD=true;      isThreedViewConfigured=true;    } else     if (orientation.equalsIgnoreCase(\"2D\")) {      threeD=false;      isThreedViewConfigured=true;    }  }  if (confParameters.get(\"values\") != null) {    String orientation=(String)confParameters.get(\"values\");    if (orientation.equalsIgnoreCase(\"percentage\")) {      percentage=true;      isPercentageConfigured=true;    } else     if (orientation.equalsIgnoreCase(\"absolute\")) {      percentage=false;      isPercentageConfigured=true;    }  }  SourceBean drillSB=(SourceBean)content.getAttribute(\"DRILL\");  if (drillSB == null) {    drillSB=(SourceBean)content.getAttribute(\"CONF.DRILL\");  }  if (drillSB != null) {    String lab=(String)drillSB.getAttribute(\"document\");    if (lab != null)     drillLabel=lab; else {      logger.error(\"Drill label not found\");    }    List parameters=drillSB.getAttributeAsList(\"PARAM\");    if (parameters != null) {      drillParametersMap=new HashMap<String,DrillParameter>();      for (Iterator iterator=parameters.iterator(); iterator.hasNext(); ) {        SourceBean att=(SourceBean)iterator.next();        String name=(String)att.getAttribute(\"name\");        String type=(String)att.getAttribute(\"type\");        String value=(String)att.getAttribute(\"value\");        if (type != null && type.equalsIgnoreCase(\"absolute\"))         type=\"absolute\"; else         type=\"relative\";        if (name.equalsIgnoreCase(\"categoryurlname\"))         categoryUrlName=value; else         if (name.equalsIgnoreCase(\"target\")) {          if (value != null && value.equalsIgnoreCase(\"tab\")) {            setTarget(\"tab\");          } else {            setTarget(\"self\");          }        } else         if (name.equalsIgnoreCase(\"title\")) {          if (value != null && !value.equals(\"\")) {            setDrillDocTitle(value);          }        } else {          DrillParameter drillPar=new DrillParameter(name,type,value);          drillParametersMap.put(name,drillPar);        }      }    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.piecharts.LinkablePie.configureChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  super.configureChart(content);  if (confParameters.get(\"dimensions\") != null) {    String orientation=(String)confParameters.get(\"dimensions\");    if (orientation.equalsIgnoreCase(\"3D\")) {      threeD=true;      isThreedViewConfigured=true;    } else     if (orientation.equalsIgnoreCase(\"2D\")) {      threeD=false;      isThreedViewConfigured=true;    }  }  if (confParameters.get(\"values\") != null) {    String orientation=(String)confParameters.get(\"values\");    if (orientation.equalsIgnoreCase(\"percentage\")) {      percentage=true;      isPercentageConfigured=true;    } else     if (orientation.equalsIgnoreCase(\"absolute\")) {      percentage=false;      isPercentageConfigured=true;    }  }  SourceBean drillSB=(SourceBean)content.getAttribute(\"DRILL\");  if (drillSB == null) {    drillSB=(SourceBean)content.getAttribute(\"CONF.DRILL\");  }  if (drillSB != null) {    String lab=(String)drillSB.getAttribute(\"document\");    if (lab != null)     drillLabel=lab; else {      logger.error(\"Drill label not found\");    }    List parameters=drillSB.getAttributeAsList(\"PARAM\");    if (parameters != null) {      drillParametersMap=new HashMap<String,DrillParameter>();      for (Iterator iterator=parameters.iterator(); iterator.hasNext(); ) {        SourceBean att=(SourceBean)iterator.next();        String name=(String)att.getAttribute(\"name\");        String type=(String)att.getAttribute(\"type\");        String value=(String)att.getAttribute(\"value\");        configureChart_extraction_2(name,type,value);      }    }  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.piecharts.LinkablePie.configureChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "configureChart",
                        "code": "public void configureChart(SourceBean content){  super.configureChart(content);  if (confParameters.get(\"dimensions\") != null) {    String orientation=(String)confParameters.get(\"dimensions\");    if (orientation.equalsIgnoreCase(\"3D\")) {      threeD=true;      isThreedViewConfigured=true;    } else     if (orientation.equalsIgnoreCase(\"2D\")) {      threeD=false;      isThreedViewConfigured=true;    }  }  if (confParameters.get(\"values\") != null) {    configureChart_extraction_1();  }  SourceBean drillSB=(SourceBean)content.getAttribute(\"DRILL\");  if (drillSB == null) {    drillSB=(SourceBean)content.getAttribute(\"CONF.DRILL\");  }  if (drillSB != null) {    String lab=(String)drillSB.getAttribute(\"document\");    if (lab != null)     drillLabel=lab; else {      logger.error(\"Drill label not found\");    }    List parameters=drillSB.getAttributeAsList(\"PARAM\");    if (parameters != null) {      drillParametersMap=new HashMap<String,DrillParameter>();      for (Iterator iterator=parameters.iterator(); iterator.hasNext(); ) {        SourceBean att=(SourceBean)iterator.next();        String name=(String)att.getAttribute(\"name\");        String type=(String)att.getAttribute(\"type\");        String value=(String)att.getAttribute(\"value\");        configureChart_extraction_2(name,type,value);      }    }  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.piecharts.LinkablePie.configureChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts": {
        "MarkerScatter": {
            "calculateValue": {
                "original": {
                    "method_name": "calculateValue",
                    "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    String serValue=\"\";    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      if (yMarkerLabel != null && yMarkerLabel.indexOf(\"$F{\") >= 0) {        setYMarkerLabel(atts);      }      first=false;    }    int numAttsX=0;    int numAttsY=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      String name=new String(object.getKey());      if (!name.equalsIgnoreCase(\"x\")) {        if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\"))         numAttsX++; else         if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\"))         numAttsY++;      }    }    int maxNumAtts=(numAttsX < numAttsY) ? numAttsY : numAttsX;    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=(((String)object.getValue()).equals(\"null\")) ? \"0\" : new String((String)object.getValue());      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        try {          valueD=(Double.valueOf(value)).doubleValue();        } catch (        NumberFormatException e) {          Integer intero=Integer.valueOf(value);          valueD=intero.doubleValue();        }        if (pos.equalsIgnoreCase(\"x\")) {          x[num]=valueD;          if (firstX) {            xTempMin=valueD;            xTempMax=valueD;            firstX=false;          }          if (valueD < xMin)           xMin=valueD;          if (valueD > xMax)           xMax=valueD;        } else         if (pos.equalsIgnoreCase(\"y\")) {          y[num]=valueD;          if (firstY) {            yTempMin=valueD;            yTempMax=valueD;            firstY=false;          }          if (valueD < yMin)           yMin=valueD;          if (valueD > yMax)           yMax=valueD;        }      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    String serValue=\"\";    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      if (yMarkerLabel != null && yMarkerLabel.indexOf(\"$F{\") >= 0) {        setYMarkerLabel(atts);      }      first=false;    }    int numAttsX=0;    int numAttsY=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      String name=new String(object.getKey());      if (!name.equalsIgnoreCase(\"x\")) {        if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\"))         numAttsX++; else         if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\"))         numAttsY++;      }    }    int maxNumAtts=(numAttsX < numAttsY) ? numAttsY : numAttsX;    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=(((String)object.getValue()).equals(\"null\")) ? \"0\" : new String((String)object.getValue());      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        try {          valueD=(Double.valueOf(value)).doubleValue();        } catch (        NumberFormatException e) {          Integer intero=Integer.valueOf(value);          valueD=intero.doubleValue();        }        if (pos.equalsIgnoreCase(\"x\")) {          x[num]=valueD;          if (firstX) {            xTempMin=valueD;            xTempMax=valueD;            firstX=false;          }          if (valueD < xMin)           xMin=valueD;          if (valueD > xMax)           xMax=valueD;        } else         firstY=calculateValue_extraction_6(firstY,y,pos,num,valueD);      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    String serValue=\"\";    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      if (yMarkerLabel != null && yMarkerLabel.indexOf(\"$F{\") >= 0) {        setYMarkerLabel(atts);      }      first=false;    }    int numAttsX=0;    int numAttsY=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      String name=new String(object.getKey());      if (!name.equalsIgnoreCase(\"x\")) {        if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\"))         numAttsX++; else         if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\"))         numAttsY++;      }    }    int maxNumAtts=(numAttsX < numAttsY) ? numAttsY : numAttsX;    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=(((String)object.getValue()).equals(\"null\")) ? \"0\" : new String((String)object.getValue());      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        try {          valueD=(Double.valueOf(value)).doubleValue();        } catch (        NumberFormatException e) {          Integer intero=Integer.valueOf(value);          valueD=intero.doubleValue();        }        if (pos.equalsIgnoreCase(\"x\")) {          firstX=calculateValue_extraction_5(firstX,x,num,valueD);        } else         firstY=calculateValue_extraction_6(firstY,y,pos,num,valueD);      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    String serValue=\"\";    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      if (yMarkerLabel != null && yMarkerLabel.indexOf(\"$F{\") >= 0) {        setYMarkerLabel(atts);      }      first=false;    }    int numAttsX=0;    int numAttsY=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      String name=new String(object.getKey());      if (!name.equalsIgnoreCase(\"x\")) {        if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\"))         numAttsX++; else         if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\"))         numAttsY++;      }    }    int maxNumAtts=(numAttsX < numAttsY) ? numAttsY : numAttsX;    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=(((String)object.getValue()).equals(\"null\")) ? \"0\" : new String((String)object.getValue());      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        valueD=calculateValue_extraction_4(value);        if (pos.equalsIgnoreCase(\"x\")) {          firstX=calculateValue_extraction_5(firstX,x,num,valueD);        } else         firstY=calculateValue_extraction_6(firstY,y,pos,num,valueD);      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    String serValue=\"\";    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      if (yMarkerLabel != null && yMarkerLabel.indexOf(\"$F{\") >= 0) {        setYMarkerLabel(atts);      }      first=false;    }    int numAttsX=0;    int numAttsY=0;    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      String name=new String(object.getKey());      if (!name.equalsIgnoreCase(\"x\")) {        if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\"))         numAttsX++; else         if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\"))         numAttsY++;      }    }    int maxNumAtts=(numAttsX < numAttsY) ? numAttsY : numAttsX;    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=calculateValue_extraction_3(object);      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        valueD=calculateValue_extraction_4(value);        if (pos.equalsIgnoreCase(\"x\")) {          firstX=calculateValue_extraction_5(firstX,x,num,valueD);        } else         firstY=calculateValue_extraction_6(firstY,y,pos,num,valueD);      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Extraction4.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    String serValue=\"\";    if (first) {      if (name.indexOf(\"$F{\") >= 0) {        setTitleParameter(atts);      }      if (getSubName() != null && getSubName().indexOf(\"$F\") >= 0) {        setSubTitleParameter(atts);      }      if (yMarkerLabel != null && yMarkerLabel.indexOf(\"$F{\") >= 0) {        setYMarkerLabel(atts);      }      first=false;    }    int numAttsX=0;    int maxNumAtts=calculateValue_extraction_2(atts,numAttsX);    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=calculateValue_extraction_3(object);      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        valueD=calculateValue_extraction_4(value);        if (pos.equalsIgnoreCase(\"x\")) {          firstX=calculateValue_extraction_5(firstX,x,num,valueD);        } else         firstY=calculateValue_extraction_6(firstY,y,pos,num,valueD);      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction5",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Extraction5.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "calculateValue",
                        "code": "/**  * Inherited by IChart: calculates chart value. * @return the dataset * @throws Exception the exception */public DatasetMap calculateValue() throws Exception {  logger.debug(\"IN\");  String res=DataSetAccessFunctions.getDataSetResultFromId(profile,getData(),parametersObject);  DefaultXYDataset dataset=new DefaultXYDataset();  SourceBean sbRows=SourceBean.fromXMLString(res);  List listAtts=sbRows.getAttributeAsList(\"ROW\");  series=new Vector();  boolean firstX=true;  boolean firstY=true;  double xTempMax=0.0;  double xTempMin=0.0;  double yTempMax=0.0;  double yTempMin=0.0;  boolean first=true;  for (Iterator iterator=listAtts.iterator(); iterator.hasNext(); ) {    SourceBean serie=(SourceBean)iterator.next();    List atts=serie.getContainedAttributes();    String catValue=\"\";    first=calculateValue_extraction_1(first,atts);    int numAttsX=0;    int maxNumAtts=calculateValue_extraction_2(atts,numAttsX);    double[] x=new double[maxNumAtts];    double[] y=new double[maxNumAtts];    String name=\"\";    String value=\"\";    for (Iterator iterator2=atts.iterator(); iterator2.hasNext(); ) {      SourceBeanAttribute object=(SourceBeanAttribute)iterator2.next();      name=new String(object.getKey());      value=calculateValue_extraction_3(object);      if (name.equalsIgnoreCase(\"x\")) {        catValue=value;      } else       if (String.valueOf(name.charAt(0)).equalsIgnoreCase(\"x\") || String.valueOf(name.charAt(0)).equalsIgnoreCase(\"y\")) {        String pos=String.valueOf(name.charAt(0));        String numS=name.substring(1);        int num=Integer.valueOf(numS).intValue();        double valueD=0.0;        valueD=calculateValue_extraction_4(value);        if (pos.equalsIgnoreCase(\"x\")) {          firstX=calculateValue_extraction_5(firstX,x,num,valueD);        } else         firstY=calculateValue_extraction_6(firstY,y,pos,num,valueD);      }    }    double[][] seriesT=new double[][]{y,x};    dataset.addSeries(catValue,seriesT);    series.add(catValue);    if (viewAnnotations != null && viewAnnotations.equalsIgnoreCase(\"true\")) {      double tmpx=seriesT[1][0];      double tmpy=seriesT[0][0];      annotationMap.put(catValue,String.valueOf(tmpx) + \"__\" + String.valueOf(tmpy));    }  }  logger.debug(\"OUT\");  DatasetMap datasets=new DatasetMap();  datasets.addDataset(\"1\",dataset);  return datasets;}",
                        "extraction_name": "Extraction6",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.scattercharts.MarkerScatter.calculateValue.Extraction6.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.targetcharts": {
        "SparkLine": {
            "getLastPointColor": {
                "original": {
                    "method_name": "getLastPointColor",
                    "code": "public Paint getLastPointColor(){  logger.debug(\"IN\");  Color colorToReturn=null;  try {    final int last=lastIndexMonth;    TimeSeriesDataItem item=timeSeries.getDataItem(new Month(last,Integer.valueOf(lastYear).intValue()));    if (item == null || item.getValue() == null) {      return Color.WHITE;    }    Double currentValue=(Double)item.getValue();    TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());    Double thresholdGiveColor=null;    if (useTargets) {      boolean stop=false;      for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {        Double currentThres=(Double)iterator.next();        if (currentValue >= currentThres) {          thresholdGiveColor=currentThres;        } else {          stop=true;        }      }    } else     if (!useTargets) {      boolean stop=false;      for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {        Double currentThres=(Double)iterator.next();        if (currentValue > currentThres) {        } else {          stop=true;          thresholdGiveColor=currentThres;        }      }      if (stop == false) {        thresholdGiveColor=null;      }    }    if (thresholdGiveColor == null) {      if (bottomThreshold != null && bottomThreshold.getColor() != null)       colorToReturn=bottomThreshold.getColor(); else       colorToReturn=Color.GREEN;    } else {      TargetThreshold currThreshold=thresholds.get(thresholdGiveColor);      colorToReturn=currThreshold.getColor();      if (colorToReturn == null) {        colorToReturn=Color.BLACK;      }    }  } catch (  Exception e) {    logger.error(\"Exception while deifning last ponter color: set default green\",e);    return Color.GREEN;  }  logger.debug(\"OUT\");  return colorToReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.targetcharts.SparkLine.getLastPointColor.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getLastPointColor",
                        "code": "public Paint getLastPointColor(){  logger.debug(\"IN\");  Color colorToReturn=null;  try {    final int last=lastIndexMonth;    TimeSeriesDataItem item=timeSeries.getDataItem(new Month(last,Integer.valueOf(lastYear).intValue()));    if (item == null || item.getValue() == null) {      return Color.WHITE;    }    Double currentValue=(Double)item.getValue();    TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());    Double thresholdGiveColor=null;    if (useTargets) {      boolean stop=false;      for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {        Double currentThres=(Double)iterator.next();        if (currentValue >= currentThres) {          thresholdGiveColor=currentThres;        } else {          stop=true;        }      }    } else     if (!useTargets) {      thresholdGiveColor=getLastPointColor_extraction_2(currentValue,orderedThresholds,thresholdGiveColor);    }    if (thresholdGiveColor == null) {      if (bottomThreshold != null && bottomThreshold.getColor() != null)       colorToReturn=bottomThreshold.getColor(); else       colorToReturn=Color.GREEN;    } else {      TargetThreshold currThreshold=thresholds.get(thresholdGiveColor);      colorToReturn=currThreshold.getColor();      if (colorToReturn == null) {        colorToReturn=Color.BLACK;      }    }  } catch (  Exception e) {    logger.error(\"Exception while deifning last ponter color: set default green\",e);    return Color.GREEN;  }  logger.debug(\"OUT\");  return colorToReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.targetcharts.SparkLine.getLastPointColor.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getLastPointColor",
                        "code": "public Paint getLastPointColor(){  logger.debug(\"IN\");  Color colorToReturn=null;  try {    final int last=lastIndexMonth;    TimeSeriesDataItem item=timeSeries.getDataItem(new Month(last,Integer.valueOf(lastYear).intValue()));    if (item == null || item.getValue() == null) {      return Color.WHITE;    }    Double currentValue=(Double)item.getValue();    TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());    Double thresholdGiveColor=null;    if (useTargets) {      boolean stop=false;      thresholdGiveColor=getLastPointColor_extraction_1(currentValue,orderedThresholds,thresholdGiveColor,stop);    } else     if (!useTargets) {      thresholdGiveColor=getLastPointColor_extraction_2(currentValue,orderedThresholds,thresholdGiveColor);    }    if (thresholdGiveColor == null) {      if (bottomThreshold != null && bottomThreshold.getColor() != null)       colorToReturn=bottomThreshold.getColor(); else       colorToReturn=Color.GREEN;    } else {      TargetThreshold currThreshold=thresholds.get(thresholdGiveColor);      colorToReturn=currThreshold.getColor();      if (colorToReturn == null) {        colorToReturn=Color.BLACK;      }    }  } catch (  Exception e) {    logger.error(\"Exception while deifning last ponter color: set default green\",e);    return Color.GREEN;  }  logger.debug(\"OUT\");  return colorToReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.targetcharts.SparkLine.getLastPointColor.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils": {
        "MyBarRendererThresholdPaint": {
            "getItemPaint": {
                "original": {
                    "method_name": "getItemPaint",
                    "code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue >= currentThres) {        thresholdGiveColor=currentThres;      } else {        stop=true;      }    }  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  if (thresholdGiveColor == null) {    if (bottomThreshold != null && bottomThreshold.getColor() != null) {      colorToReturn=bottomThreshold.getColor();    }    if (colorToReturn == null) {      colorToReturn=Color.BLACK;    }  } else {    if (thresholds.get(thresholdGiveColor) != null && thresholds.get(thresholdGiveColor).getColor() != null)     colorToReturn=thresholds.get(thresholdGiveColor).getColor();    if (colorToReturn == null) {      colorToReturn=Color.BLACK;    }  }  logger.debug(\"OUT\");  return colorToReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils.MyBarRendererThresholdPaint.getItemPaint.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getItemPaint",
                        "code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue >= currentThres) {        thresholdGiveColor=currentThres;      } else {        stop=true;      }    }  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  return getItemPaint_extraction_2(thresholdGiveColor,colorToReturn);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils.MyBarRendererThresholdPaint.getItemPaint.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getItemPaint",
                        "code": "public Paint getItemPaint(int row,int column){  logger.debug(\"IN\");  String columnKey=(String)dataset.getColumnKey(column);  int separator=columnKey.indexOf('-');  String month=columnKey.substring(0,separator);  String year=columnKey.substring(separator + 1);  Number value=dataset.getValue(row,column);  Month currentMonth=new Month(Integer.valueOf(month),Integer.valueOf(year));  TimeSeriesDataItem item=timeSeries.getDataItem(currentMonth);  if (nullValues.contains(columnKey)) {    return background;  }  if (item == null || item.getValue() == null) {    return background;  }  Double currentValue=(Double)item.getValue();  TreeSet<Double> orderedThresholds=new TreeSet<Double>(thresholds.keySet());  Double thresholdGiveColor=null;  if (useTargets) {    boolean stop=false;    thresholdGiveColor=getItemPaint_extraction_1(currentValue,orderedThresholds,thresholdGiveColor,stop);  } else   if (!useTargets) {    boolean stop=false;    for (Iterator iterator=orderedThresholds.iterator(); iterator.hasNext() && stop == false; ) {      Double currentThres=(Double)iterator.next();      if (currentValue > currentThres) {      } else {        stop=true;        thresholdGiveColor=currentThres;      }    }    if (stop == false) {      thresholdGiveColor=null;    }  }  Color colorToReturn=null;  return getItemPaint_extraction_2(thresholdGiveColor,colorToReturn);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.utils.MyBarRendererThresholdPaint.getItemPaint.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.XYCharts": {
        "SimpleBlockChart": {
            "createChart": {
                "original": {
                    "method_name": "createChart",
                    "code": "/**  * Creates a chart for the specified dataset. * @param dataset  the dataset. * @return A chart instance. */public JFreeChart createChart(DatasetMap datasets){  logger.debug(\"IN\");  XYZDataset dataset=(XYZDataset)datasets.getDatasets().get(\"1\");  JFreeChart chart=null;  NumberAxis xAxis=new NumberAxis(xLabel);  xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  if (xLowerBound != null && xUpperBound != null) {    xAxis.setLowerBound(xLowerBound);    xAxis.setUpperBound(xUpperBound);  } else {    xAxis.setAutoRange(true);  }  xAxis.setAxisLinePaint(Color.white);  xAxis.setTickMarkPaint(Color.white);  if (addLabelsStyle != null && addLabelsStyle.getFont() != null) {    xAxis.setLabelFont(addLabelsStyle.getFont());    xAxis.setLabelPaint(addLabelsStyle.getColor());  }  NumberAxis yAxis=new NumberAxis(yLabel);  yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  if (yLowerBound != null && yUpperBound != null) {    yAxis.setLowerBound(yLowerBound);    yAxis.setUpperBound(yUpperBound);  } else   yAxis.setAutoRange(true);  yAxis.setAxisLinePaint(Color.white);  yAxis.setTickMarkPaint(Color.white);  if (addLabelsStyle != null && addLabelsStyle.getFont() != null) {    yAxis.setLabelFont(addLabelsStyle.getFont());    yAxis.setLabelPaint(addLabelsStyle.getColor());  }  XYBlockRenderer renderer=new XYBlockRenderer();  PaintScale paintScale=null;  if (grayPaintScale) {    paintScale=new GrayPaintScale(minScaleValue,maxScaleValue);  } else {    if (scaleLowerBound != null && scaleUpperBound != null) {      paintScale=new LookupPaintScale(scaleLowerBound,scaleUpperBound,Color.gray);    } else {      paintScale=new LookupPaintScale(minScaleValue,maxScaleValue,Color.gray);    }    for (int i=0; i < zRangeArray.length; i++) {      ZRange zRange=zRangeArray[i];      ((LookupPaintScale)paintScale).add(zRange.getValue().doubleValue(),zRange.getColor());    }  }  renderer.setPaintScale(paintScale);  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,renderer);  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinesVisible(false);  plot.setRangeGridlinePaint(Color.white);  plot.setAxisOffset(new RectangleInsets(5,5,5,5));  plot.setForegroundAlpha(0.66f);  chart=new JFreeChart(plot);  TextTitle title=setStyleTitle(name,styleTitle);  chart.setTitle(title);  if (subName != null && !subName.equals(\"\")) {    TextTitle subTitle=setStyleTitle(subName,styleSubTitle);    chart.addSubtitle(subTitle);  }  chart.removeLegend();  NumberAxis scaleAxis=new NumberAxis(zLabel);  scaleAxis.setAxisLinePaint(Color.white);  scaleAxis.setTickMarkPaint(Color.white);  scaleAxis.setTickLabelFont(new Font(\"Dialog\",Font.PLAIN,7));  if (scaleLowerBound != null && scaleUpperBound != null) {    scaleAxis.setLowerBound(scaleLowerBound);    scaleAxis.setUpperBound(scaleUpperBound);  } else   scaleAxis.setAutoRange(true);  if (addLabelsStyle != null && addLabelsStyle.getFont() != null) {    scaleAxis.setLabelFont(addLabelsStyle.getFont());    scaleAxis.setLabelPaint(addLabelsStyle.getColor());  }  if (blockHeight != null && blockWidth != null) {    renderer.setBlockWidth(blockWidth.doubleValue());    renderer.setBlockHeight(blockHeight.doubleValue());  }  PaintScaleLegend legend=new PaintScaleLegend(paintScale,scaleAxis);  legend.setAxisLocation(AxisLocation.BOTTOM_OR_LEFT);  legend.setAxisOffset(5.0);  legend.setMargin(new RectangleInsets(5,5,5,5));  legend.setFrame(new BlockBorder(Color.black));  legend.setPadding(new RectangleInsets(10,10,10,10));  legend.setStripWidth(10);  legend.setPosition(RectangleEdge.RIGHT);  legend.setBackgroundPaint(color);  chart.addSubtitle(legend);  chart.setBackgroundPaint(color);  logger.debug(\"OUT\");  return chart;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.XYCharts.SimpleBlockChart.createChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "createChart",
                        "code": "/**  * Creates a chart for the specified dataset. * @param dataset  the dataset. * @return A chart instance. */public JFreeChart createChart(DatasetMap datasets){  logger.debug(\"IN\");  XYZDataset dataset=(XYZDataset)datasets.getDatasets().get(\"1\");  JFreeChart chart=null;  NumberAxis xAxis=new NumberAxis(xLabel);  xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  if (xLowerBound != null && xUpperBound != null) {    xAxis.setLowerBound(xLowerBound);    xAxis.setUpperBound(xUpperBound);  } else {    xAxis.setAutoRange(true);  }  xAxis.setAxisLinePaint(Color.white);  xAxis.setTickMarkPaint(Color.white);  if (addLabelsStyle != null && addLabelsStyle.getFont() != null) {    xAxis.setLabelFont(addLabelsStyle.getFont());    xAxis.setLabelPaint(addLabelsStyle.getColor());  }  NumberAxis yAxis=new NumberAxis(yLabel);  yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  if (yLowerBound != null && yUpperBound != null) {    yAxis.setLowerBound(yLowerBound);    yAxis.setUpperBound(yUpperBound);  } else   yAxis.setAutoRange(true);  yAxis.setAxisLinePaint(Color.white);  yAxis.setTickMarkPaint(Color.white);  if (addLabelsStyle != null && addLabelsStyle.getFont() != null) {    yAxis.setLabelFont(addLabelsStyle.getFont());    yAxis.setLabelPaint(addLabelsStyle.getColor());  }  XYBlockRenderer renderer=new XYBlockRenderer();  PaintScale paintScale=null;  if (grayPaintScale) {    paintScale=new GrayPaintScale(minScaleValue,maxScaleValue);  } else {    if (scaleLowerBound != null && scaleUpperBound != null) {      paintScale=new LookupPaintScale(scaleLowerBound,scaleUpperBound,Color.gray);    } else {      paintScale=new LookupPaintScale(minScaleValue,maxScaleValue,Color.gray);    }    for (int i=0; i < zRangeArray.length; i++) {      ZRange zRange=zRangeArray[i];      ((LookupPaintScale)paintScale).add(zRange.getValue().doubleValue(),zRange.getColor());    }  }  renderer.setPaintScale(paintScale);  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,renderer);  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinesVisible(false);  plot.setRangeGridlinePaint(Color.white);  plot.setAxisOffset(new RectangleInsets(5,5,5,5));  plot.setForegroundAlpha(0.66f);  chart=new JFreeChart(plot);  TextTitle title=setStyleTitle(name,styleTitle);  chart.setTitle(title);  if (subName != null && !subName.equals(\"\")) {    TextTitle subTitle=setStyleTitle(subName,styleSubTitle);    chart.addSubtitle(subTitle);  }  chart.removeLegend();  NumberAxis scaleAxis=new NumberAxis(zLabel);  scaleAxis.setAxisLinePaint(Color.white);  scaleAxis.setTickMarkPaint(Color.white);  createChart_extraction_2(chart,renderer,paintScale,scaleAxis);  logger.debug(\"OUT\");  return chart;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.XYCharts.SimpleBlockChart.createChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "createChart",
                        "code": "/**  * Creates a chart for the specified dataset. * @param dataset  the dataset. * @return A chart instance. */public JFreeChart createChart(DatasetMap datasets){  logger.debug(\"IN\");  XYZDataset dataset=(XYZDataset)datasets.getDatasets().get(\"1\");  JFreeChart chart=null;  NumberAxis xAxis=new NumberAxis(xLabel);  xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  if (xLowerBound != null && xUpperBound != null) {    xAxis.setLowerBound(xLowerBound);    xAxis.setUpperBound(xUpperBound);  } else {    xAxis.setAutoRange(true);  }  xAxis.setAxisLinePaint(Color.white);  xAxis.setTickMarkPaint(Color.white);  if (addLabelsStyle != null && addLabelsStyle.getFont() != null) {    xAxis.setLabelFont(addLabelsStyle.getFont());    xAxis.setLabelPaint(addLabelsStyle.getColor());  }  NumberAxis yAxis=new NumberAxis(yLabel);  PaintScale paintScale;  XYBlockRenderer renderer=createChart_extraction_1(yAxis);  if (grayPaintScale) {    paintScale=new GrayPaintScale(minScaleValue,maxScaleValue);  } else {    if (scaleLowerBound != null && scaleUpperBound != null) {      paintScale=new LookupPaintScale(scaleLowerBound,scaleUpperBound,Color.gray);    } else {      paintScale=new LookupPaintScale(minScaleValue,maxScaleValue,Color.gray);    }    for (int i=0; i < zRangeArray.length; i++) {      ZRange zRange=zRangeArray[i];      ((LookupPaintScale)paintScale).add(zRange.getValue().doubleValue(),zRange.getColor());    }  }  renderer.setPaintScale(paintScale);  XYPlot plot=new XYPlot(dataset,xAxis,yAxis,renderer);  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinesVisible(false);  plot.setRangeGridlinePaint(Color.white);  plot.setAxisOffset(new RectangleInsets(5,5,5,5));  plot.setForegroundAlpha(0.66f);  chart=new JFreeChart(plot);  TextTitle title=setStyleTitle(name,styleTitle);  chart.setTitle(title);  if (subName != null && !subName.equals(\"\")) {    TextTitle subTitle=setStyleTitle(subName,styleSubTitle);    chart.addSubtitle(subTitle);  }  chart.removeLegend();  NumberAxis scaleAxis=new NumberAxis(zLabel);  scaleAxis.setAxisLinePaint(Color.white);  scaleAxis.setTickMarkPaint(Color.white);  createChart_extraction_2(chart,renderer,paintScale,scaleAxis);  logger.debug(\"OUT\");  return chart;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.chart.bo.charttypes.XYCharts.SimpleBlockChart.createChart.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.config.service": {
        "DetailEngineModule": {
            "modDettaglioEngine": {
                "original": {
                    "method_name": "modDettaglioEngine",
                    "code": "/**  * Inserts/Modifies the detail of an engine according to the user request.  When an engine is modified, the <code>modifyEngine</code> method is called; when a new engine is added, the <code>insertEngine</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioEngine(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  Engine engine=recoverEngineDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"NAME\",engine.getName());  logParam.put(\"TYPE\",engine.getEngineTypeId().toString());  try {    String engineTypeIdStr=(String)request.getAttribute(\"engineTypeId\");    Integer engineTypeId=new Integer(engineTypeIdStr);    Domain engineType=DAOFactory.getDomainDAO().loadDomainById(engineTypeId);    if (\"EXT\".equalsIgnoreCase(engineType.getValueCd()))     ValidationCoordinator.validate(\"PAGE\",\"ExternalEngineDetailPage\",this); else     ValidationCoordinator.validate(\"PAGE\",\"InternalEngineDetailPage\",this);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");          response.setAttribute(\"engineObj\",engine);          response.setAttribute(\"modality\",mod);          return;        }      }    }    RequestContainer reqCont=getRequestContainer();    SessionContainer sessCont=reqCont.getSessionContainer();    SessionContainer permSess=sessCont.getPermanentContainer();    UserProfile profile=(UserProfile)this.getRequestContainer().getSessionContainer().getPermanentContainer().getAttribute(IEngUserProfile.ENG_USER_PROFILE);    String userId=profile.getUserId().toString();    IEngineDAO dao=DAOFactory.getEngineDAO();    dao.setUserProfile(profile);    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      dao.insertEngine(engine);    } else {      dao.modifyEngine(engine);    }  } catch (  EMFUserError e) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.ADD\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListEnginesModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,1012,new Vector(),params);  }catch (  Exception ex) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.ADD\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailEngineModule\",\"modDetailEngine\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.ADD\",logParam,\"OK\");    } catch (    Exception e1) {      e1.printStackTrace();    }  } else {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"OK\");    } catch (    Exception e1) {      e1.printStackTrace();    }  }  response.setAttribute(\"loopback\",\"true\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.config.service.DetailEngineModule.modDettaglioEngine.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "modDettaglioEngine",
                        "code": "/**  * Inserts/Modifies the detail of an engine according to the user request.  When an engine is modified, the <code>modifyEngine</code> method is called; when a new engine is added, the <code>insertEngine</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioEngine(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  Engine engine=recoverEngineDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"NAME\",engine.getName());  logParam.put(\"TYPE\",engine.getEngineTypeId().toString());  try {    String engineTypeIdStr=(String)request.getAttribute(\"engineTypeId\");    Integer engineTypeId=new Integer(engineTypeIdStr);    Domain engineType=DAOFactory.getDomainDAO().loadDomainById(engineTypeId);    if (\"EXT\".equalsIgnoreCase(engineType.getValueCd()))     ValidationCoordinator.validate(\"PAGE\",\"ExternalEngineDetailPage\",this); else     ValidationCoordinator.validate(\"PAGE\",\"InternalEngineDetailPage\",this);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");          response.setAttribute(\"engineObj\",engine);          response.setAttribute(\"modality\",mod);          return;        }      }    }    RequestContainer reqCont=getRequestContainer();    SessionContainer sessCont=reqCont.getSessionContainer();    SessionContainer permSess=sessCont.getPermanentContainer();    UserProfile profile=(UserProfile)this.getRequestContainer().getSessionContainer().getPermanentContainer().getAttribute(IEngUserProfile.ENG_USER_PROFILE);    String userId=profile.getUserId().toString();    IEngineDAO dao=DAOFactory.getEngineDAO();    dao.setUserProfile(profile);    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      dao.insertEngine(engine);    } else {      dao.modifyEngine(engine);    }  } catch (  EMFUserError e) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.ADD\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListEnginesModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,1012,new Vector(),params);  }catch (  Exception ex) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.ADD\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailEngineModule\",\"modDetailEngine\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  modDettaglioEngine_extraction_3(mod,logParam);  response.setAttribute(\"loopback\",\"true\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.config.service.DetailEngineModule.modDettaglioEngine.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDettaglioEngine",
                        "code": "/**  * Inserts/Modifies the detail of an engine according to the user request.  When an engine is modified, the <code>modifyEngine</code> method is called; when a new engine is added, the <code>insertEngine</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioEngine(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  Engine engine=recoverEngineDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"NAME\",engine.getName());  logParam.put(\"TYPE\",engine.getEngineTypeId().toString());  try {    String engineTypeIdStr=(String)request.getAttribute(\"engineTypeId\");    Integer engineTypeId=new Integer(engineTypeIdStr);    Domain engineType=DAOFactory.getDomainDAO().loadDomainById(engineTypeId);    if (\"EXT\".equalsIgnoreCase(engineType.getValueCd()))     ValidationCoordinator.validate(\"PAGE\",\"ExternalEngineDetailPage\",this); else     ValidationCoordinator.validate(\"PAGE\",\"InternalEngineDetailPage\",this);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");          response.setAttribute(\"engineObj\",engine);          response.setAttribute(\"modality\",mod);          return;        }      }    }    RequestContainer reqCont=getRequestContainer();    SessionContainer sessCont=reqCont.getSessionContainer();    SessionContainer permSess=sessCont.getPermanentContainer();    UserProfile profile=(UserProfile)this.getRequestContainer().getSessionContainer().getPermanentContainer().getAttribute(IEngUserProfile.ENG_USER_PROFILE);    String userId=profile.getUserId().toString();    IEngineDAO dao=DAOFactory.getEngineDAO();    dao.setUserProfile(profile);    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      dao.insertEngine(engine);    } else {      dao.modifyEngine(engine);    }  } catch (  EMFUserError e) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.ADD\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListEnginesModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,1012,new Vector(),params);  }catch (  Exception ex) {    modDettaglioEngine_extraction_2(mod,logParam);    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailEngineModule\",\"modDetailEngine\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  modDettaglioEngine_extraction_3(mod,logParam);  response.setAttribute(\"loopback\",\"true\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.config.service.DetailEngineModule.modDettaglioEngine.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDettaglioEngine",
                        "code": "/**  * Inserts/Modifies the detail of an engine according to the user request.  When an engine is modified, the <code>modifyEngine</code> method is called; when a new engine is added, the <code>insertEngine</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDettaglioEngine(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  Engine engine=recoverEngineDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"NAME\",engine.getName());  logParam.put(\"TYPE\",engine.getEngineTypeId().toString());  try {    String engineTypeIdStr=(String)request.getAttribute(\"engineTypeId\");    Integer engineTypeId=new Integer(engineTypeIdStr);    Domain engineType=DAOFactory.getDomainDAO().loadDomainById(engineTypeId);    if (\"EXT\".equalsIgnoreCase(engineType.getValueCd()))     ValidationCoordinator.validate(\"PAGE\",\"ExternalEngineDetailPage\",this); else     ValidationCoordinator.validate(\"PAGE\",\"InternalEngineDetailPage\",this);    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"ENGINE.MODIFY\",logParam,\"ERR\");          response.setAttribute(\"engineObj\",engine);          response.setAttribute(\"modality\",mod);          return;        }      }    }    RequestContainer reqCont=getRequestContainer();    SessionContainer sessCont=reqCont.getSessionContainer();    SessionContainer permSess=sessCont.getPermanentContainer();    UserProfile profile=(UserProfile)this.getRequestContainer().getSessionContainer().getPermanentContainer().getAttribute(IEngUserProfile.ENG_USER_PROFILE);    String userId=profile.getUserId().toString();    IEngineDAO dao=DAOFactory.getEngineDAO();    dao.setUserProfile(profile);    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      dao.insertEngine(engine);    } else {      dao.modifyEngine(engine);    }  } catch (  EMFUserError e) {    modDettaglioEngine_extraction_1(mod,logParam);    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListEnginesModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,1012,new Vector(),params);  }catch (  Exception ex) {    modDettaglioEngine_extraction_2(mod,logParam);    SpagoBITracer.major(AdmintoolsConstants.NAME_MODULE,\"DetailEngineModule\",\"modDetailEngine\",\"Cannot fill response container\",ex);    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  modDettaglioEngine_extraction_3(mod,logParam);  response.setAttribute(\"loopback\",\"true\");}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.config.service.DetailEngineModule.modDettaglioEngine.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.engines.exporters": {
        "DocumentCompositionExporter": {
            "exportDocumentCompositionPDF": {
                "original": {
                    "method_name": "exportDocumentCompositionPDF",
                    "code": "public File exportDocumentCompositionPDF(File tmpFile,DocumentCompositionConfiguration dcConf,BIObject document,IEngUserProfile profile,Map<String,CurrentConfigurationDocComp> currentConfs,Map<String,DocumentContainer> documentsMap,boolean defaultStyle) throws Exception {  logger.debug(\"IN\");  String output=null;  InputStream svgInputStream=null;  InputStream pngInputStream=null;  OutputStream svgOutputStream=null;  try {    Map docMap=dcConf.getDocumentsMap();    for (Iterator iterator=docMap.keySet().iterator(); iterator.hasNext(); ) {      Object key=iterator.next();      Document doc=(Document)docMap.get(key);      String label=doc.getSbiObjLabel();      logger.debug(\"Document \" + label);      DocumentContainer documentContainer=documentsMap.get(label);      if (documentContainer == null)       continue;      IBIObjectDAO dao=DAOFactory.getBIObjectDAO();      BIObject objectID=dao.loadBIObjectByLabel(label);      BIObject object=null;      Collection roles=null;      roles=((UserProfile)profile).getRolesForUse();      for (Iterator iterator2=roles.iterator(); iterator2.hasNext(); ) {        Object role=iterator2.next();        try {          object=dao.loadBIObjectForExecutionByIdAndRole(objectID.getId(),role.toString());        } catch (        Exception e) {          logger.error(\"error in recovering the role\");        }        if (object != null)         break;      }      logger.debug(\"fill parameters from URL\");      fillBIObjectWithParameterValues(object,currentConfs.get(label));      byte[] returnByteArray=null;      if (currentConfs.get(\"SVG_\" + label) != null) {        Map tmpSvg=currentConfs.get(\"SVG_\" + label).getParameters();        String tmpContent=tmpSvg.get(\"SVG_\" + label).toString();        String svg=tmpContent;        svgInputStream=new ByteArrayInputStream(svg.getBytes(\"UTF-8\"));        File dir=new File(System.getProperty(\"java.io.tmpdir\"));        Random generator=new Random();        int randomInt=generator.nextInt();        File pdfFile=File.createTempFile(Integer.valueOf(randomInt).toString(),\".pdf\",dir);        svgOutputStream=new FileOutputStream(pdfFile);        ExportHighCharts.transformSVGIntoPDF(svgInputStream,svgOutputStream);        pngInputStream=new FileInputStream(pdfFile);        long length=pdfFile.length();        if (length > Integer.MAX_VALUE) {          logger.error(\"file too large\");          return null;        }        returnByteArray=new byte[(int)length];        int offset=0;        int numRead=0;        while (offset < returnByteArray.length && (numRead=pngInputStream.read(returnByteArray,offset,returnByteArray.length - offset)) >= 0) {          offset+=numRead;        }        if (offset < returnByteArray.length) {          logger.warn(\"Could not read all the file\");        }      } else       if (true) {        logger.debug(\"call execution proxy\");        ExecutionProxy proxy=new ExecutionProxy();        proxy.setBiObject(object);        Engine engine=object.getEngine();        String driverName=engine.getDriverName();        if (driverName != null && driverName.endsWith(\"BirtReportDriver\")) {          output=\"PDF\";        } else {          output=\"JPG\";        }        returnByteArray=proxy.exec(profile,ExecutionProxy.EXPORT_MODALITY,output);      }      logger.debug(\"add content retrieved to Document Container\");      if (returnByteArray != null) {        if (returnByteArray.length == 0)         logger.warn(\"empty byte array retrieved for document \" + label);        documentContainer.setContent(returnByteArray);        documentContainer.setDocumentLabel(label);        documentContainer.setDocumentType(object.getBiObjectTypeCode());      }    }    FileOutputStream fileOutputStream=new FileOutputStream(tmpFile);    PdfCreator pdfCreator=new PdfCreator();    logger.debug(\"Call PDF Creation\");    pdfCreator.setVideoHeight(dcConf.getVideoHeight());    pdfCreator.setVideoWidth(dcConf.getVideoWidth());    FileOutputStream pdfFile=pdfCreator.createPdfFile(fileOutputStream,documentsMap,defaultStyle);    pdfFile.flush();    pdfFile.close();    logger.debug(\"OUT\");    return tmpFile;  } catch (  Exception e) {    logger.error(e);    return null;  } finally {    if (pngInputStream != null) {      try {        pngInputStream.close();      } catch (      IOException e) {        logger.error(e);      }    }    if (svgInputStream != null) {      try {        svgInputStream.close();      } catch (      IOException e) {        logger.error(e);      }    }    if (svgOutputStream != null) {      try {        svgOutputStream.close();      } catch (      IOException e) {        logger.error(e);      }    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.exportDocumentCompositionPDF.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "exportDocumentCompositionPDF",
                        "code": "public File exportDocumentCompositionPDF(File tmpFile,DocumentCompositionConfiguration dcConf,BIObject document,IEngUserProfile profile,Map<String,CurrentConfigurationDocComp> currentConfs,Map<String,DocumentContainer> documentsMap,boolean defaultStyle) throws Exception {  logger.debug(\"IN\");  String output=null;  InputStream svgInputStream=null;  InputStream pngInputStream=null;  OutputStream svgOutputStream=null;  try {    Map docMap=dcConf.getDocumentsMap();    for (Iterator iterator=docMap.keySet().iterator(); iterator.hasNext(); ) {      Object key=iterator.next();      Document doc=(Document)docMap.get(key);      String label=doc.getSbiObjLabel();      logger.debug(\"Document \" + label);      DocumentContainer documentContainer=documentsMap.get(label);      if (documentContainer == null)       continue;      IBIObjectDAO dao=DAOFactory.getBIObjectDAO();      BIObject objectID=dao.loadBIObjectByLabel(label);      BIObject object=null;      Collection roles=null;      roles=((UserProfile)profile).getRolesForUse();      for (Iterator iterator2=roles.iterator(); iterator2.hasNext(); ) {        Object role=iterator2.next();        try {          object=dao.loadBIObjectForExecutionByIdAndRole(objectID.getId(),role.toString());        } catch (        Exception e) {          logger.error(\"error in recovering the role\");        }        if (object != null)         break;      }      logger.debug(\"fill parameters from URL\");      fillBIObjectWithParameterValues(object,currentConfs.get(label));      byte[] returnByteArray=null;      if (currentConfs.get(\"SVG_\" + label) != null) {        Map tmpSvg=currentConfs.get(\"SVG_\" + label).getParameters();        String tmpContent=tmpSvg.get(\"SVG_\" + label).toString();        String svg=tmpContent;        svgInputStream=new ByteArrayInputStream(svg.getBytes(\"UTF-8\"));        File dir=new File(System.getProperty(\"java.io.tmpdir\"));        Random generator=new Random();        int randomInt=generator.nextInt();        File pdfFile=File.createTempFile(Integer.valueOf(randomInt).toString(),\".pdf\",dir);        svgOutputStream=new FileOutputStream(pdfFile);        ExportHighCharts.transformSVGIntoPDF(svgInputStream,svgOutputStream);        pngInputStream=new FileInputStream(pdfFile);        long length=pdfFile.length();        if (length > Integer.MAX_VALUE) {          logger.error(\"file too large\");          return null;        }        returnByteArray=new byte[(int)length];        int offset=0;        int numRead=0;        while (offset < returnByteArray.length && (numRead=pngInputStream.read(returnByteArray,offset,returnByteArray.length - offset)) >= 0) {          offset+=numRead;        }        if (offset < returnByteArray.length) {          logger.warn(\"Could not read all the file\");        }      } else       if (true) {        logger.debug(\"call execution proxy\");        ExecutionProxy proxy=new ExecutionProxy();        proxy.setBiObject(object);        Engine engine=object.getEngine();        String driverName=engine.getDriverName();        if (driverName != null && driverName.endsWith(\"BirtReportDriver\")) {          output=\"PDF\";        } else {          output=\"JPG\";        }        returnByteArray=proxy.exec(profile,ExecutionProxy.EXPORT_MODALITY,output);      }      logger.debug(\"add content retrieved to Document Container\");      if (returnByteArray != null) {        if (returnByteArray.length == 0)         logger.warn(\"empty byte array retrieved for document \" + label);        documentContainer.setContent(returnByteArray);        documentContainer.setDocumentLabel(label);        documentContainer.setDocumentType(object.getBiObjectTypeCode());      }    }    FileOutputStream fileOutputStream=new FileOutputStream(tmpFile);    PdfCreator pdfCreator=new PdfCreator();    logger.debug(\"Call PDF Creation\");    pdfCreator.setVideoHeight(dcConf.getVideoHeight());    pdfCreator.setVideoWidth(dcConf.getVideoWidth());    FileOutputStream pdfFile=pdfCreator.createPdfFile(fileOutputStream,documentsMap,defaultStyle);    pdfFile.flush();    pdfFile.close();    logger.debug(\"OUT\");    return tmpFile;  } catch (  Exception e) {    logger.error(e);    return null;  } finally {    exportDocumentCompositionPDF_extraction_4(svgInputStream,pngInputStream,svgOutputStream);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.exportDocumentCompositionPDF.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "exportDocumentCompositionPDF",
                        "code": "public File exportDocumentCompositionPDF(File tmpFile,DocumentCompositionConfiguration dcConf,BIObject document,IEngUserProfile profile,Map<String,CurrentConfigurationDocComp> currentConfs,Map<String,DocumentContainer> documentsMap,boolean defaultStyle) throws Exception {  logger.debug(\"IN\");  String output=null;  InputStream svgInputStream=null;  InputStream pngInputStream=null;  OutputStream svgOutputStream=null;  try {    Map docMap=dcConf.getDocumentsMap();    for (Iterator iterator=docMap.keySet().iterator(); iterator.hasNext(); ) {      Object key=iterator.next();      Document doc=(Document)docMap.get(key);      String label=doc.getSbiObjLabel();      logger.debug(\"Document \" + label);      DocumentContainer documentContainer=documentsMap.get(label);      if (documentContainer == null)       continue;      IBIObjectDAO dao=DAOFactory.getBIObjectDAO();      BIObject objectID=dao.loadBIObjectByLabel(label);      BIObject object=null;      Collection roles=null;      roles=((UserProfile)profile).getRolesForUse();      for (Iterator iterator2=roles.iterator(); iterator2.hasNext(); ) {        Object role=iterator2.next();        try {          object=dao.loadBIObjectForExecutionByIdAndRole(objectID.getId(),role.toString());        } catch (        Exception e) {          logger.error(\"error in recovering the role\");        }        if (object != null)         break;      }      logger.debug(\"fill parameters from URL\");      fillBIObjectWithParameterValues(object,currentConfs.get(label));      byte[] returnByteArray=null;      if (currentConfs.get(\"SVG_\" + label) != null) {        Map tmpSvg=currentConfs.get(\"SVG_\" + label).getParameters();        String tmpContent=tmpSvg.get(\"SVG_\" + label).toString();        String svg=tmpContent;        svgInputStream=new ByteArrayInputStream(svg.getBytes(\"UTF-8\"));        File dir=new File(System.getProperty(\"java.io.tmpdir\"));        Random generator=new Random();        int randomInt=generator.nextInt();        File pdfFile=File.createTempFile(Integer.valueOf(randomInt).toString(),\".pdf\",dir);        svgOutputStream=new FileOutputStream(pdfFile);        ExportHighCharts.transformSVGIntoPDF(svgInputStream,svgOutputStream);        pngInputStream=new FileInputStream(pdfFile);        long length=pdfFile.length();        if (length > Integer.MAX_VALUE) {          logger.error(\"file too large\");          return null;        }        returnByteArray=new byte[(int)length];        int offset=0;        int numRead=0;        while (offset < returnByteArray.length && (numRead=pngInputStream.read(returnByteArray,offset,returnByteArray.length - offset)) >= 0) {          offset+=numRead;        }        if (offset < returnByteArray.length) {          logger.warn(\"Could not read all the file\");        }      } else       returnByteArray=exportDocumentCompositionPDF_extraction_3(profile,object,returnByteArray);      logger.debug(\"add content retrieved to Document Container\");      if (returnByteArray != null) {        if (returnByteArray.length == 0)         logger.warn(\"empty byte array retrieved for document \" + label);        documentContainer.setContent(returnByteArray);        documentContainer.setDocumentLabel(label);        documentContainer.setDocumentType(object.getBiObjectTypeCode());      }    }    FileOutputStream fileOutputStream=new FileOutputStream(tmpFile);    PdfCreator pdfCreator=new PdfCreator();    logger.debug(\"Call PDF Creation\");    pdfCreator.setVideoHeight(dcConf.getVideoHeight());    pdfCreator.setVideoWidth(dcConf.getVideoWidth());    FileOutputStream pdfFile=pdfCreator.createPdfFile(fileOutputStream,documentsMap,defaultStyle);    pdfFile.flush();    pdfFile.close();    logger.debug(\"OUT\");    return tmpFile;  } catch (  Exception e) {    logger.error(e);    return null;  } finally {    exportDocumentCompositionPDF_extraction_4(svgInputStream,pngInputStream,svgOutputStream);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.exportDocumentCompositionPDF.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "exportDocumentCompositionPDF",
                        "code": "public File exportDocumentCompositionPDF(File tmpFile,DocumentCompositionConfiguration dcConf,BIObject document,IEngUserProfile profile,Map<String,CurrentConfigurationDocComp> currentConfs,Map<String,DocumentContainer> documentsMap,boolean defaultStyle) throws Exception {  logger.debug(\"IN\");  String output=null;  InputStream svgInputStream=null;  InputStream pngInputStream=null;  OutputStream svgOutputStream=null;  try {    Map docMap=dcConf.getDocumentsMap();    for (Iterator iterator=docMap.keySet().iterator(); iterator.hasNext(); ) {      Object key=iterator.next();      Document doc=(Document)docMap.get(key);      String label=doc.getSbiObjLabel();      logger.debug(\"Document \" + label);      DocumentContainer documentContainer=documentsMap.get(label);      if (documentContainer == null)       continue;      IBIObjectDAO dao=DAOFactory.getBIObjectDAO();      BIObject objectID=dao.loadBIObjectByLabel(label);      BIObject object=null;      Collection roles=null;      roles=((UserProfile)profile).getRolesForUse();      for (Iterator iterator2=roles.iterator(); iterator2.hasNext(); ) {        Object role=iterator2.next();        try {          object=dao.loadBIObjectForExecutionByIdAndRole(objectID.getId(),role.toString());        } catch (        Exception e) {          logger.error(\"error in recovering the role\");        }        if (object != null)         break;      }      logger.debug(\"fill parameters from URL\");      fillBIObjectWithParameterValues(object,currentConfs.get(label));      byte[] returnByteArray=null;      if (currentConfs.get(\"SVG_\" + label) != null) {        Map tmpSvg=currentConfs.get(\"SVG_\" + label).getParameters();        String tmpContent=tmpSvg.get(\"SVG_\" + label).toString();        String svg=tmpContent;        svgInputStream=new ByteArrayInputStream(svg.getBytes(\"UTF-8\"));        File dir=new File(System.getProperty(\"java.io.tmpdir\"));        Random generator=new Random();        int randomInt=generator.nextInt();        File pdfFile=File.createTempFile(Integer.valueOf(randomInt).toString(),\".pdf\",dir);        svgOutputStream=new FileOutputStream(pdfFile);        ExportHighCharts.transformSVGIntoPDF(svgInputStream,svgOutputStream);        pngInputStream=new FileInputStream(pdfFile);        long length=pdfFile.length();        if (length > Integer.MAX_VALUE) {          logger.error(\"file too large\");          return null;        }        returnByteArray=new byte[(int)length];        int offset=0;        exportDocumentCompositionPDF_extraction_2(pngInputStream,returnByteArray,offset);      } else       returnByteArray=exportDocumentCompositionPDF_extraction_3(profile,object,returnByteArray);      logger.debug(\"add content retrieved to Document Container\");      if (returnByteArray != null) {        if (returnByteArray.length == 0)         logger.warn(\"empty byte array retrieved for document \" + label);        documentContainer.setContent(returnByteArray);        documentContainer.setDocumentLabel(label);        documentContainer.setDocumentType(object.getBiObjectTypeCode());      }    }    FileOutputStream fileOutputStream=new FileOutputStream(tmpFile);    PdfCreator pdfCreator=new PdfCreator();    logger.debug(\"Call PDF Creation\");    pdfCreator.setVideoHeight(dcConf.getVideoHeight());    pdfCreator.setVideoWidth(dcConf.getVideoWidth());    FileOutputStream pdfFile=pdfCreator.createPdfFile(fileOutputStream,documentsMap,defaultStyle);    pdfFile.flush();    pdfFile.close();    logger.debug(\"OUT\");    return tmpFile;  } catch (  Exception e) {    logger.error(e);    return null;  } finally {    exportDocumentCompositionPDF_extraction_4(svgInputStream,pngInputStream,svgOutputStream);  }}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.exportDocumentCompositionPDF.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "exportDocumentCompositionPDF",
                        "code": "public File exportDocumentCompositionPDF(File tmpFile,DocumentCompositionConfiguration dcConf,BIObject document,IEngUserProfile profile,Map<String,CurrentConfigurationDocComp> currentConfs,Map<String,DocumentContainer> documentsMap,boolean defaultStyle) throws Exception {  logger.debug(\"IN\");  String output=null;  InputStream svgInputStream=null;  InputStream pngInputStream=null;  OutputStream svgOutputStream=null;  try {    Map docMap=dcConf.getDocumentsMap();    for (Iterator iterator=docMap.keySet().iterator(); iterator.hasNext(); ) {      Object key=iterator.next();      Document doc=(Document)docMap.get(key);      String label=doc.getSbiObjLabel();      logger.debug(\"Document \" + label);      DocumentContainer documentContainer=documentsMap.get(label);      if (documentContainer == null)       continue;      IBIObjectDAO dao=DAOFactory.getBIObjectDAO();      BIObject objectID=dao.loadBIObjectByLabel(label);      BIObject object=null;      Collection roles=null;      roles=((UserProfile)profile).getRolesForUse();      object=exportDocumentCompositionPDF_extraction_1(dao,objectID,object,roles);      logger.debug(\"fill parameters from URL\");      fillBIObjectWithParameterValues(object,currentConfs.get(label));      byte[] returnByteArray=null;      if (currentConfs.get(\"SVG_\" + label) != null) {        Map tmpSvg=currentConfs.get(\"SVG_\" + label).getParameters();        String tmpContent=tmpSvg.get(\"SVG_\" + label).toString();        String svg=tmpContent;        svgInputStream=new ByteArrayInputStream(svg.getBytes(\"UTF-8\"));        File dir=new File(System.getProperty(\"java.io.tmpdir\"));        Random generator=new Random();        int randomInt=generator.nextInt();        File pdfFile=File.createTempFile(Integer.valueOf(randomInt).toString(),\".pdf\",dir);        svgOutputStream=new FileOutputStream(pdfFile);        ExportHighCharts.transformSVGIntoPDF(svgInputStream,svgOutputStream);        pngInputStream=new FileInputStream(pdfFile);        long length=pdfFile.length();        if (length > Integer.MAX_VALUE) {          logger.error(\"file too large\");          return null;        }        returnByteArray=new byte[(int)length];        int offset=0;        exportDocumentCompositionPDF_extraction_2(pngInputStream,returnByteArray,offset);      } else       returnByteArray=exportDocumentCompositionPDF_extraction_3(profile,object,returnByteArray);      logger.debug(\"add content retrieved to Document Container\");      if (returnByteArray != null) {        if (returnByteArray.length == 0)         logger.warn(\"empty byte array retrieved for document \" + label);        documentContainer.setContent(returnByteArray);        documentContainer.setDocumentLabel(label);        documentContainer.setDocumentType(object.getBiObjectTypeCode());      }    }    FileOutputStream fileOutputStream=new FileOutputStream(tmpFile);    PdfCreator pdfCreator=new PdfCreator();    logger.debug(\"Call PDF Creation\");    pdfCreator.setVideoHeight(dcConf.getVideoHeight());    pdfCreator.setVideoWidth(dcConf.getVideoWidth());    FileOutputStream pdfFile=pdfCreator.createPdfFile(fileOutputStream,documentsMap,defaultStyle);    pdfFile.flush();    pdfFile.close();    logger.debug(\"OUT\");    return tmpFile;  } catch (  Exception e) {    logger.error(e);    return null;  } finally {    exportDocumentCompositionPDF_extraction_4(svgInputStream,pngInputStream,svgOutputStream);  }}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.exportDocumentCompositionPDF.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "fillBIObjectWithParameterValues": {
                "original": {
                    "method_name": "fillBIObjectWithParameterValues",
                    "code": "/**  * function used to get attribute parsed from i frame URL and insert the values into BIObject * @param object * @param currentConf */public void fillBIObjectWithParameterValues(BIObject object,CurrentConfigurationDocComp currentConf){  logger.debug(\"IN\");  if (currentConf == null)   return;  List parametersBO=object.getDrivers();  Map<String,Object> currentParameters=currentConf.getParameters();  if (currentParameters != null) {    if (parametersBO != null) {      for (Iterator iterator=parametersBO.iterator(); iterator.hasNext(); ) {        BIObjectParameter parAss=(BIObjectParameter)iterator.next();        String urlName=parAss.getParameterUrlName();        Object valueObj=currentParameters.get(urlName);        if (valueObj instanceof List) {          List val=(List)valueObj;          parAss.setParameterValues(val);        } else {          if (valueObj != null) {            String valueString=valueObj.toString();            List values=(new ParametersDecoder()).getOriginalValues(valueString);            if (values != null) {              logger.debug(\"Put new values \" + valueString + \" to parameter \"+ urlName);              parAss.setParameterValues(values);              currentParameters.remove(urlName);            }          }        }      }    }    if (parametersBO == null)     parametersBO=new ArrayList<BIObjectParameter>();    for (Iterator iterator=currentParameters.keySet().iterator(); iterator.hasNext(); ) {      String lab=(String)iterator.next();      BIObjectParameter biObjPar=new BIObjectParameter();      biObjPar.setParameterUrlName(lab);      Object valueObj=currentParameters.get(lab);      if (valueObj instanceof List) {        List val=(List)valueObj;        biObjPar.setParameterValues(val);      } else {        if (valueObj != null) {          String valueString=valueObj.toString();          List values=(new ParametersDecoder()).getOriginalValues(valueString);          biObjPar.setParameterValues(values);        } else {          continue;        }      }      object.getDrivers().add(biObjPar);    }  }  logger.debug(\"OUT\");}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.fillBIObjectWithParameterValues.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "fillBIObjectWithParameterValues",
                        "code": "/**  * function used to get attribute parsed from i frame URL and insert the values into BIObject * @param object * @param currentConf */public void fillBIObjectWithParameterValues(BIObject object,CurrentConfigurationDocComp currentConf){  logger.debug(\"IN\");  if (currentConf == null)   return;  List parametersBO=object.getDrivers();  Map<String,Object> currentParameters=currentConf.getParameters();  if (currentParameters != null) {    if (parametersBO != null) {      for (Iterator iterator=parametersBO.iterator(); iterator.hasNext(); ) {        BIObjectParameter parAss=(BIObjectParameter)iterator.next();        String urlName=parAss.getParameterUrlName();        Object valueObj=currentParameters.get(urlName);        if (valueObj instanceof List) {          List val=(List)valueObj;          parAss.setParameterValues(val);        } else {          if (valueObj != null) {            String valueString=valueObj.toString();            List values=(new ParametersDecoder()).getOriginalValues(valueString);            if (values != null) {              logger.debug(\"Put new values \" + valueString + \" to parameter \"+ urlName);              parAss.setParameterValues(values);              currentParameters.remove(urlName);            }          }        }      }    }    if (parametersBO == null)     parametersBO=new ArrayList<BIObjectParameter>();    for (Iterator iterator=currentParameters.keySet().iterator(); iterator.hasNext(); ) {      String lab=(String)iterator.next();      BIObjectParameter biObjPar=new BIObjectParameter();      biObjPar.setParameterUrlName(lab);      Object valueObj=currentParameters.get(lab);      fillBIObjectWithParameterValues_extraction_2(object,biObjPar,valueObj);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.fillBIObjectWithParameterValues.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "fillBIObjectWithParameterValues",
                        "code": "/**  * function used to get attribute parsed from i frame URL and insert the values into BIObject * @param object * @param currentConf */public void fillBIObjectWithParameterValues(BIObject object,CurrentConfigurationDocComp currentConf){  logger.debug(\"IN\");  if (currentConf == null)   return;  List parametersBO=object.getDrivers();  Map<String,Object> currentParameters=currentConf.getParameters();  if (currentParameters != null) {    if (parametersBO != null) {      for (Iterator iterator=parametersBO.iterator(); iterator.hasNext(); ) {        BIObjectParameter parAss=(BIObjectParameter)iterator.next();        String urlName=parAss.getParameterUrlName();        Object valueObj=currentParameters.get(urlName);        fillBIObjectWithParameterValues_extraction_1(currentParameters,parAss,urlName,valueObj);      }    }    if (parametersBO == null)     parametersBO=new ArrayList<BIObjectParameter>();    for (Iterator iterator=currentParameters.keySet().iterator(); iterator.hasNext(); ) {      String lab=(String)iterator.next();      BIObjectParameter biObjPar=new BIObjectParameter();      biObjPar.setParameterUrlName(lab);      Object valueObj=currentParameters.get(lab);      fillBIObjectWithParameterValues_extraction_2(object,biObjPar,valueObj);    }  }  logger.debug(\"OUT\");}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.engines.exporters.DocumentCompositionExporter.fillBIObjectWithParameterValues.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.mapcatalogue.service": {
        "DetailFeatureModule": {
            "modDetailFeature": {
                "original": {
                    "method_name": "modDetailFeature",
                    "code": "/**  * Inserts/Modifies the detail of an map according to the user request.  When a map is modified, the <code>modifyMap</code> method is called; when a new map is added, the <code>insertMap</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailFeature(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  GeoFeature feature=recoverFeatureDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"FEAUTURE_NAME\",feature.getName());  RequestContainer requestContainer=this.getRequestContainer();  ResponseContainer responseContainer=this.getResponseContainer();  SessionContainer session=requestContainer.getSessionContainer();  SessionContainer permanentSession=session.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  try {    ISbiGeoFeaturesDAO dao=DAOFactory.getSbiGeoFeaturesDAO();    dao.setUserProfile(profile);    if (feature.getName() == null) {      response.setAttribute(\"mapObj\",feature);      response.setAttribute(\"modality\",mod);      return;    }    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          response.setAttribute(\"featureObj\",feature);          response.setAttribute(\"modality\",mod);          if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"KO\");          } else {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"KO\");          }          return;        }      }    }    if (mod.equalsIgnoreCase(SpagoBIConstants.DETAIL_INS)) {      if (dao.loadFeatureByName(feature.getName()) != null) {        HashMap params=new HashMap();        params.put(AdmintoolsConstants.PAGE,ListFeaturesModule.MODULE_PAGE);        EMFUserError error=new EMFUserError(EMFErrorSeverity.ERROR,5018,new Vector(),params);        getErrorHandler().addError(error);        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");        return;      }      dao.insertFeature(feature);    } else {      dao.modifyFeature(feature);    }  } catch (  EMFUserError e) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListMapsModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,5016,new Vector(),params);  }catch (  Exception ex) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    TracerSingleton.log(SpagoBIConstants.NAME_MODULE,TracerSingleton.MAJOR,\"Cannot fill response container\" + ex.getLocalizedMessage());    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(\"loopback\",\"true\");  if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"OK\");    } catch (    Exception e1) {      e1.printStackTrace();    }  } else {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"OK\");    } catch (    Exception e1) {      e1.printStackTrace();    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.mapcatalogue.service.DetailFeatureModule.modDetailFeature.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "modDetailFeature",
                        "code": "/**  * Inserts/Modifies the detail of an map according to the user request.  When a map is modified, the <code>modifyMap</code> method is called; when a new map is added, the <code>insertMap</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailFeature(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  GeoFeature feature=recoverFeatureDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"FEAUTURE_NAME\",feature.getName());  RequestContainer requestContainer=this.getRequestContainer();  ResponseContainer responseContainer=this.getResponseContainer();  SessionContainer session=requestContainer.getSessionContainer();  SessionContainer permanentSession=session.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  try {    ISbiGeoFeaturesDAO dao=DAOFactory.getSbiGeoFeaturesDAO();    dao.setUserProfile(profile);    if (feature.getName() == null) {      response.setAttribute(\"mapObj\",feature);      response.setAttribute(\"modality\",mod);      return;    }    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          response.setAttribute(\"featureObj\",feature);          response.setAttribute(\"modality\",mod);          if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"KO\");          } else {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"KO\");          }          return;        }      }    }    if (mod.equalsIgnoreCase(SpagoBIConstants.DETAIL_INS)) {      if (dao.loadFeatureByName(feature.getName()) != null) {        HashMap params=new HashMap();        params.put(AdmintoolsConstants.PAGE,ListFeaturesModule.MODULE_PAGE);        EMFUserError error=new EMFUserError(EMFErrorSeverity.ERROR,5018,new Vector(),params);        getErrorHandler().addError(error);        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");        return;      }      dao.insertFeature(feature);    } else {      dao.modifyFeature(feature);    }  } catch (  EMFUserError e) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListMapsModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,5016,new Vector(),params);  }catch (  Exception ex) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"KO\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    TracerSingleton.log(SpagoBIConstants.NAME_MODULE,TracerSingleton.MAJOR,\"Cannot fill response container\" + ex.getLocalizedMessage());    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(\"loopback\",\"true\");  modDetailFeature_extraction_4(mod,logParam,profile);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.mapcatalogue.service.DetailFeatureModule.modDetailFeature.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDetailFeature",
                        "code": "/**  * Inserts/Modifies the detail of an map according to the user request.  When a map is modified, the <code>modifyMap</code> method is called; when a new map is added, the <code>insertMap</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailFeature(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  GeoFeature feature=recoverFeatureDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"FEAUTURE_NAME\",feature.getName());  RequestContainer requestContainer=this.getRequestContainer();  ResponseContainer responseContainer=this.getResponseContainer();  SessionContainer session=requestContainer.getSessionContainer();  SessionContainer permanentSession=session.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  try {    ISbiGeoFeaturesDAO dao=DAOFactory.getSbiGeoFeaturesDAO();    dao.setUserProfile(profile);    if (feature.getName() == null) {      response.setAttribute(\"mapObj\",feature);      response.setAttribute(\"modality\",mod);      return;    }    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          response.setAttribute(\"featureObj\",feature);          response.setAttribute(\"modality\",mod);          if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"KO\");          } else {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"KO\");          }          return;        }      }    }    if (mod.equalsIgnoreCase(SpagoBIConstants.DETAIL_INS)) {      if (dao.loadFeatureByName(feature.getName()) != null) {        HashMap params=new HashMap();        params.put(AdmintoolsConstants.PAGE,ListFeaturesModule.MODULE_PAGE);        EMFUserError error=new EMFUserError(EMFErrorSeverity.ERROR,5018,new Vector(),params);        getErrorHandler().addError(error);        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");        return;      }      dao.insertFeature(feature);    } else {      dao.modifyFeature(feature);    }  } catch (  EMFUserError e) {    if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    } else {      try {        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"ERR\");      } catch (      Exception e1) {        e1.printStackTrace();      }    }    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListMapsModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,5016,new Vector(),params);  }catch (  Exception ex) {    modDetailFeature_extraction_3(mod,logParam,profile);    TracerSingleton.log(SpagoBIConstants.NAME_MODULE,TracerSingleton.MAJOR,\"Cannot fill response container\" + ex.getLocalizedMessage());    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(\"loopback\",\"true\");  modDetailFeature_extraction_4(mod,logParam,profile);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.mapcatalogue.service.DetailFeatureModule.modDetailFeature.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDetailFeature",
                        "code": "/**  * Inserts/Modifies the detail of an map according to the user request.  When a map is modified, the <code>modifyMap</code> method is called; when a new map is added, the <code>insertMap</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailFeature(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  GeoFeature feature=recoverFeatureDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"FEAUTURE_NAME\",feature.getName());  RequestContainer requestContainer=this.getRequestContainer();  ResponseContainer responseContainer=this.getResponseContainer();  SessionContainer session=requestContainer.getSessionContainer();  SessionContainer permanentSession=session.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  try {    ISbiGeoFeaturesDAO dao=DAOFactory.getSbiGeoFeaturesDAO();    dao.setUserProfile(profile);    if (feature.getName() == null) {      response.setAttribute(\"mapObj\",feature);      response.setAttribute(\"modality\",mod);      return;    }    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          response.setAttribute(\"featureObj\",feature);          response.setAttribute(\"modality\",mod);          if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"KO\");          } else {            AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.MODIFY\",logParam,\"KO\");          }          return;        }      }    }    if (mod.equalsIgnoreCase(SpagoBIConstants.DETAIL_INS)) {      if (dao.loadFeatureByName(feature.getName()) != null) {        HashMap params=new HashMap();        params.put(AdmintoolsConstants.PAGE,ListFeaturesModule.MODULE_PAGE);        EMFUserError error=new EMFUserError(EMFErrorSeverity.ERROR,5018,new Vector(),params);        getErrorHandler().addError(error);        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");        return;      }      dao.insertFeature(feature);    } else {      dao.modifyFeature(feature);    }  } catch (  EMFUserError e) {    modDetailFeature_extraction_2(mod,logParam,profile);    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListMapsModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,5016,new Vector(),params);  }catch (  Exception ex) {    modDetailFeature_extraction_3(mod,logParam,profile);    TracerSingleton.log(SpagoBIConstants.NAME_MODULE,TracerSingleton.MAJOR,\"Cannot fill response container\" + ex.getLocalizedMessage());    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(\"loopback\",\"true\");  modDetailFeature_extraction_4(mod,logParam,profile);}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.mapcatalogue.service.DetailFeatureModule.modDetailFeature.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modDetailFeature",
                        "code": "/**  * Inserts/Modifies the detail of an map according to the user request.  When a map is modified, the <code>modifyMap</code> method is called; when a new map is added, the <code>insertMap</code>method is called. These two cases are  differentiated by the <code>mod</code> String input value . * @param request The request information contained in a SourceBean Object * @param mod A request string used to differentiate insert/modify operations * @param response The response SourceBean  * @throws EMFUserError If an exception occurs * @throws SourceBeanException If a SourceBean exception occurs */private void modDetailFeature(SourceBean request,String mod,SourceBean response) throws EMFUserError, SourceBeanException {  GeoFeature feature=recoverFeatureDetails(request);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"FEAUTURE_NAME\",feature.getName());  RequestContainer requestContainer=this.getRequestContainer();  ResponseContainer responseContainer=this.getResponseContainer();  SessionContainer session=requestContainer.getSessionContainer();  SessionContainer permanentSession=session.getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  try {    ISbiGeoFeaturesDAO dao=DAOFactory.getSbiGeoFeaturesDAO();    dao.setUserProfile(profile);    if (feature.getName() == null) {      response.setAttribute(\"mapObj\",feature);      response.setAttribute(\"modality\",mod);      return;    }    EMFErrorHandler errorHandler=getErrorHandler();    Collection errors=errorHandler.getErrors();    if (errors != null && errors.size() > 0) {      Iterator iterator=errors.iterator();      while (iterator.hasNext()) {        Object error=iterator.next();        if (error instanceof EMFValidationError) {          modDetailFeature_extraction_1(mod,response,feature,logParam,profile);        }      }    }    if (mod.equalsIgnoreCase(SpagoBIConstants.DETAIL_INS)) {      if (dao.loadFeatureByName(feature.getName()) != null) {        HashMap params=new HashMap();        params.put(AdmintoolsConstants.PAGE,ListFeaturesModule.MODULE_PAGE);        EMFUserError error=new EMFUserError(EMFErrorSeverity.ERROR,5018,new Vector(),params);        getErrorHandler().addError(error);        AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MAP_CATALOG_FEATURE.ADD\",logParam,\"ERR\");        return;      }      dao.insertFeature(feature);    } else {      dao.modifyFeature(feature);    }  } catch (  EMFUserError e) {    modDetailFeature_extraction_2(mod,logParam,profile);    HashMap params=new HashMap();    params.put(AdmintoolsConstants.PAGE,ListMapsModule.MODULE_PAGE);    throw new EMFUserError(EMFErrorSeverity.ERROR,5016,new Vector(),params);  }catch (  Exception ex) {    modDetailFeature_extraction_3(mod,logParam,profile);    TracerSingleton.log(SpagoBIConstants.NAME_MODULE,TracerSingleton.MAJOR,\"Cannot fill response container\" + ex.getLocalizedMessage());    throw new EMFUserError(EMFErrorSeverity.ERROR,100);  }  response.setAttribute(\"loopback\",\"true\");  modDetailFeature_extraction_4(mod,logParam,profile);}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.mapcatalogue.service.DetailFeatureModule.modDetailFeature.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.services.content.service": {
        "ContentServiceImplSupplier": {
            "readTemplate": {
                "original": {
                    "method_name": "readTemplate",
                    "code": "/**  * Read template. * @param user     the user * @param document the document * @return the content * @throws SecurityException the security exception * @throws EMFUserError      the EMF user error * @throws EMFInternalError  the EMF internal error */public Content readTemplate(String user,String document,Map<String,?> parameters) throws SecurityException, EMFUserError, EMFInternalError {  Content content;  BIObject biobj;  logger.debug(\"IN\");  logger.debug(\"user: [\" + user + \"]\");  logger.debug(\"document: [\" + document + \"]\");  if (parameters == null) {    logger.debug(\"Input parameters map is null. It will be considered as an empty map\");    parameters=new HashMap();  }  content=new Content();  try {    Integer id=new Integer(document);    biobj=DAOFactory.getBIObjectDAO().loadBIObjectById(id);    boolean checkNeeded=true;    boolean modContained=parameters.containsKey(\"SBI_READ_ONLY_TEMPLATE\");    if (modContained) {      boolean onlytemplate=parameters.containsValue(\"true\");      if (onlytemplate) {        checkNeeded=false;      }    }    if (checkNeeded && !UserProfile.isSchedulerUser(user) && !isSubReportCall(biobj,parameters)) {      checkRequestCorrectness(user,biobj,parameters);    }    IObjTemplateDAO tempdao=DAOFactory.getObjTemplateDAO();    ObjTemplate temp=tempdao.getBIObjectActiveTemplate(biobj.getId());    if (temp == null) {      logger.warn(\"The template dor document [\" + id + \"] is NULL\");      if (biobj.getEngine().getDriverName().equals(ChartDriver.class.getName()) || biobj.getEngine().getDriverName().equals(KpiDriver.class.getName())) {        temp=new ObjTemplate();      } else {        throw new SecurityException(\"The template for document [\" + id + \"] is NULL\");      }    }    byte[] template=temp.getContent();    if (biobj.getEngine().getUrl() != null && !\"\".equals(biobj.getEngine().getUrl())) {      try {        String driverClassName=biobj.getEngine().getDriverName();        logger.warn(\"The driver used is [\" + driverClassName + \"]\");        IEngineDriver aEngineDriver=(IEngineDriver)Class.forName(driverClassName).newInstance();        String language=(String)parameters.get(SpagoBIConstants.SBI_LANGUAGE);        String country=(String)parameters.get(SpagoBIConstants.SBI_COUNTRY);        if (language == null || country == null) {          logger.debug(\"Not locale informations found in parameters... Not setted it at this time.\");        } else {          logger.debug(\"Language retrieved: [\" + language + \"]; country retrieved: [\"+ country+ \"]\");          Locale locale=new Locale(language,country);          aEngineDriver.applyLocale(locale);        }        logger.warn(\"Calling elaborateTemplate method defined into the driver ... \");        if (biobj.getEngine().getDriverName().equals(ChartDriver.class.getName()) && template == null) {          String emptyString=\"\";          template=emptyString.getBytes();        }        byte[] elabTemplate=aEngineDriver.ElaborateTemplate(template);        logger.warn(\"Finished elaborateTemplate method defined into the driver. \");        template=elabTemplate;      } catch (      Exception ex) {        logger.error(\"Error while getting template: \" + ex);        return null;      }    }    Base64.Encoder bASE64Encoder=Base64.getEncoder();    if (template != null) {      content.setContent(bASE64Encoder.encodeToString(template));    } else {      content.setContent(\"\");    }    logger.debug(\"template read\");    content.setFileName(temp.getName());  } catch (  NumberFormatException e) {    logger.error(\"NumberFormatException\",e);    throw e;  }catch (  EMFUserError e) {    logger.error(\"EMFUserError\",e);    throw e;  }catch (  EMFInternalError e) {    logger.error(\"EMFUserError\",e);    throw e;  } finally {    logger.debug(\"OUT\");  }  return content;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.content.service.ContentServiceImplSupplier.readTemplate.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "readTemplate",
                        "code": "/**  * Read template. * @param user     the user * @param document the document * @return the content * @throws SecurityException the security exception * @throws EMFUserError      the EMF user error * @throws EMFInternalError  the EMF internal error */public Content readTemplate(String user,String document,Map<String,?> parameters) throws SecurityException, EMFUserError, EMFInternalError {  Content content;  BIObject biobj;  logger.debug(\"IN\");  logger.debug(\"user: [\" + user + \"]\");  logger.debug(\"document: [\" + document + \"]\");  if (parameters == null) {    logger.debug(\"Input parameters map is null. It will be considered as an empty map\");    parameters=new HashMap();  }  content=new Content();  try {    Integer id=new Integer(document);    biobj=DAOFactory.getBIObjectDAO().loadBIObjectById(id);    boolean checkNeeded=true;    boolean modContained=parameters.containsKey(\"SBI_READ_ONLY_TEMPLATE\");    if (modContained) {      boolean onlytemplate=parameters.containsValue(\"true\");      if (onlytemplate) {        checkNeeded=false;      }    }    if (checkNeeded && !UserProfile.isSchedulerUser(user) && !isSubReportCall(biobj,parameters)) {      checkRequestCorrectness(user,biobj,parameters);    }    IObjTemplateDAO tempdao=DAOFactory.getObjTemplateDAO();    ObjTemplate temp=tempdao.getBIObjectActiveTemplate(biobj.getId());    if (temp == null) {      logger.warn(\"The template dor document [\" + id + \"] is NULL\");      if (biobj.getEngine().getDriverName().equals(ChartDriver.class.getName()) || biobj.getEngine().getDriverName().equals(KpiDriver.class.getName())) {        temp=new ObjTemplate();      } else {        throw new SecurityException(\"The template for document [\" + id + \"] is NULL\");      }    }    byte[] template=temp.getContent();    if (biobj.getEngine().getUrl() != null && !\"\".equals(biobj.getEngine().getUrl())) {      try {        template=readTemplate_extraction_2(parameters,biobj,template);      } catch (      Exception ex) {        logger.error(\"Error while getting template: \" + ex);        return null;      }    }    Base64.Encoder bASE64Encoder=Base64.getEncoder();    if (template != null) {      content.setContent(bASE64Encoder.encodeToString(template));    } else {      content.setContent(\"\");    }    logger.debug(\"template read\");    content.setFileName(temp.getName());  } catch (  NumberFormatException e) {    logger.error(\"NumberFormatException\",e);    throw e;  }catch (  EMFUserError e) {    logger.error(\"EMFUserError\",e);    throw e;  }catch (  EMFInternalError e) {    logger.error(\"EMFUserError\",e);    throw e;  } finally {    logger.debug(\"OUT\");  }  return content;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.content.service.ContentServiceImplSupplier.readTemplate.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "readTemplate",
                        "code": "/**  * Read template. * @param user     the user * @param document the document * @return the content * @throws SecurityException the security exception * @throws EMFUserError      the EMF user error * @throws EMFInternalError  the EMF internal error */public Content readTemplate(String user,String document,Map<String,?> parameters) throws SecurityException, EMFUserError, EMFInternalError {  Content content;  BIObject biobj;  logger.debug(\"IN\");  logger.debug(\"user: [\" + user + \"]\");  logger.debug(\"document: [\" + document + \"]\");  if (parameters == null) {    logger.debug(\"Input parameters map is null. It will be considered as an empty map\");    parameters=new HashMap();  }  content=new Content();  try {    Integer id=new Integer(document);    biobj=DAOFactory.getBIObjectDAO().loadBIObjectById(id);    boolean checkNeeded=true;    boolean modContained=parameters.containsKey(\"SBI_READ_ONLY_TEMPLATE\");    readTemplate_extraction_1(user,parameters,biobj,checkNeeded,modContained);    IObjTemplateDAO tempdao=DAOFactory.getObjTemplateDAO();    ObjTemplate temp=tempdao.getBIObjectActiveTemplate(biobj.getId());    if (temp == null) {      logger.warn(\"The template dor document [\" + id + \"] is NULL\");      if (biobj.getEngine().getDriverName().equals(ChartDriver.class.getName()) || biobj.getEngine().getDriverName().equals(KpiDriver.class.getName())) {        temp=new ObjTemplate();      } else {        throw new SecurityException(\"The template for document [\" + id + \"] is NULL\");      }    }    byte[] template=temp.getContent();    if (biobj.getEngine().getUrl() != null && !\"\".equals(biobj.getEngine().getUrl())) {      try {        template=readTemplate_extraction_2(parameters,biobj,template);      } catch (      Exception ex) {        logger.error(\"Error while getting template: \" + ex);        return null;      }    }    Base64.Encoder bASE64Encoder=Base64.getEncoder();    if (template != null) {      content.setContent(bASE64Encoder.encodeToString(template));    } else {      content.setContent(\"\");    }    logger.debug(\"template read\");    content.setFileName(temp.getName());  } catch (  NumberFormatException e) {    logger.error(\"NumberFormatException\",e);    throw e;  }catch (  EMFUserError e) {    logger.error(\"EMFUserError\",e);    throw e;  }catch (  EMFInternalError e) {    logger.error(\"EMFUserError\",e);    throw e;  } finally {    logger.debug(\"OUT\");  }  return content;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.content.service.ContentServiceImplSupplier.readTemplate.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.services.execute.service": {
        "ServiceChartImpl": {
            "executeChart": {
                "original": {
                    "method_name": "executeChart",
                    "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=new HashMap();    if (parametersList != null && !parametersList.isEmpty()) {      for (Iterator iterator=parametersList.iterator(); iterator.hasNext(); ) {        BIObjectParameter par=(BIObjectParameter)iterator.next();        String url=par.getParameterUrlName();        String value=(String)parameters.get(url);        if (value != null) {          parametersMap.put(url,value);        }      }    }    for (Iterator iterator=parameters.keySet().iterator(); iterator.hasNext(); ) {      String namePar=(String)iterator.next();      if (namePar.startsWith(\"target\") || namePar.startsWith(\"baseline\")) {        Object value=parameters.get(namePar);        parametersMap.put(namePar,value);      }    }    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      try {        out.close();      } catch (      IOException e) {        logger.error(\"Error while closing stream\",e);      }      monitor.stop();    }  }  return returnImage;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "executeChart",
                        "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=new HashMap();    if (parametersList != null && !parametersList.isEmpty()) {      for (Iterator iterator=parametersList.iterator(); iterator.hasNext(); ) {        BIObjectParameter par=(BIObjectParameter)iterator.next();        String url=par.getParameterUrlName();        String value=(String)parameters.get(url);        if (value != null) {          parametersMap.put(url,value);        }      }    }    for (Iterator iterator=parameters.keySet().iterator(); iterator.hasNext(); ) {      String namePar=(String)iterator.next();      if (namePar.startsWith(\"target\") || namePar.startsWith(\"baseline\")) {        Object value=parameters.get(namePar);        parametersMap.put(namePar,value);      }    }    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "executeChart",
                        "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      if (obj.getDataSetId() != null) {        data=obj.getDataSetId().toString();      } else {        throw new Exception(\"Data Set not defined\");      }    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=executeChart_extraction_3(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "executeChart",
                        "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      if (template == null)       throw new Exception(\"Active Template null\");      contentBytes=template.getContent();      if (contentBytes == null)       throw new Exception(\"Content of the Active template null\");      String contentStr=new String(contentBytes);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      data=executeChart_extraction_2(obj,data);    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=executeChart_extraction_3(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction3.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "executeChart",
                        "code": "public byte[] executeChart(String token,String userId,String label,HashMap parameters){  logger.debug(\"IN\");  Monitor monitor=MonitorFactory.start(\"spagobi.service.execute.executeChart\");  logger.debug(\"Getting profile\");  byte[] returnImage=null;  IEngUserProfile userProfile=null;  try {    userProfile=it.eng.spagobi.commons.utilities.GeneralUtilities.createNewUserProfile(userId);  } catch (  Exception e2) {    logger.error(\"Error recovering profile\",e2);    return \"\".getBytes();  }  logger.debug(\"Getting the chart object\");  IBIObjectDAO dao;  BIObject obj=null;  try {    dao=DAOFactory.getBIObjectDAO();    if (label != null)     obj=dao.loadBIObjectByLabel(label);  } catch (  EMFUserError e) {    logger.error(\"Error in recovering object\",e);    return \"\".getBytes();  }  if (obj != null) {    logger.debug(\"Getting template\");    SourceBean content=null;    byte[] contentBytes=null;    try {      ObjTemplate template=DAOFactory.getObjTemplateDAO().getBIObjectActiveTemplate(obj.getId());      String contentStr=executeChart_extraction_1(template);      content=SourceBean.fromXMLString(contentStr);    } catch (    Exception e) {      logger.error(\"Error in reading template\",e);      return \"\".getBytes();    }    String type=content.getName();    String subtype=(String)content.getAttribute(\"type\");    String data=\"\";    try {      data=executeChart_extraction_2(obj,data);    } catch (    Exception e) {      logger.error(\"Error in reading dataset\",e);      return \"\".getBytes();    }    logger.debug(\"Getting parameters\");    HashMap parametersMap=null;    List parametersList=null;    try {      parametersList=DAOFactory.getBIObjectDAO().getBIObjectParameters(obj);    } catch (    EMFUserError e1) {      logger.error(\"Error in retrieving parameters\",e1);      return \"\".getBytes();    }    parametersMap=executeChart_extraction_3(parameters,parametersList);    logger.debug(\"Creating the chart\");    ChartImpl sbi=null;    sbi=ChartImpl.createChart(type,subtype);    sbi.setProfile(userProfile);    sbi.setType(type);    sbi.setSubtype(subtype);    sbi.setData(data);    sbi.setParametersObject(parametersMap);    sbi.configureChart(content);    DatasetMap datasets=null;    try {      datasets=sbi.calculateValue();    } catch (    Exception e) {      logger.error(\"Error in reading the value, check the dataset\",e);      return \"\".getBytes();    }    JFreeChart chart=null;    chart=sbi.createChart(datasets);    ByteArrayOutputStream out=null;    try {      logger.debug(\"Write PNG Image\");      out=new ByteArrayOutputStream();      ChartUtilities.writeChartAsPNG(out,chart,sbi.getWidth(),sbi.getHeight());      returnImage=out.toByteArray();    } catch (    Exception e) {      logger.error(\"Error while creating the image\",e);      return \"\".getBytes();    } finally {      executeChart_extraction_4(out);      monitor.stop();    }  }  return returnImage;}",
                        "extraction_name": "Extraction4",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.execute.service.ServiceChartImpl.executeChart.Extraction4.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.services.scheduler.service": {
        "SchedulerServiceSupplier": {
            "serializeTrigger": {
                "original": {
                    "method_name": "serializeTrigger",
                    "code": "/**  * Serialize trigger. * @param trigger the trigger * @return the string * @throws SourceBeanException the source bean exception */public String serializeTrigger(Trigger trigger) throws SourceBeanException {  StringBuffer buffer=new StringBuffer(\"<TRIGGER_DETAILS \");  buffer.append(\" \");  String triggerName=trigger.getName();  String triggerDescription=trigger.getDescription();  JobDataMap jdm=trigger.getJobDataMap();  Date triggerStartTime=trigger.getStartTime();  String triggerStartDateStr=\"\";  String triggerStartTimeStr=\"\";  if (triggerStartTime != null) {    Calendar startCal=new GregorianCalendar();    startCal.setTime(triggerStartTime);    int day=startCal.get(Calendar.DAY_OF_MONTH);    int month=startCal.get(Calendar.MONTH);    int year=startCal.get(Calendar.YEAR);    triggerStartDateStr=((day < 10) ? \"0\" : \"\") + day + \"/\"+ ((month + 1 < 10) ? \"0\" : \"\")+ (month + 1)+ \"/\"+ year;    int hour=startCal.get(Calendar.HOUR_OF_DAY);    int minute=startCal.get(Calendar.MINUTE);    triggerStartTimeStr=((hour < 10) ? \"0\" : \"\") + hour + \":\"+ ((minute < 10) ? \"0\" : \"\")+ minute;  }  Date triggerEndTime=trigger.getEndTime();  String triggerEndDateStr=\"\";  String triggerEndTimeStr=\"\";  if (triggerEndTime != null) {    Calendar endCal=new GregorianCalendar();    endCal.setTime(triggerEndTime);    int day=endCal.get(Calendar.DAY_OF_MONTH);    int month=endCal.get(Calendar.MONTH);    int year=endCal.get(Calendar.YEAR);    triggerEndDateStr=((day < 10) ? \"0\" : \"\") + day + \"/\"+ ((month + 1 < 10) ? \"0\" : \"\")+ (month + 1)+ \"/\"+ year;    int hour=endCal.get(Calendar.HOUR_OF_DAY);    int minute=endCal.get(Calendar.MINUTE);    triggerEndTimeStr=((hour < 10) ? \"0\" : \"\") + hour + \":\"+ ((minute < 10) ? \"0\" : \"\")+ minute;  }  buffer.append(\" triggerName=\\\"\" + (triggerName != null ? triggerName : \"\") + \"\\\"\");  buffer.append(\" triggerDescription=\\\"\" + (triggerDescription != null ? triggerDescription : \"\") + \"\\\"\");  buffer.append(\" triggerStartDate=\\\"\" + triggerStartDateStr + \"\\\"\");  buffer.append(\" triggerStartTime=\\\"\" + triggerStartTimeStr + \"\\\"\");  buffer.append(\" triggerEndDate=\\\"\" + triggerEndDateStr + \"\\\"\");  buffer.append(\" triggerEndTime=\\\"\" + triggerEndTimeStr + \"\\\"\");  String chronStr=jdm.getString(\"chronString\");  if ((chronStr == null) || (chronStr.trim().equals(\"\"))) {    chronStr=\"single{}\";  }  buffer.append(\" triggerChronString=\\\"\" + chronStr + \"\\\"\");  buffer.append(\" >\");  buffer.append(\"<JOB_PARAMETERS>\");  if (jdm != null && !jdm.isEmpty()) {    String[] keys=jdm.getKeys();    if (keys != null && keys.length > 0) {      for (int i=0; i < keys.length; i++) {        String key=keys[i];        String value=jdm.getString(key);        if (key.equals(\"chronString\")) {          continue;        }        buffer.append(\"<JOB_PARAMETER \");        if (value == null) {          SpagoBITracer.warning(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"loadJobDetailIntoResponse\",\"Trigger parameter '\" + key + \"' has no String value!!\");        }        buffer.append(\" name=\\\"\" + key + \"\\\"\");        buffer.append(\" value=\\\"\" + value + \"\\\"\");        buffer.append(\" />\");      }    }  }  buffer.append(\"</JOB_PARAMETERS>\");  buffer.append(\"</TRIGGER_DETAILS>\");  return buffer.toString();}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.scheduler.service.SchedulerServiceSupplier.serializeTrigger.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "serializeTrigger",
                        "code": "/**  * Serialize trigger. * @param trigger the trigger * @return the string * @throws SourceBeanException the source bean exception */public String serializeTrigger(Trigger trigger) throws SourceBeanException {  StringBuffer buffer=new StringBuffer(\"<TRIGGER_DETAILS \");  buffer.append(\" \");  String triggerName=trigger.getName();  String triggerDescription=trigger.getDescription();  JobDataMap jdm=trigger.getJobDataMap();  Date triggerStartTime=trigger.getStartTime();  String triggerStartDateStr=\"\";  String triggerStartTimeStr=\"\";  if (triggerStartTime != null) {    Calendar startCal=new GregorianCalendar();    startCal.setTime(triggerStartTime);    int day=startCal.get(Calendar.DAY_OF_MONTH);    int month=startCal.get(Calendar.MONTH);    int year=startCal.get(Calendar.YEAR);    triggerStartDateStr=((day < 10) ? \"0\" : \"\") + day + \"/\"+ ((month + 1 < 10) ? \"0\" : \"\")+ (month + 1)+ \"/\"+ year;    int hour=startCal.get(Calendar.HOUR_OF_DAY);    int minute=startCal.get(Calendar.MINUTE);    triggerStartTimeStr=((hour < 10) ? \"0\" : \"\") + hour + \":\"+ ((minute < 10) ? \"0\" : \"\")+ minute;  }  Date triggerEndTime=trigger.getEndTime();  String triggerEndDateStr=\"\";  String triggerEndTimeStr=\"\";  if (triggerEndTime != null) {    Calendar endCal=new GregorianCalendar();    endCal.setTime(triggerEndTime);    int day=endCal.get(Calendar.DAY_OF_MONTH);    int month=endCal.get(Calendar.MONTH);    int year=endCal.get(Calendar.YEAR);    triggerEndDateStr=((day < 10) ? \"0\" : \"\") + day + \"/\"+ ((month + 1 < 10) ? \"0\" : \"\")+ (month + 1)+ \"/\"+ year;    int hour=endCal.get(Calendar.HOUR_OF_DAY);    int minute=endCal.get(Calendar.MINUTE);    triggerEndTimeStr=((hour < 10) ? \"0\" : \"\") + hour + \":\"+ ((minute < 10) ? \"0\" : \"\")+ minute;  }  buffer.append(\" triggerName=\\\"\" + (triggerName != null ? triggerName : \"\") + \"\\\"\");  buffer.append(\" triggerDescription=\\\"\" + (triggerDescription != null ? triggerDescription : \"\") + \"\\\"\");  buffer.append(\" triggerStartDate=\\\"\" + triggerStartDateStr + \"\\\"\");  buffer.append(\" triggerStartTime=\\\"\" + triggerStartTimeStr + \"\\\"\");  buffer.append(\" triggerEndDate=\\\"\" + triggerEndDateStr + \"\\\"\");  buffer.append(\" triggerEndTime=\\\"\" + triggerEndTimeStr + \"\\\"\");  String chronStr=jdm.getString(\"chronString\");  if ((chronStr == null) || (chronStr.trim().equals(\"\"))) {    chronStr=\"single{}\";  }  buffer.append(\" triggerChronString=\\\"\" + chronStr + \"\\\"\");  buffer.append(\" >\");  buffer.append(\"<JOB_PARAMETERS>\");  if (jdm != null && !jdm.isEmpty()) {    String[] keys=jdm.getKeys();    serializeTrigger_extraction_2(buffer,jdm,keys);  }  buffer.append(\"</JOB_PARAMETERS>\");  buffer.append(\"</TRIGGER_DETAILS>\");  return buffer.toString();}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.scheduler.service.SchedulerServiceSupplier.serializeTrigger.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "serializeTrigger",
                        "code": "/**  * Serialize trigger. * @param trigger the trigger * @return the string * @throws SourceBeanException the source bean exception */public String serializeTrigger(Trigger trigger) throws SourceBeanException {  StringBuffer buffer=new StringBuffer(\"<TRIGGER_DETAILS \");  buffer.append(\" \");  String triggerName=trigger.getName();  String triggerDescription=trigger.getDescription();  JobDataMap jdm=trigger.getJobDataMap();  Date triggerStartTime=trigger.getStartTime();  String triggerStartDateStr=\"\";  String triggerStartTimeStr=\"\";  if (triggerStartTime != null) {    Calendar startCal=new GregorianCalendar();    startCal.setTime(triggerStartTime);    int day=startCal.get(Calendar.DAY_OF_MONTH);    int month=startCal.get(Calendar.MONTH);    int year=startCal.get(Calendar.YEAR);    triggerStartDateStr=((day < 10) ? \"0\" : \"\") + day + \"/\"+ ((month + 1 < 10) ? \"0\" : \"\")+ (month + 1)+ \"/\"+ year;    int hour=startCal.get(Calendar.HOUR_OF_DAY);    int minute=startCal.get(Calendar.MINUTE);    triggerStartTimeStr=((hour < 10) ? \"0\" : \"\") + hour + \":\"+ ((minute < 10) ? \"0\" : \"\")+ minute;  }  serializeTrigger_extraction_1(trigger,buffer,triggerName,triggerDescription,triggerStartDateStr,triggerStartTimeStr);  String chronStr=jdm.getString(\"chronString\");  if ((chronStr == null) || (chronStr.trim().equals(\"\"))) {    chronStr=\"single{}\";  }  buffer.append(\" triggerChronString=\\\"\" + chronStr + \"\\\"\");  buffer.append(\" >\");  buffer.append(\"<JOB_PARAMETERS>\");  if (jdm != null && !jdm.isEmpty()) {    String[] keys=jdm.getKeys();    serializeTrigger_extraction_2(buffer,jdm,keys);  }  buffer.append(\"</JOB_PARAMETERS>\");  buffer.append(\"</TRIGGER_DETAILS>\");  return buffer.toString();}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.services.scheduler.service.SchedulerServiceSupplier.serializeTrigger.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.crosstab": {
        "CrossTab": {
            "getDataMatrix": {
                "original": {
                    "method_name": "getDataMatrix",
                    "code": "/**  * Get the matrix that represent the data * @param columnsSpecification: A list with all the possible coordinates of the columns * @param rowsSpecification:    A list with all the possible coordinates of the rows * @param columnCordinates:     A list with the column coordinates of all the data * @param rowCordinates:        A list with the column rows of all the data * @param data:                 A list with the data * @param measuresOnColumns:    true if the measures live in the columns, false if the measures live in the rows * @param measuresLength:       the number of the measures * @return the matrix that represent the data */private String[][] getDataMatrix(List<String> columnsSpecification,List<String> rowsSpecification,List<String> columnCordinates,List<String> rowCordinates,List<String> data,boolean measuresOnColumns,int measuresLength,int columnsN){  String[][] dataMatrix;  int x, y;  int rowsN;  if (measuresOnColumns) {    rowsN=(rowsSpecification.size() > 0 ? rowsSpecification.size() : 1);  } else {    rowsN=(rowsSpecification.size() > 0 ? rowsSpecification.size() : 1) * measuresLength;  }  dataMatrix=new String[rowsN][columnsN];  for (int i=0; i < rowsN; i++) {    for (int j=0; j < columnsN; j++) {      dataMatrix[i][j]=DATA_MATRIX_NA;    }  }  if (measuresOnColumns) {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        if (rowsSpecification.size() > 0) {          x=rowsSpecification.indexOf(rowCordinates.get(i + j));          if (x < 0) {            continue;          }        } else {          x=0;        }        if (columnsSpecification.size() > 0) {          y=columnsSpecification.indexOf(columnCordinates.get(i + j));          if (y < 0) {            continue;          }        } else {          y=0;        }        if ((y * measuresLength + j) < columnsN && (y * measuresLength + j) >= 0) {          dataMatrix[x][y * measuresLength + j]=data.get(i + j);        }      }    }  } else {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        if (rowsSpecification.size() > 0) {          x=rowsSpecification.indexOf(rowCordinates.get(i + j));          if (x < 0) {            continue;          }        } else {          x=0;        }        if (columnsSpecification.size() > 0) {          y=columnsSpecification.indexOf(columnCordinates.get(i + j));          if (y < 0) {            continue;          }        } else {          y=0;        }        if (y < columnsN && y >= 0) {          dataMatrix[x * measuresLength + j][y]=data.get(i + j);        }      }    }  }  return dataMatrix;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.crosstab.CrossTab.getDataMatrix.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getDataMatrix",
                        "code": "/**  * Get the matrix that represent the data * @param columnsSpecification: A list with all the possible coordinates of the columns * @param rowsSpecification:    A list with all the possible coordinates of the rows * @param columnCordinates:     A list with the column coordinates of all the data * @param rowCordinates:        A list with the column rows of all the data * @param data:                 A list with the data * @param measuresOnColumns:    true if the measures live in the columns, false if the measures live in the rows * @param measuresLength:       the number of the measures * @return the matrix that represent the data */private String[][] getDataMatrix(List<String> columnsSpecification,List<String> rowsSpecification,List<String> columnCordinates,List<String> rowCordinates,List<String> data,boolean measuresOnColumns,int measuresLength,int columnsN){  String[][] dataMatrix;  int x, y;  int rowsN;  if (measuresOnColumns) {    rowsN=(rowsSpecification.size() > 0 ? rowsSpecification.size() : 1);  } else {    rowsN=(rowsSpecification.size() > 0 ? rowsSpecification.size() : 1) * measuresLength;  }  dataMatrix=new String[rowsN][columnsN];  for (int i=0; i < rowsN; i++) {    for (int j=0; j < columnsN; j++) {      dataMatrix[i][j]=DATA_MATRIX_NA;    }  }  if (measuresOnColumns) {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        if (rowsSpecification.size() > 0) {          x=rowsSpecification.indexOf(rowCordinates.get(i + j));          if (x < 0) {            continue;          }        } else {          x=0;        }        if (columnsSpecification.size() > 0) {          y=columnsSpecification.indexOf(columnCordinates.get(i + j));          if (y < 0) {            continue;          }        } else {          y=0;        }        if ((y * measuresLength + j) < columnsN && (y * measuresLength + j) >= 0) {          dataMatrix[x][y * measuresLength + j]=data.get(i + j);        }      }    }  } else {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        y=getDataMatrix_extraction_3(columnsSpecification,rowsSpecification,columnCordinates,rowCordinates,data,measuresLength,columnsN,dataMatrix,y,i,j);      }    }  }  return dataMatrix;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.crosstab.CrossTab.getDataMatrix.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getDataMatrix",
                        "code": "/**  * Get the matrix that represent the data * @param columnsSpecification: A list with all the possible coordinates of the columns * @param rowsSpecification:    A list with all the possible coordinates of the rows * @param columnCordinates:     A list with the column coordinates of all the data * @param rowCordinates:        A list with the column rows of all the data * @param data:                 A list with the data * @param measuresOnColumns:    true if the measures live in the columns, false if the measures live in the rows * @param measuresLength:       the number of the measures * @return the matrix that represent the data */private String[][] getDataMatrix(List<String> columnsSpecification,List<String> rowsSpecification,List<String> columnCordinates,List<String> rowCordinates,List<String> data,boolean measuresOnColumns,int measuresLength,int columnsN){  String[][] dataMatrix;  int x, y;  int rowsN;  if (measuresOnColumns) {    rowsN=(rowsSpecification.size() > 0 ? rowsSpecification.size() : 1);  } else {    rowsN=(rowsSpecification.size() > 0 ? rowsSpecification.size() : 1) * measuresLength;  }  dataMatrix=new String[rowsN][columnsN];  for (int i=0; i < rowsN; i++) {    for (int j=0; j < columnsN; j++) {      dataMatrix[i][j]=DATA_MATRIX_NA;    }  }  if (measuresOnColumns) {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        y=getDataMatrix_extraction_2(columnsSpecification,rowsSpecification,columnCordinates,rowCordinates,data,measuresLength,columnsN,dataMatrix,y,i,j);      }    }  } else {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        y=getDataMatrix_extraction_3(columnsSpecification,rowsSpecification,columnCordinates,rowCordinates,data,measuresLength,columnsN,dataMatrix,y,i,j);      }    }  }  return dataMatrix;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.crosstab.CrossTab.getDataMatrix.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getDataMatrix",
                        "code": "/**  * Get the matrix that represent the data * @param columnsSpecification: A list with all the possible coordinates of the columns * @param rowsSpecification:    A list with all the possible coordinates of the rows * @param columnCordinates:     A list with the column coordinates of all the data * @param rowCordinates:        A list with the column rows of all the data * @param data:                 A list with the data * @param measuresOnColumns:    true if the measures live in the columns, false if the measures live in the rows * @param measuresLength:       the number of the measures * @return the matrix that represent the data */private String[][] getDataMatrix(List<String> columnsSpecification,List<String> rowsSpecification,List<String> columnCordinates,List<String> rowCordinates,List<String> data,boolean measuresOnColumns,int measuresLength,int columnsN){  String[][] dataMatrix;  int x, y;  dataMatrix=getDataMatrix_extraction_1(rowsSpecification,measuresOnColumns,measuresLength,columnsN);  if (measuresOnColumns) {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        y=getDataMatrix_extraction_2(columnsSpecification,rowsSpecification,columnCordinates,rowCordinates,data,measuresLength,columnsN,dataMatrix,y,i,j);      }    }  } else {    for (int i=0; i < data.size(); i=i + measuresLength) {      for (int j=0; j < measuresLength; j++) {        y=getDataMatrix_extraction_3(columnsSpecification,rowsSpecification,columnCordinates,rowCordinates,data,measuresLength,columnsN,dataMatrix,y,i,j);      }    }  }  return dataMatrix;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.crosstab.CrossTab.getDataMatrix.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service": {
        "ManageDatasets": {
            "returnDatasetList": {
                "original": {
                    "method_name": "returnDatasetList",
                    "code": "private void returnDatasetList(IDataSetDAO dsDao,Locale locale){  logger.debug(\"IN\");  try {    Integer totalItemsNum=dsDao.countDatasets();    List<IDataSet> items=getListOfGenericDatasets(dsDao);    logger.debug(\"Loaded items list\");    JSONArray itemsJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(items,locale);    ISchedulerDAO schedulerDAO;    try {      schedulerDAO=DAOFactory.getSchedulerDAO();    } catch (    Throwable t) {      throw new SpagoBIRuntimeException(\"Impossible to load scheduler DAO\",t);    }    try {      SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd\");      for (int i=0; i < items.size(); i++) {        if (items.get(i).isPersisted()) {          List<Trigger> triggers=schedulerDAO.loadTriggers(JOB_GROUP,items.get(i).getLabel());          if (triggers.isEmpty()) {            itemsJSON.getJSONObject(i).put(\"isScheduled\",false);          } else {            Trigger trigger=triggers.get(0);            if (!trigger.isRunImmediately()) {              itemsJSON.getJSONObject(i).put(\"isScheduled\",true);              if (trigger.getStartTime() != null) {                itemsJSON.getJSONObject(i).put(\"startDate\",sdf.format(trigger.getStartTime()));              } else {                itemsJSON.getJSONObject(i).put(\"startDate\",\"\");              }              if (trigger.getEndTime() != null) {                itemsJSON.getJSONObject(i).put(\"endDate\",sdf.format(trigger.getEndTime()));              } else {                itemsJSON.getJSONObject(i).put(\"endDate\",\"\");              }              itemsJSON.getJSONObject(i).put(\"schedulingCronLine\",trigger.getChronExpression().getExpression());            }          }        }        ArrayList<BIObject> objectsUsing=DAOFactory.getBIObjDataSetDAO().getBIObjectsUsingDataset(items.get(i).getId());        String documentsNames=\"\";        if (objectsUsing != null && objectsUsing.size() > 1) {          for (int o=0; o < objectsUsing.size(); o++) {            BIObject obj=objectsUsing.get(o);            documentsNames+=obj.getName();            if (o < objectsUsing.size() - 1)             documentsNames+=\", \";          }          itemsJSON.getJSONObject(i).put(\"hasDocumentsAssociated\",documentsNames);        }        List<FederationDefinition> federationsAssociated=DAOFactory.getFedetatedDatasetDAO().loadFederationsUsingDataset(items.get(i).getId());        if (federationsAssociated != null && federationsAssociated.size() > 0)         itemsJSON.getJSONObject(i).put(\"hasFederationsAssociated\",\"true\");      }      JSONObject responseJSON=createJSONResponse(itemsJSON,totalItemsNum);      writeBackToClient(new JSONSuccess(responseJSON));    } catch (    Throwable t) {      throw new SpagoBIRuntimeException(\"An unexpected error occured while loading trigger list for datasets\",t);    } finally {      logger.debug(\"OUT\");    }  } catch (  Throwable e) {    logger.error(\"Exception occurred while retrieving items\",e);    throw new SpagoBIServiceException(SERVICE_NAME,\"sbi.general.retrieveItemsError\",e);  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service.ManageDatasets.returnDatasetList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "returnDatasetList",
                        "code": "private void returnDatasetList(IDataSetDAO dsDao,Locale locale){  logger.debug(\"IN\");  try {    Integer totalItemsNum=dsDao.countDatasets();    List<IDataSet> items=getListOfGenericDatasets(dsDao);    logger.debug(\"Loaded items list\");    JSONArray itemsJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(items,locale);    ISchedulerDAO schedulerDAO;    try {      schedulerDAO=DAOFactory.getSchedulerDAO();    } catch (    Throwable t) {      throw new SpagoBIRuntimeException(\"Impossible to load scheduler DAO\",t);    }    try {      SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd\");      for (int i=0; i < items.size(); i++) {        if (items.get(i).isPersisted()) {          List<Trigger> triggers=schedulerDAO.loadTriggers(JOB_GROUP,items.get(i).getLabel());          if (triggers.isEmpty()) {            itemsJSON.getJSONObject(i).put(\"isScheduled\",false);          } else {            Trigger trigger=triggers.get(0);            if (!trigger.isRunImmediately()) {              itemsJSON.getJSONObject(i).put(\"isScheduled\",true);              if (trigger.getStartTime() != null) {                itemsJSON.getJSONObject(i).put(\"startDate\",sdf.format(trigger.getStartTime()));              } else {                itemsJSON.getJSONObject(i).put(\"startDate\",\"\");              }              if (trigger.getEndTime() != null) {                itemsJSON.getJSONObject(i).put(\"endDate\",sdf.format(trigger.getEndTime()));              } else {                itemsJSON.getJSONObject(i).put(\"endDate\",\"\");              }              itemsJSON.getJSONObject(i).put(\"schedulingCronLine\",trigger.getChronExpression().getExpression());            }          }        }        ArrayList<BIObject> objectsUsing=DAOFactory.getBIObjDataSetDAO().getBIObjectsUsingDataset(items.get(i).getId());        String documentsNames=\"\";        if (objectsUsing != null && objectsUsing.size() > 1) {          for (int o=0; o < objectsUsing.size(); o++) {            BIObject obj=objectsUsing.get(o);            documentsNames=returnDatasetList_extraction_2(objectsUsing,documentsNames,o,obj);          }          itemsJSON.getJSONObject(i).put(\"hasDocumentsAssociated\",documentsNames);        }        List<FederationDefinition> federationsAssociated=DAOFactory.getFedetatedDatasetDAO().loadFederationsUsingDataset(items.get(i).getId());        if (federationsAssociated != null && federationsAssociated.size() > 0)         itemsJSON.getJSONObject(i).put(\"hasFederationsAssociated\",\"true\");      }      JSONObject responseJSON=createJSONResponse(itemsJSON,totalItemsNum);      writeBackToClient(new JSONSuccess(responseJSON));    } catch (    Throwable t) {      throw new SpagoBIRuntimeException(\"An unexpected error occured while loading trigger list for datasets\",t);    } finally {      logger.debug(\"OUT\");    }  } catch (  Throwable e) {    logger.error(\"Exception occurred while retrieving items\",e);    throw new SpagoBIServiceException(SERVICE_NAME,\"sbi.general.retrieveItemsError\",e);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service.ManageDatasets.returnDatasetList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "returnDatasetList",
                        "code": "private void returnDatasetList(IDataSetDAO dsDao,Locale locale){  logger.debug(\"IN\");  try {    Integer totalItemsNum=dsDao.countDatasets();    List<IDataSet> items=getListOfGenericDatasets(dsDao);    logger.debug(\"Loaded items list\");    JSONArray itemsJSON=(JSONArray)SerializerFactory.getSerializer(\"application/json\").serialize(items,locale);    ISchedulerDAO schedulerDAO;    try {      schedulerDAO=DAOFactory.getSchedulerDAO();    } catch (    Throwable t) {      throw new SpagoBIRuntimeException(\"Impossible to load scheduler DAO\",t);    }    try {      SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd\");      for (int i=0; i < items.size(); i++) {        if (items.get(i).isPersisted()) {          List<Trigger> triggers=schedulerDAO.loadTriggers(JOB_GROUP,items.get(i).getLabel());          returnDatasetList_extraction_1(itemsJSON,sdf,i,triggers);        }        ArrayList<BIObject> objectsUsing=DAOFactory.getBIObjDataSetDAO().getBIObjectsUsingDataset(items.get(i).getId());        String documentsNames=\"\";        if (objectsUsing != null && objectsUsing.size() > 1) {          for (int o=0; o < objectsUsing.size(); o++) {            BIObject obj=objectsUsing.get(o);            documentsNames=returnDatasetList_extraction_2(objectsUsing,documentsNames,o,obj);          }          itemsJSON.getJSONObject(i).put(\"hasDocumentsAssociated\",documentsNames);        }        List<FederationDefinition> federationsAssociated=DAOFactory.getFedetatedDatasetDAO().loadFederationsUsingDataset(items.get(i).getId());        if (federationsAssociated != null && federationsAssociated.size() > 0)         itemsJSON.getJSONObject(i).put(\"hasFederationsAssociated\",\"true\");      }      JSONObject responseJSON=createJSONResponse(itemsJSON,totalItemsNum);      writeBackToClient(new JSONSuccess(responseJSON));    } catch (    Throwable t) {      throw new SpagoBIRuntimeException(\"An unexpected error occured while loading trigger list for datasets\",t);    } finally {      logger.debug(\"OUT\");    }  } catch (  Throwable e) {    logger.error(\"Exception occurred while retrieving items\",e);    throw new SpagoBIServiceException(SERVICE_NAME,\"sbi.general.retrieveItemsError\",e);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service.ManageDatasets.returnDatasetList.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        },
        "ManageDataSetsForREST": {
            "manageFileDataSet": {
                "original": {
                    "method_name": "manageFileDataSet",
                    "code": "private FileDataSet manageFileDataSet(boolean savingDataset,JSONObject jsonDsConfig,JSONObject json) throws JSONException, IOException {  FileDataSet dataSet=new FileDataSet();  String dsId=json.optString(DataSetConstants.ID);  String dsLabel=json.getString(DataSetConstants.LABEL);  String fileType=json.getString(DataSetConstants.FILE_TYPE);  String versionNum=json.getString(DataSetConstants.VERSION_NUM);  String csvDelimiter=json.optString(DataSetConstants.CSV_FILE_DELIMITER_CHARACTER);  String csvQuote=json.optString(DataSetConstants.CSV_FILE_QUOTE_CHARACTER);  String dateFormat=json.optString(DataSetConstants.FILE_DATE_FORMAT);  String timestampFormat=json.optString(DataSetConstants.FILE_TIMESTAMP_FORMAT);  String csvEncoding=json.optString(DataSetConstants.CSV_FILE_ENCODING);  String skipRows=json.optString(DataSetConstants.XSL_FILE_SKIP_ROWS);  String limitRows=json.optString(DataSetConstants.XSL_FILE_LIMIT_ROWS);  String xslSheetNumber=json.optString(DataSetConstants.XSL_FILE_SHEET_NUMBER);  JSONArray dsMeta=json.optJSONArray(DataSetConstants.FILE_DS_METADATA);  if (dsMeta != null && dsMeta.length() > 0) {    DatasetMetadataParser dsp=new DatasetMetadataParser();    String metadataXML=dsp.metadataToXML(getUserMetaData(dsMeta));    dataSet.setDsMetadata(metadataXML);  }  String dsLab=dsLabel;  Boolean newFileUploaded=false;  if (json.optString(\"fileUploaded\") != null) {    newFileUploaded=Boolean.valueOf(json.optString(\"fileUploaded\"));  }  if (versionNum != \"\") {    dsLab=dsLabel + \"_\" + versionNum;  }  jsonDsConfig.put(DataSetConstants.FILE_TYPE,fileType);  jsonDsConfig.put(DataSetConstants.CSV_FILE_DELIMITER_CHARACTER,csvDelimiter);  jsonDsConfig.put(DataSetConstants.CSV_FILE_QUOTE_CHARACTER,csvQuote);  jsonDsConfig.put(DataSetConstants.CSV_FILE_ENCODING,csvEncoding);  jsonDsConfig.put(DataSetConstants.XSL_FILE_SKIP_ROWS,skipRows);  jsonDsConfig.put(DataSetConstants.XSL_FILE_LIMIT_ROWS,limitRows);  jsonDsConfig.put(DataSetConstants.XSL_FILE_SHEET_NUMBER,xslSheetNumber);  jsonDsConfig.put(DataSetConstants.FILE_DATE_FORMAT,dateFormat);  jsonDsConfig.put(DataSetConstants.FILE_TIMESTAMP_FORMAT,timestampFormat);  dataSet.setResourcePath(DAOConfig.getResourcePath());  String fileName=json.getString(DataSetConstants.FILE_NAME);  File pathFile=new File(fileName);  fileName=pathFile.getName();  if (savingDataset) {    logger.debug(\"When saving the dataset the file associated will get the dataset label name\");    if (dsLabel != null) {      jsonDsConfig.put(DataSetConstants.FILE_NAME,dsLab + \".\" + fileType.toLowerCase());    }  } else {    jsonDsConfig.put(DataSetConstants.FILE_NAME,fileName);  }  dataSet.setConfiguration(jsonDsConfig.toString());  if ((dsId == null) || (dsId.isEmpty())) {    logger.debug(\"By creating a new dataset, the file uploaded has to be renamed and moved\");    dataSet.setUseTempFile(true);    if (savingDataset) {      logger.debug(\"Rename and move the file\");      String resourcePath=dataSet.getResourcePath();      if (dsLabel != null) {        renameAndMoveDatasetFile(fileName,dsLab,resourcePath,fileType);        dataSet.setUseTempFile(false);      }    }  } else {    logger.debug(\"Reading or modifying a existing dataset. If change the label then the name of the file should be changed\");    JSONObject configuration;    Integer id_ds=json.getInt(DataSetConstants.ID);    configuration=new JSONObject(DAOFactory.getDataSetDAO().loadDataSetById(id_ds).getConfiguration());    String realName=configuration.getString(\"fileName\");    if (dsLabel != null && !realName.equals(dsLabel)) {      File dest=new File(SpagoBIUtilities.getResourcePath() + File.separatorChar + \"dataset\"+ File.separatorChar+ \"files\"+ File.separatorChar+ dsLab+ \".\"+ configuration.getString(\"fileType\").toLowerCase());      File source=new File(SpagoBIUtilities.getResourcePath() + File.separatorChar + \"dataset\"+ File.separatorChar+ \"files\"+ File.separatorChar+ realName);      if (!source.getCanonicalPath().equals(dest.getCanonicalPath()) && savingDataset && !newFileUploaded) {        logger.debug(\"Source and destination are not the same. Copying from source to dest\");        FileUtils.copyFile(source,dest);      }    }    if (newFileUploaded) {      logger.debug(\"Modifying an existing dataset with a new file uploaded\");      dataSet.setUseTempFile(true);      logger.debug(\"Saving the existing dataset with a new file associated\");      if (savingDataset) {        logger.debug(\"Rename and move the file\");        String resourcePath=dataSet.getResourcePath();        if (dsLabel != null) {          renameAndMoveDatasetFile(fileName,dsLabel + \"_\" + versionNum,resourcePath,fileType);          dataSet.setUseTempFile(false);        }      }    } else {      logger.debug(\"Using existing dataset file, file in correct place\");      dataSet.setUseTempFile(false);    }  }  dataSet.setFileType(fileType);  if (savingDataset) {    logger.debug(\"The file used will have the name equals to dataset's label\");    dataSet.setFileName(dsLab + \".\" + fileType.toLowerCase());  } else {    dataSet.setFileName(fileName);  }  return dataSet;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service.ManageDataSetsForREST.manageFileDataSet.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "manageFileDataSet",
                        "code": "private FileDataSet manageFileDataSet(boolean savingDataset,JSONObject jsonDsConfig,JSONObject json) throws JSONException, IOException {  FileDataSet dataSet=new FileDataSet();  String dsId=json.optString(DataSetConstants.ID);  String dsLabel=json.getString(DataSetConstants.LABEL);  String fileType=json.getString(DataSetConstants.FILE_TYPE);  String versionNum=json.getString(DataSetConstants.VERSION_NUM);  String csvDelimiter=json.optString(DataSetConstants.CSV_FILE_DELIMITER_CHARACTER);  String csvQuote=json.optString(DataSetConstants.CSV_FILE_QUOTE_CHARACTER);  String dateFormat=json.optString(DataSetConstants.FILE_DATE_FORMAT);  String timestampFormat=json.optString(DataSetConstants.FILE_TIMESTAMP_FORMAT);  String csvEncoding=json.optString(DataSetConstants.CSV_FILE_ENCODING);  String skipRows=json.optString(DataSetConstants.XSL_FILE_SKIP_ROWS);  String limitRows=json.optString(DataSetConstants.XSL_FILE_LIMIT_ROWS);  String xslSheetNumber=json.optString(DataSetConstants.XSL_FILE_SHEET_NUMBER);  JSONArray dsMeta=json.optJSONArray(DataSetConstants.FILE_DS_METADATA);  if (dsMeta != null && dsMeta.length() > 0) {    DatasetMetadataParser dsp=new DatasetMetadataParser();    String metadataXML=dsp.metadataToXML(getUserMetaData(dsMeta));    dataSet.setDsMetadata(metadataXML);  }  String dsLab=dsLabel;  Boolean newFileUploaded=false;  if (json.optString(\"fileUploaded\") != null) {    newFileUploaded=Boolean.valueOf(json.optString(\"fileUploaded\"));  }  if (versionNum != \"\") {    dsLab=dsLabel + \"_\" + versionNum;  }  jsonDsConfig.put(DataSetConstants.FILE_TYPE,fileType);  jsonDsConfig.put(DataSetConstants.CSV_FILE_DELIMITER_CHARACTER,csvDelimiter);  jsonDsConfig.put(DataSetConstants.CSV_FILE_QUOTE_CHARACTER,csvQuote);  jsonDsConfig.put(DataSetConstants.CSV_FILE_ENCODING,csvEncoding);  jsonDsConfig.put(DataSetConstants.XSL_FILE_SKIP_ROWS,skipRows);  jsonDsConfig.put(DataSetConstants.XSL_FILE_LIMIT_ROWS,limitRows);  jsonDsConfig.put(DataSetConstants.XSL_FILE_SHEET_NUMBER,xslSheetNumber);  jsonDsConfig.put(DataSetConstants.FILE_DATE_FORMAT,dateFormat);  jsonDsConfig.put(DataSetConstants.FILE_TIMESTAMP_FORMAT,timestampFormat);  dataSet.setResourcePath(DAOConfig.getResourcePath());  String fileName=json.getString(DataSetConstants.FILE_NAME);  File pathFile=new File(fileName);  fileName=pathFile.getName();  if (savingDataset) {    logger.debug(\"When saving the dataset the file associated will get the dataset label name\");    if (dsLabel != null) {      jsonDsConfig.put(DataSetConstants.FILE_NAME,dsLab + \".\" + fileType.toLowerCase());    }  } else {    jsonDsConfig.put(DataSetConstants.FILE_NAME,fileName);  }  dataSet.setConfiguration(jsonDsConfig.toString());  if ((dsId == null) || (dsId.isEmpty())) {    logger.debug(\"By creating a new dataset, the file uploaded has to be renamed and moved\");    dataSet.setUseTempFile(true);    if (savingDataset) {      logger.debug(\"Rename and move the file\");      String resourcePath=dataSet.getResourcePath();      if (dsLabel != null) {        renameAndMoveDatasetFile(fileName,dsLab,resourcePath,fileType);        dataSet.setUseTempFile(false);      }    }  } else {    logger.debug(\"Reading or modifying a existing dataset. If change the label then the name of the file should be changed\");    JSONObject configuration;    Integer id_ds=json.getInt(DataSetConstants.ID);    configuration=new JSONObject(DAOFactory.getDataSetDAO().loadDataSetById(id_ds).getConfiguration());    manageFileDataSet_extraction_2(savingDataset,dataSet,dsLabel,fileType,versionNum,dsLab,newFileUploaded,fileName,configuration);  }  dataSet.setFileType(fileType);  if (savingDataset) {    logger.debug(\"The file used will have the name equals to dataset's label\");    dataSet.setFileName(dsLab + \".\" + fileType.toLowerCase());  } else {    dataSet.setFileName(fileName);  }  return dataSet;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service.ManageDataSetsForREST.manageFileDataSet.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "manageFileDataSet",
                        "code": "private FileDataSet manageFileDataSet(boolean savingDataset,JSONObject jsonDsConfig,JSONObject json) throws JSONException, IOException {  FileDataSet dataSet=new FileDataSet();  String dsId=json.optString(DataSetConstants.ID);  String dsLabel=json.getString(DataSetConstants.LABEL);  String fileType=json.getString(DataSetConstants.FILE_TYPE);  String versionNum=json.getString(DataSetConstants.VERSION_NUM);  String csvDelimiter=json.optString(DataSetConstants.CSV_FILE_DELIMITER_CHARACTER);  String csvQuote=json.optString(DataSetConstants.CSV_FILE_QUOTE_CHARACTER);  String dateFormat=json.optString(DataSetConstants.FILE_DATE_FORMAT);  String timestampFormat=json.optString(DataSetConstants.FILE_TIMESTAMP_FORMAT);  String csvEncoding=json.optString(DataSetConstants.CSV_FILE_ENCODING);  String skipRows=json.optString(DataSetConstants.XSL_FILE_SKIP_ROWS);  String limitRows=json.optString(DataSetConstants.XSL_FILE_LIMIT_ROWS);  String xslSheetNumber=json.optString(DataSetConstants.XSL_FILE_SHEET_NUMBER);  JSONArray dsMeta=json.optJSONArray(DataSetConstants.FILE_DS_METADATA);  if (dsMeta != null && dsMeta.length() > 0) {    DatasetMetadataParser dsp=new DatasetMetadataParser();    String metadataXML=dsp.metadataToXML(getUserMetaData(dsMeta));    dataSet.setDsMetadata(metadataXML);  }  String dsLab=dsLabel;  Boolean newFileUploaded=false;  if (json.optString(\"fileUploaded\") != null) {    newFileUploaded=Boolean.valueOf(json.optString(\"fileUploaded\"));  }  if (versionNum != \"\") {    dsLab=dsLabel + \"_\" + versionNum;  }  jsonDsConfig.put(DataSetConstants.FILE_TYPE,fileType);  jsonDsConfig.put(DataSetConstants.CSV_FILE_DELIMITER_CHARACTER,csvDelimiter);  jsonDsConfig.put(DataSetConstants.CSV_FILE_QUOTE_CHARACTER,csvQuote);  jsonDsConfig.put(DataSetConstants.CSV_FILE_ENCODING,csvEncoding);  jsonDsConfig.put(DataSetConstants.XSL_FILE_SKIP_ROWS,skipRows);  jsonDsConfig.put(DataSetConstants.XSL_FILE_LIMIT_ROWS,limitRows);  jsonDsConfig.put(DataSetConstants.XSL_FILE_SHEET_NUMBER,xslSheetNumber);  jsonDsConfig.put(DataSetConstants.FILE_DATE_FORMAT,dateFormat);  jsonDsConfig.put(DataSetConstants.FILE_TIMESTAMP_FORMAT,timestampFormat);  dataSet.setResourcePath(DAOConfig.getResourcePath());  String fileName=json.getString(DataSetConstants.FILE_NAME);  File pathFile=new File(fileName);  fileName=pathFile.getName();  manageFileDataSet_extraction_1(savingDataset,jsonDsConfig,dsLabel,fileType,dsLab,fileName);  dataSet.setConfiguration(jsonDsConfig.toString());  if ((dsId == null) || (dsId.isEmpty())) {    logger.debug(\"By creating a new dataset, the file uploaded has to be renamed and moved\");    dataSet.setUseTempFile(true);    if (savingDataset) {      logger.debug(\"Rename and move the file\");      String resourcePath=dataSet.getResourcePath();      if (dsLabel != null) {        renameAndMoveDatasetFile(fileName,dsLab,resourcePath,fileType);        dataSet.setUseTempFile(false);      }    }  } else {    logger.debug(\"Reading or modifying a existing dataset. If change the label then the name of the file should be changed\");    JSONObject configuration;    Integer id_ds=json.getInt(DataSetConstants.ID);    configuration=new JSONObject(DAOFactory.getDataSetDAO().loadDataSetById(id_ds).getConfiguration());    manageFileDataSet_extraction_2(savingDataset,dataSet,dsLabel,fileType,versionNum,dsLab,newFileUploaded,fileName,configuration);  }  dataSet.setFileType(fileType);  if (savingDataset) {    logger.debug(\"The file used will have the name equals to dataset's label\");    dataSet.setFileName(dsLab + \".\" + fileType.toLowerCase());  } else {    dataSet.setFileName(fileName);  }  return dataSet;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.service.ManageDataSetsForREST.manageFileDataSet.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.strategy": {
        "AbstractEvaluationStrategy": {
            "applyTotalsFunctionsToFormulas": {
                "original": {
                    "method_name": "applyTotalsFunctionsToFormulas",
                    "code": "private List<AbstractSelectionField> applyTotalsFunctionsToFormulas(IDataSet dataSet,List<AbstractSelectionField> projections,Filter filter,int maxRowCount){  List<AbstractSelectionField> toReturnList=new ArrayList<AbstractSelectionField>();  Set<String> totalFunctions=new HashSet<String>();  for (  AbstractSelectionField abstractSelectionField : projections) {    if (abstractSelectionField instanceof DataStoreCalculatedField) {      String formula=((DataStoreCalculatedField)abstractSelectionField).getFormula();      if (formula.contains(\"TOTAL_\")) {        String pattern=\"((?:TOTAL_SUM|TOTAL_AVG|TOTAL_MIN|TOTAL_MAX|TOTAL_COUNT)\\\\()(\\\\\\\"[a-zA-Z0-9\\\\-\\\\_\\\\s]*\\\\\\\")(\\\\))\";        Pattern r=Pattern.compile(pattern);        Matcher m=r.matcher(formula);        while (m.find()) {          totalFunctions.add(m.group(0).replace(\"TOTAL_\",\"\"));        }        pattern=\"((?:TOTAL_SUM|TOTAL_AVG|TOTAL_MIN|TOTAL_MAX|TOTAL_COUNT)\\\\()([a-zA-Z0-9\\\\-\\\\+\\\\/\\\\*\\\\_\\\\s\\\\$\\\\{\\\\}\\\\\\\"]*)(\\\\))\";        r=Pattern.compile(Pattern.quote(pattern));        m=r.matcher(formula);        while (m.find()) {          totalFunctions.add(m.group(0).replace(\"TOTAL_\",\"\"));        }      }    }  }  if (!totalFunctions.isEmpty()) {    IDataStore totalsFunctionDataStore=executeTotalsFunctions(dataSet,totalFunctions,filter,maxRowCount);    HashMap<String,String> totalsMap=new HashMap<String,String>();    int i=0;    for (    String function : totalFunctions) {      totalsMap.put(function,String.valueOf(totalsFunctionDataStore.getRecordAt(0).getFieldAt(i).getValue()));      i++;    }    for (    AbstractSelectionField abstractSelectionField : projections) {      AbstractSelectionField tmp=abstractSelectionField;      if (tmp instanceof DataStoreCalculatedField) {        String formula=((DataStoreCalculatedField)tmp).getFormula();        if (formula.contains(\"TOTAL_\")) {          for (          String totalFunction : totalsMap.keySet()) {            formula=formula.replace(\"TOTAL_\" + totalFunction,totalsMap.get(totalFunction));          }          ((DataStoreCalculatedField)tmp).setFormula(formula);        }      }      toReturnList.add(tmp);    }  } else {    toReturnList=projections;  }  return toReturnList;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.strategy.AbstractEvaluationStrategy.applyTotalsFunctionsToFormulas.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "applyTotalsFunctionsToFormulas",
                        "code": "private List<AbstractSelectionField> applyTotalsFunctionsToFormulas(IDataSet dataSet,List<AbstractSelectionField> projections,Filter filter,int maxRowCount){  List<AbstractSelectionField> toReturnList=new ArrayList<AbstractSelectionField>();  Set<String> totalFunctions=new HashSet<String>();  for (  AbstractSelectionField abstractSelectionField : projections) {    if (abstractSelectionField instanceof DataStoreCalculatedField) {      String formula=((DataStoreCalculatedField)abstractSelectionField).getFormula();      if (formula.contains(\"TOTAL_\")) {        String pattern=\"((?:TOTAL_SUM|TOTAL_AVG|TOTAL_MIN|TOTAL_MAX|TOTAL_COUNT)\\\\()(\\\\\\\"[a-zA-Z0-9\\\\-\\\\_\\\\s]*\\\\\\\")(\\\\))\";        Pattern r=Pattern.compile(pattern);        Matcher m=r.matcher(formula);        while (m.find()) {          totalFunctions.add(m.group(0).replace(\"TOTAL_\",\"\"));        }        pattern=\"((?:TOTAL_SUM|TOTAL_AVG|TOTAL_MIN|TOTAL_MAX|TOTAL_COUNT)\\\\()([a-zA-Z0-9\\\\-\\\\+\\\\/\\\\*\\\\_\\\\s\\\\$\\\\{\\\\}\\\\\\\"]*)(\\\\))\";        r=Pattern.compile(Pattern.quote(pattern));        m=r.matcher(formula);        while (m.find()) {          totalFunctions.add(m.group(0).replace(\"TOTAL_\",\"\"));        }      }    }  }  if (!totalFunctions.isEmpty()) {    IDataStore totalsFunctionDataStore=executeTotalsFunctions(dataSet,totalFunctions,filter,maxRowCount);    HashMap<String,String> totalsMap=new HashMap<String,String>();    int i=0;    for (    String function : totalFunctions) {      totalsMap.put(function,String.valueOf(totalsFunctionDataStore.getRecordAt(0).getFieldAt(i).getValue()));      i++;    }    for (    AbstractSelectionField abstractSelectionField : projections) {      AbstractSelectionField tmp=abstractSelectionField;      if (tmp instanceof DataStoreCalculatedField) {        String formula=((DataStoreCalculatedField)tmp).getFormula();        if (formula.contains(\"TOTAL_\")) {          formula=applyTotalsFunctionsToFormulas_extraction_2(totalsMap,formula);          ((DataStoreCalculatedField)tmp).setFormula(formula);        }      }      toReturnList.add(tmp);    }  } else {    toReturnList=projections;  }  return toReturnList;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.strategy.AbstractEvaluationStrategy.applyTotalsFunctionsToFormulas.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "applyTotalsFunctionsToFormulas",
                        "code": "private List<AbstractSelectionField> applyTotalsFunctionsToFormulas(IDataSet dataSet,List<AbstractSelectionField> projections,Filter filter,int maxRowCount){  List<AbstractSelectionField> toReturnList=new ArrayList<AbstractSelectionField>();  Set<String> totalFunctions=applyTotalsFunctionsToFormulas_extraction_1(projections);  if (!totalFunctions.isEmpty()) {    IDataStore totalsFunctionDataStore=executeTotalsFunctions(dataSet,totalFunctions,filter,maxRowCount);    HashMap<String,String> totalsMap=new HashMap<String,String>();    int i=0;    for (    String function : totalFunctions) {      totalsMap.put(function,String.valueOf(totalsFunctionDataStore.getRecordAt(0).getFieldAt(i).getValue()));      i++;    }    for (    AbstractSelectionField abstractSelectionField : projections) {      AbstractSelectionField tmp=abstractSelectionField;      if (tmp instanceof DataStoreCalculatedField) {        String formula=((DataStoreCalculatedField)tmp).getFormula();        if (formula.contains(\"TOTAL_\")) {          formula=applyTotalsFunctionsToFormulas_extraction_2(totalsMap,formula);          ((DataStoreCalculatedField)tmp).setFormula(formula);        }      }      toReturnList.add(tmp);    }  } else {    toReturnList=projections;  }  return toReturnList;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.dataset.strategy.AbstractEvaluationStrategy.applyTotalsFunctionsToFormulas.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.datasource.service.rest": {
        "TestConnection": {
            "testDataSourceNew": {
                "original": {
                    "method_name": "testDataSourceNew",
                    "code": "@POST @Path(\"/2.0/test\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.DATASOURCE_MANAGEMENT}) public String testDataSourceNew(@javax.ws.rs.core.Context HttpServletRequest req) throws Exception {  logger.debug(\"IN\");  JSONObject requestBodyJSON=RestUtilities.readBodyAsJSONObject(req);  String label=requestBodyJSON.optString(\"label\");  String url=requestBodyJSON.optString(\"urlConnection\");  String user=requestBodyJSON.optString(\"user\");  String pwd=requestBodyJSON.optString(\"pwd\");  String driver=requestBodyJSON.optString(\"driver\");  String schemaAttr=requestBodyJSON.optString(\"schemaAttribute\");  String jndi=requestBodyJSON.optString(\"jndi\");  String type=requestBodyJSON.getString(\"type\");  IEngUserProfile profile=(IEngUserProfile)req.getSession().getAttribute(IEngUserProfile.ENG_USER_PROFILE);  String schema=(String)profile.getUserAttribute(schemaAttr);  logger.debug(\"schema:\" + schema);  Connection connection=null;  try {    if (type.equals(\"JNDI\")) {      String jndiName=schema == null ? jndi : jndi + schema;      logger.debug(\"Lookup JNDI name:\" + jndiName);      Context ctx=new InitialContext();      DataSource ds=(DataSource)ctx.lookup(jndiName);      connection=ds.getConnection();    } else {      if (driver.toLowerCase().contains(\"mongo\")) {        logger.debug(\"Checking the connection for MONGODB\");        MongoClient mongoClient=null;        try {          int databaseNameStart=url.lastIndexOf(\"/\");          if (databaseNameStart < 0) {            logger.error(\"Error connecting to the mongoDB. No database selected\");          }          String databaseUrl=url.substring(0,databaseNameStart);          String databaseName=url.substring(databaseNameStart + 1);          mongoClient=new MongoClient(databaseUrl);          DB database=mongoClient.getDB(databaseName);          database.getCollectionNames();          logger.debug(\"Connection OK\");          return new JSONObject().toString();        } catch (        Exception e) {          logger.error(\"Error connecting to the mongoDB\",e);          throw new SpagoBIException(\"Error connecting to the mongoDB\",e);        } finally {          if (mongoClient != null) {            mongoClient.close();          }        }      } else {        if (!StringUtils.isEmpty(label) && StringUtils.isEmpty(pwd)) {          IDataSourceDAO dataSourceDAO=DAOFactory.getDataSourceDAO();          IDataSource dataSource=dataSourceDAO.loadDataSourceByLabel(label);          if (dataSource != null) {            pwd=dataSource.getPwd();          }        }        Class.forName(driver);        connection=DriverManager.getConnection(url,user,pwd);      }    }    if (connection != null) {      logger.debug(\"Connection OK\");      return new JSONObject().toString();    } else {      JSONObject toReturn=new JSONObject();      toReturn.put(\"error\",\"Connection KO\");      return toReturn.toString();    }  } catch (  Exception ex) {    logger.error(\"Error testing datasources\",ex);    JSONObject toReturn=new JSONObject();    toReturn.put(\"error\",ex.getMessage());    return toReturn.toString();  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.datasource.service.rest.TestConnection.testDataSourceNew.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "testDataSourceNew",
                        "code": "@POST @Path(\"/2.0/test\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.DATASOURCE_MANAGEMENT}) public String testDataSourceNew(@javax.ws.rs.core.Context HttpServletRequest req) throws Exception {  logger.debug(\"IN\");  JSONObject requestBodyJSON=RestUtilities.readBodyAsJSONObject(req);  String label=requestBodyJSON.optString(\"label\");  String url=requestBodyJSON.optString(\"urlConnection\");  String user=requestBodyJSON.optString(\"user\");  String pwd=requestBodyJSON.optString(\"pwd\");  String driver=requestBodyJSON.optString(\"driver\");  String schemaAttr=requestBodyJSON.optString(\"schemaAttribute\");  String jndi=requestBodyJSON.optString(\"jndi\");  String type=requestBodyJSON.getString(\"type\");  IEngUserProfile profile=(IEngUserProfile)req.getSession().getAttribute(IEngUserProfile.ENG_USER_PROFILE);  String schema=(String)profile.getUserAttribute(schemaAttr);  logger.debug(\"schema:\" + schema);  Connection connection=null;  try {    if (type.equals(\"JNDI\")) {      String jndiName=schema == null ? jndi : jndi + schema;      logger.debug(\"Lookup JNDI name:\" + jndiName);      Context ctx=new InitialContext();      DataSource ds=(DataSource)ctx.lookup(jndiName);      connection=ds.getConnection();    } else {      if (driver.toLowerCase().contains(\"mongo\")) {        logger.debug(\"Checking the connection for MONGODB\");        MongoClient mongoClient=null;        try {          int databaseNameStart=url.lastIndexOf(\"/\");          if (databaseNameStart < 0) {            logger.error(\"Error connecting to the mongoDB. No database selected\");          }          String databaseUrl=url.substring(0,databaseNameStart);          String databaseName=url.substring(databaseNameStart + 1);          mongoClient=new MongoClient(databaseUrl);          DB database=mongoClient.getDB(databaseName);          database.getCollectionNames();          logger.debug(\"Connection OK\");          return new JSONObject().toString();        } catch (        Exception e) {          logger.error(\"Error connecting to the mongoDB\",e);          throw new SpagoBIException(\"Error connecting to the mongoDB\",e);        } finally {          if (mongoClient != null) {            mongoClient.close();          }        }      } else {        if (!StringUtils.isEmpty(label) && StringUtils.isEmpty(pwd)) {          pwd=testDataSourceNew_extraction_2(label,pwd);        }        Class.forName(driver);        connection=DriverManager.getConnection(url,user,pwd);      }    }    if (connection != null) {      logger.debug(\"Connection OK\");      return new JSONObject().toString();    } else {      JSONObject toReturn=new JSONObject();      toReturn.put(\"error\",\"Connection KO\");      return toReturn.toString();    }  } catch (  Exception ex) {    logger.error(\"Error testing datasources\",ex);    JSONObject toReturn=new JSONObject();    toReturn.put(\"error\",ex.getMessage());    return toReturn.toString();  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.datasource.service.rest.TestConnection.testDataSourceNew.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "testDataSourceNew",
                        "code": "@POST @Path(\"/2.0/test\") @Produces(MediaType.APPLICATION_JSON) @UserConstraint(functionalities={SpagoBIConstants.DATASOURCE_MANAGEMENT}) public String testDataSourceNew(@javax.ws.rs.core.Context HttpServletRequest req) throws Exception {  logger.debug(\"IN\");  JSONObject requestBodyJSON=RestUtilities.readBodyAsJSONObject(req);  String label=requestBodyJSON.optString(\"label\");  String url=requestBodyJSON.optString(\"urlConnection\");  String user=requestBodyJSON.optString(\"user\");  String pwd=requestBodyJSON.optString(\"pwd\");  String driver=requestBodyJSON.optString(\"driver\");  String schemaAttr=requestBodyJSON.optString(\"schemaAttribute\");  String jndi=requestBodyJSON.optString(\"jndi\");  String type=requestBodyJSON.getString(\"type\");  IEngUserProfile profile=(IEngUserProfile)req.getSession().getAttribute(IEngUserProfile.ENG_USER_PROFILE);  String schema=(String)profile.getUserAttribute(schemaAttr);  logger.debug(\"schema:\" + schema);  Connection connection=null;  try {    if (type.equals(\"JNDI\")) {      String jndiName=schema == null ? jndi : jndi + schema;      logger.debug(\"Lookup JNDI name:\" + jndiName);      Context ctx=new InitialContext();      DataSource ds=(DataSource)ctx.lookup(jndiName);      connection=ds.getConnection();    } else {      if (driver.toLowerCase().contains(\"mongo\")) {        logger.debug(\"Checking the connection for MONGODB\");        MongoClient mongoClient=null;        return testDataSourceNew_extraction_1(url,mongoClient);      } else {        if (!StringUtils.isEmpty(label) && StringUtils.isEmpty(pwd)) {          pwd=testDataSourceNew_extraction_2(label,pwd);        }        Class.forName(driver);        connection=DriverManager.getConnection(url,user,pwd);      }    }    if (connection != null) {      logger.debug(\"Connection OK\");      return new JSONObject().toString();    } else {      JSONObject toReturn=new JSONObject();      toReturn.put(\"error\",\"Connection KO\");      return toReturn.toString();    }  } catch (  Exception ex) {    logger.error(\"Error testing datasources\",ex);    JSONObject toReturn=new JSONObject();    toReturn.put(\"error\",ex.getMessage());    return toReturn.toString();  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.datasource.service.rest.TestConnection.testDataSourceNew.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement": {
        "Hierarchies": {
            "getDimension": {
                "original": {
                    "method_name": "getDimension",
                    "code": "/**  * Get the dimension properties of the passed dimension * @param dimension the dimension name * @return the dimension object with all attributes */public Dimension getDimension(String dimension){  Dimension toReturn=new Dimension(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      toReturn.setName(sbRow.getAttribute(HierarchyConstants.NAME) != null ? sbRow.getAttribute(HierarchyConstants.NAME).toString() : null);      List lstFields=sbRow.getAttributeAsList(HierarchyConstants.DIM_FIELDS + \".\" + HierarchyConstants.FIELD);      ArrayList<Field> metadataDimension=new ArrayList<Field>();      for (Iterator iter=lstFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataDimension.add(field);      }      toReturn.setMetadataFields(metadataDimension);      List lstFilters=sbRow.getAttributeAsList(HierarchyConstants.DIM_FILTERS + \".\" + HierarchyConstants.FILTER);      ArrayList<Filter> metadataFilterDim=new ArrayList<Filter>();      for (Iterator iter=lstFilters.iterator(); iter.hasNext(); ) {        SourceBean sbFilter=(SourceBean)iter.next();        String filterName=sbFilter.getAttribute(HierarchyConstants.FILTER_NAME) != null ? sbFilter.getAttribute(HierarchyConstants.FILTER_NAME).toString() : null;        String filterType=sbFilter.getAttribute(HierarchyConstants.FILTER_TYPE) != null ? sbFilter.getAttribute(HierarchyConstants.FILTER_TYPE).toString() : null;        String filterDefault=sbFilter.getAttribute(HierarchyConstants.FILTER_DEFAULT) != null ? sbFilter.getAttribute(HierarchyConstants.FILTER_DEFAULT).toString() : null;        boolean checkCondition=true;        int idx=0;        LinkedHashMap<String,String> conditions=new LinkedHashMap<String,String>();        while (checkCondition) {          idx++;          if (sbFilter.getAttribute(HierarchyConstants.FILTER_CONDITION + idx) != null) {            String condition=sbFilter.getAttribute(HierarchyConstants.FILTER_CONDITION + idx).toString();            conditions.put(HierarchyConstants.FILTER_CONDITION + idx,condition);          } else {            if (conditions.size() == 0) {              logger.error(\"The dimension has the filter \" + filterName + \" without valid conditions! No optional filter will be added on the GUI. Check the template!! \");            }            break;          }        }        Filter filter=new Filter(filterName,filterType,filterDefault,conditions);        metadataFilterDim.add(filter);      }      toReturn.setMetadataFilters(metadataFilterDim);    }  }  return toReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getDimension.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getDimension",
                        "code": "/**  * Get the dimension properties of the passed dimension * @param dimension the dimension name * @return the dimension object with all attributes */public Dimension getDimension(String dimension){  Dimension toReturn=new Dimension(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      toReturn.setName(sbRow.getAttribute(HierarchyConstants.NAME) != null ? sbRow.getAttribute(HierarchyConstants.NAME).toString() : null);      List lstFields=sbRow.getAttributeAsList(HierarchyConstants.DIM_FIELDS + \".\" + HierarchyConstants.FIELD);      ArrayList<Field> metadataDimension=new ArrayList<Field>();      for (Iterator iter=lstFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataDimension.add(field);      }      toReturn.setMetadataFields(metadataDimension);      List lstFilters=sbRow.getAttributeAsList(HierarchyConstants.DIM_FILTERS + \".\" + HierarchyConstants.FILTER);      ArrayList<Filter> metadataFilterDim=new ArrayList<Filter>();      for (Iterator iter=lstFilters.iterator(); iter.hasNext(); ) {        getDimension_extraction_2(metadataFilterDim,iter);      }      toReturn.setMetadataFilters(metadataFilterDim);    }  }  return toReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getDimension.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getDimension",
                        "code": "/**  * Get the dimension properties of the passed dimension * @param dimension the dimension name * @return the dimension object with all attributes */public Dimension getDimension(String dimension){  Dimension toReturn=new Dimension(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      toReturn.setName(sbRow.getAttribute(HierarchyConstants.NAME) != null ? sbRow.getAttribute(HierarchyConstants.NAME).toString() : null);      List lstFields=sbRow.getAttributeAsList(HierarchyConstants.DIM_FIELDS + \".\" + HierarchyConstants.FIELD);      ArrayList<Field> metadataDimension=new ArrayList<Field>();      for (Iterator iter=lstFields.iterator(); iter.hasNext(); ) {        Field field=getDimension_extraction_1(iter);        metadataDimension.add(field);      }      toReturn.setMetadataFields(metadataDimension);      List lstFilters=sbRow.getAttributeAsList(HierarchyConstants.DIM_FILTERS + \".\" + HierarchyConstants.FILTER);      ArrayList<Filter> metadataFilterDim=new ArrayList<Filter>();      for (Iterator iter=lstFilters.iterator(); iter.hasNext(); ) {        getDimension_extraction_2(metadataFilterDim,iter);      }      toReturn.setMetadataFilters(metadataFilterDim);    }  }  return toReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getDimension.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "getHierarchy": {
                "original": {
                    "method_name": "getHierarchy",
                    "code": "/**  * Get the hierarchy properties of the passed dimension * @param dimension the dimension name * @return the hierarchy object linked to the input dimension with all attributes */public Hierarchy getHierarchy(String dimension){  Hierarchy toReturn=new Hierarchy(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      List lstGeneralFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.GENERAL_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataGeneralHierarchy=new ArrayList<Field>();      for (Iterator iter=lstGeneralFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fieldFixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fieldFixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataGeneralHierarchy.add(field);      }      toReturn.setMetadataGeneralFields(metadataGeneralHierarchy);      List lstNodeFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.NODE_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataNodeHierarchy=new ArrayList<Field>();      for (Iterator iter=lstNodeFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fieldFixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fieldFixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataNodeHierarchy.add(field);      }      toReturn.setMetadataNodeFields(metadataNodeHierarchy);      List lstLeafFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.LEAF_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataLeafHierarchy=new ArrayList<Field>();      for (Iterator iter=lstLeafFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fieldFixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fieldFixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldParent,fieldIsUnique,fieldIsOrder);        metadataLeafHierarchy.add(field);      }      toReturn.setMetadataLeafFields(metadataLeafHierarchy);    }  }  return toReturn;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getHierarchy.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getHierarchy",
                        "code": "/**  * Get the hierarchy properties of the passed dimension * @param dimension the dimension name * @return the hierarchy object linked to the input dimension with all attributes */public Hierarchy getHierarchy(String dimension){  Hierarchy toReturn=new Hierarchy(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      List lstGeneralFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.GENERAL_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataGeneralHierarchy=new ArrayList<Field>();      for (Iterator iter=lstGeneralFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fieldFixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fieldFixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataGeneralHierarchy.add(field);      }      toReturn.setMetadataGeneralFields(metadataGeneralHierarchy);      List lstNodeFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.NODE_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataNodeHierarchy=new ArrayList<Field>();      for (Iterator iter=lstNodeFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fieldFixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fieldFixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataNodeHierarchy.add(field);      }      toReturn.setMetadataNodeFields(metadataNodeHierarchy);      List lstLeafFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.LEAF_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataLeafHierarchy=new ArrayList<Field>();      for (Iterator iter=lstLeafFields.iterator(); iter.hasNext(); ) {        Field field=getHierarchy_extraction_3(iter);        metadataLeafHierarchy.add(field);      }      toReturn.setMetadataLeafFields(metadataLeafHierarchy);    }  }  return toReturn;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getHierarchy.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getHierarchy",
                        "code": "/**  * Get the hierarchy properties of the passed dimension * @param dimension the dimension name * @return the hierarchy object linked to the input dimension with all attributes */public Hierarchy getHierarchy(String dimension){  Hierarchy toReturn=new Hierarchy(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      List lstGeneralFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.GENERAL_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataGeneralHierarchy=new ArrayList<Field>();      for (Iterator iter=lstGeneralFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        String fieldId=sbField.getAttribute(HierarchyConstants.FIELD_ID) != null ? sbField.getAttribute(HierarchyConstants.FIELD_ID).toString() : null;        String fieldName=sbField.getAttribute(HierarchyConstants.FIELD_NAME) != null ? sbField.getAttribute(HierarchyConstants.FIELD_NAME).toString() : null;        String fieldType=sbField.getAttribute(HierarchyConstants.FIELD_TYPE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_TYPE).toString() : null;        String fieldFixValue=sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE) != null ? sbField.getAttribute(HierarchyConstants.FIELD_FIX_VALUE).toString() : null;        boolean fieldIsVisible=sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_VISIBLE)) : false;        boolean fieldIsEditable=sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_EDITABLE)) : false;        boolean fieldIsRequired=sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_REQUIRED)) : false;        boolean fieldIsSingleValue=sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_SINGLE_VALUE)) : true;        boolean fieldIsParent=sbField.getAttribute(HierarchyConstants.FIELD_PARENT) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_PARENT)) : false;        boolean fieldIsUnique=sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_UNIQUE_CODE)) : false;        boolean fieldIsOrder=sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER) != null ? Boolean.parseBoolean((String)sbField.getAttribute(HierarchyConstants.FIELD_IS_ORDER)) : false;        Field field=new Field(fieldId,fieldName,fieldType,fieldFixValue,fieldIsVisible,fieldIsEditable,fieldIsRequired,fieldIsSingleValue,fieldIsParent,fieldIsUnique,fieldIsOrder);        metadataGeneralHierarchy.add(field);      }      toReturn.setMetadataGeneralFields(metadataGeneralHierarchy);      List lstNodeFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.NODE_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataNodeHierarchy=new ArrayList<Field>();      for (Iterator iter=lstNodeFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        getHierarchy_extraction_2(metadataNodeHierarchy,sbField);      }      toReturn.setMetadataNodeFields(metadataNodeHierarchy);      List lstLeafFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.LEAF_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataLeafHierarchy=new ArrayList<Field>();      for (Iterator iter=lstLeafFields.iterator(); iter.hasNext(); ) {        Field field=getHierarchy_extraction_3(iter);        metadataLeafHierarchy.add(field);      }      toReturn.setMetadataLeafFields(metadataLeafHierarchy);    }  }  return toReturn;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getHierarchy.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getHierarchy",
                        "code": "/**  * Get the hierarchy properties of the passed dimension * @param dimension the dimension name * @return the hierarchy object linked to the input dimension with all attributes */public Hierarchy getHierarchy(String dimension){  Hierarchy toReturn=new Hierarchy(dimension);  SourceBean sb=getTemplate();  SourceBean dimensions=(SourceBean)sb.getAttribute(HierarchyConstants.DIMENSIONS);  List lst=dimensions.getAttributeAsList(HierarchyConstants.DIMENSION);  for (Iterator iterator=lst.iterator(); iterator.hasNext(); ) {    SourceBean sbRow=(SourceBean)iterator.next();    String dimensionLabel=sbRow.getAttribute(HierarchyConstants.LABEL) != null ? sbRow.getAttribute(HierarchyConstants.LABEL).toString() : null;    if (dimensionLabel.equalsIgnoreCase(dimension)) {      List lstGeneralFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.GENERAL_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataGeneralHierarchy=new ArrayList<Field>();      for (Iterator iter=lstGeneralFields.iterator(); iter.hasNext(); ) {        Field field=getHierarchy_extraction_1(iter);        metadataGeneralHierarchy.add(field);      }      toReturn.setMetadataGeneralFields(metadataGeneralHierarchy);      List lstNodeFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.NODE_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataNodeHierarchy=new ArrayList<Field>();      for (Iterator iter=lstNodeFields.iterator(); iter.hasNext(); ) {        SourceBean sbField=(SourceBean)iter.next();        getHierarchy_extraction_2(metadataNodeHierarchy,sbField);      }      toReturn.setMetadataNodeFields(metadataNodeHierarchy);      List lstLeafFields=sbRow.getAttributeAsList(HierarchyConstants.HIER_FIELDS + \".\" + HierarchyConstants.LEAF_FIELDS+ \".\"+ HierarchyConstants.FIELD);      ArrayList<Field> metadataLeafHierarchy=new ArrayList<Field>();      for (Iterator iter=lstLeafFields.iterator(); iter.hasNext(); ) {        Field field=getHierarchy_extraction_3(iter);        metadataLeafHierarchy.add(field);      }      toReturn.setMetadataLeafFields(metadataLeafHierarchy);    }  }  return toReturn;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.Hierarchies.getHierarchy.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.service.rest": {
        "BackupService": {
            "modifyHierarchyBkps": {
                "original": {
                    "method_name": "modifyHierarchyBkps",
                    "code": "@POST @Path(\"/modifyHierarchyBkps\") @Produces(MediaType.APPLICATION_JSON + \"; charset=UTF-8\") @UserConstraint(functionalities={SpagoBIConstants.HIERARCHIES_MANAGEMENT}) public String modifyHierarchyBkps(@Context HttpServletRequest req) throws SQLException {  Connection databaseConnection=null;  try {    JSONObject requestVal=RestUtilities.readBodyAsJSONObject(req);    String dimension=requestVal.getString(\"dimension\");    String hierarchyNameNew=requestVal.getString(\"HIER_NM\");    String hierarchyNameOrig=requestVal.getString(\"HIER_NM_ORIG\");    Hierarchies hierarchies=HierarchiesSingleton.getInstance();    String hierarchyTable=hierarchies.getHierarchyTableName(dimension);    Hierarchy hierarchyFields=hierarchies.getHierarchy(dimension);    List<Field> generalMetadataFields=new ArrayList<Field>(hierarchyFields.getMetadataGeneralFields());    String dataSourceName=hierarchies.getDataSourceOfDimension(dimension);    IDataSourceDAO dataSourceDAO=DAOFactory.getDataSourceDAO();    IDataSource dataSource=dataSourceDAO.loadDataSourceByLabel(dataSourceName);    if (dataSource == null) {      throw new SpagoBIServiceException(\"An unexpected error occured while saving custom hierarchy\",\"No datasource found for saving hierarchy\");    }    LinkedHashMap<String,String> lstFields=new LinkedHashMap<String,String>();    StringBuffer columnsBuffer=new StringBuffer(\" \");    for (int i=0, l=generalMetadataFields.size(); i < l; i++) {      Field f=generalMetadataFields.get(i);      String key=f.getId();      String value=(!requestVal.isNull(key)) ? requestVal.getString(key) : null;      if (key != null && value != null) {        lstFields.put(key,value);        String sep=(i < l - 1) ? \"= ?, \" : \"= ? \";        String column=AbstractJDBCDataset.encapsulateColumnName(f.getId(),dataSource);        columnsBuffer.append(column + sep);      }    }    String columns=columnsBuffer.toString();    if (columns.trim().endsWith(\",\"))     columns=columns.substring(0,columns.lastIndexOf(\",\"));    String hierNameColumn=AbstractJDBCDataset.encapsulateColumnName(HierarchyConstants.HIER_NM,dataSource);    databaseConnection=dataSource.getConnection();    Statement stmt=databaseConnection.createStatement();    boolean doUpdateRelationsMT=false;    if (!hierarchyNameNew.equalsIgnoreCase(hierarchyNameOrig)) {      String selectQuery=\"SELECT count(*) as num FROM \" + hierarchyTable + \" WHERE  HIER_NM = ? \";      PreparedStatement selectPs=databaseConnection.prepareStatement(selectQuery);      selectPs.setString(1,hierarchyNameNew);      ResultSet rs=selectPs.executeQuery();      if (rs.next()) {        String count=rs.getString(\"num\");        if (Integer.valueOf(count) > 0) {          logger.error(\"A hierarchy with name \" + hierarchyNameNew + \"  already exists. Change name.\");          throw new SpagoBIServiceException(\"\",\"A hierarchy with name \" + hierarchyNameNew + \"  already exists. Change name.\");        }      }      doUpdateRelationsMT=true;    }    String updateQuery=\"UPDATE \" + hierarchyTable + \" SET \"+ columns+ \" WHERE \"+ hierNameColumn+ \"= ?\";    logger.debug(\"The update query is [\" + updateQuery + \"]\");    PreparedStatement updatePs=databaseConnection.prepareStatement(updateQuery);    databaseConnection.setAutoCommit(false);    logger.debug(\"Auto-commit false. Begin transaction!\");    int pos=1;    for (    String key : lstFields.keySet()) {      String value=lstFields.get(key);      updatePs.setObject(pos,value);      pos++;    }    updatePs.setObject(pos,hierarchyNameOrig);    updatePs.executeUpdate();    logger.debug(\"Update query executed!\");    if (doUpdateRelationsMT) {      String columnNmT=AbstractJDBCDataset.encapsulateColumnName(HierarchyConstants.HIER_NM_T,dataSource);      String updateQueryRel=\"UPDATE \" + HierarchyConstants.REL_MASTER_TECH_TABLE_NAME + \" SET \"+ columnNmT+ \" = ? WHERE \"+ columnNmT+ \"= ?\";      logger.debug(\"The update query of relations is [\" + updateQuery + \"]\");      PreparedStatement updatePsRel=databaseConnection.prepareStatement(updateQueryRel);      updatePsRel.setObject(1,hierarchyNameNew);      updatePsRel.setObject(2,hierarchyNameOrig);      updatePsRel.executeUpdate();      logger.debug(\"Update query on realtions MT executed!\");    }    logger.debug(\"Executing commit. End transaction!\");    databaseConnection.commit();  } catch (  Throwable t) {    if (!databaseConnection.getAutoCommit() && databaseConnection != null && !databaseConnection.isClosed()) {      databaseConnection.rollback();    }    logger.error(\"An unexpected error occured while modifing custom hierarchy\");    throw new SpagoBIServiceException(\"An unexpected error occured while modifing custom hierarchy\",t);  } finally {    try {      if (databaseConnection != null && !databaseConnection.isClosed()) {        databaseConnection.close();      }    } catch (    SQLException sqle) {      throw new SpagoBIServiceException(\"An unexpected error occured while saving custom hierarchy structure\",sqle);    }  }  return \"{\\\"response\\\":\\\"ok\\\"}\";}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.service.rest.BackupService.modifyHierarchyBkps.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "modifyHierarchyBkps",
                        "code": "@POST @Path(\"/modifyHierarchyBkps\") @Produces(MediaType.APPLICATION_JSON + \"; charset=UTF-8\") @UserConstraint(functionalities={SpagoBIConstants.HIERARCHIES_MANAGEMENT}) public String modifyHierarchyBkps(@Context HttpServletRequest req) throws SQLException {  Connection databaseConnection=null;  try {    JSONObject requestVal=RestUtilities.readBodyAsJSONObject(req);    String dimension=requestVal.getString(\"dimension\");    String hierarchyNameNew=requestVal.getString(\"HIER_NM\");    String hierarchyNameOrig=requestVal.getString(\"HIER_NM_ORIG\");    Hierarchies hierarchies=HierarchiesSingleton.getInstance();    String hierarchyTable=hierarchies.getHierarchyTableName(dimension);    Hierarchy hierarchyFields=hierarchies.getHierarchy(dimension);    List<Field> generalMetadataFields=new ArrayList<Field>(hierarchyFields.getMetadataGeneralFields());    String dataSourceName=hierarchies.getDataSourceOfDimension(dimension);    IDataSourceDAO dataSourceDAO=DAOFactory.getDataSourceDAO();    IDataSource dataSource=dataSourceDAO.loadDataSourceByLabel(dataSourceName);    if (dataSource == null) {      throw new SpagoBIServiceException(\"An unexpected error occured while saving custom hierarchy\",\"No datasource found for saving hierarchy\");    }    LinkedHashMap<String,String> lstFields=new LinkedHashMap<String,String>();    StringBuffer columnsBuffer=new StringBuffer(\" \");    for (int i=0, l=generalMetadataFields.size(); i < l; i++) {      Field f=generalMetadataFields.get(i);      String key=f.getId();      String value=(!requestVal.isNull(key)) ? requestVal.getString(key) : null;      if (key != null && value != null) {        lstFields.put(key,value);        String sep=(i < l - 1) ? \"= ?, \" : \"= ? \";        String column=AbstractJDBCDataset.encapsulateColumnName(f.getId(),dataSource);        columnsBuffer.append(column + sep);      }    }    String columns=columnsBuffer.toString();    if (columns.trim().endsWith(\",\"))     columns=columns.substring(0,columns.lastIndexOf(\",\"));    String hierNameColumn=AbstractJDBCDataset.encapsulateColumnName(HierarchyConstants.HIER_NM,dataSource);    databaseConnection=dataSource.getConnection();    Statement stmt=databaseConnection.createStatement();    boolean doUpdateRelationsMT=false;    if (!hierarchyNameNew.equalsIgnoreCase(hierarchyNameOrig)) {      String selectQuery=\"SELECT count(*) as num FROM \" + hierarchyTable + \" WHERE  HIER_NM = ? \";      PreparedStatement selectPs=databaseConnection.prepareStatement(selectQuery);      selectPs.setString(1,hierarchyNameNew);      ResultSet rs=selectPs.executeQuery();      if (rs.next()) {        String count=rs.getString(\"num\");        if (Integer.valueOf(count) > 0) {          logger.error(\"A hierarchy with name \" + hierarchyNameNew + \"  already exists. Change name.\");          throw new SpagoBIServiceException(\"\",\"A hierarchy with name \" + hierarchyNameNew + \"  already exists. Change name.\");        }      }      doUpdateRelationsMT=true;    }    String updateQuery=\"UPDATE \" + hierarchyTable + \" SET \"+ columns+ \" WHERE \"+ hierNameColumn+ \"= ?\";    logger.debug(\"The update query is [\" + updateQuery + \"]\");    PreparedStatement updatePs=databaseConnection.prepareStatement(updateQuery);    databaseConnection.setAutoCommit(false);    logger.debug(\"Auto-commit false. Begin transaction!\");    int pos=1;    for (    String key : lstFields.keySet()) {      String value=lstFields.get(key);      updatePs.setObject(pos,value);      pos++;    }    updatePs.setObject(pos,hierarchyNameOrig);    updatePs.executeUpdate();    logger.debug(\"Update query executed!\");    modifyHierarchyBkps_extraction_2(databaseConnection,hierarchyNameNew,hierarchyNameOrig,dataSource,doUpdateRelationsMT,updateQuery);  } catch (  Throwable t) {    if (!databaseConnection.getAutoCommit() && databaseConnection != null && !databaseConnection.isClosed()) {      databaseConnection.rollback();    }    logger.error(\"An unexpected error occured while modifing custom hierarchy\");    throw new SpagoBIServiceException(\"An unexpected error occured while modifing custom hierarchy\",t);  } finally {    try {      if (databaseConnection != null && !databaseConnection.isClosed()) {        databaseConnection.close();      }    } catch (    SQLException sqle) {      throw new SpagoBIServiceException(\"An unexpected error occured while saving custom hierarchy structure\",sqle);    }  }  return \"{\\\"response\\\":\\\"ok\\\"}\";}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.service.rest.BackupService.modifyHierarchyBkps.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "modifyHierarchyBkps",
                        "code": "@POST @Path(\"/modifyHierarchyBkps\") @Produces(MediaType.APPLICATION_JSON + \"; charset=UTF-8\") @UserConstraint(functionalities={SpagoBIConstants.HIERARCHIES_MANAGEMENT}) public String modifyHierarchyBkps(@Context HttpServletRequest req) throws SQLException {  Connection databaseConnection=null;  try {    JSONObject requestVal=RestUtilities.readBodyAsJSONObject(req);    String dimension=requestVal.getString(\"dimension\");    String hierarchyNameNew=requestVal.getString(\"HIER_NM\");    String hierarchyNameOrig=requestVal.getString(\"HIER_NM_ORIG\");    Hierarchies hierarchies=HierarchiesSingleton.getInstance();    String hierarchyTable=hierarchies.getHierarchyTableName(dimension);    Hierarchy hierarchyFields=hierarchies.getHierarchy(dimension);    List<Field> generalMetadataFields=new ArrayList<Field>(hierarchyFields.getMetadataGeneralFields());    String dataSourceName=hierarchies.getDataSourceOfDimension(dimension);    IDataSourceDAO dataSourceDAO=DAOFactory.getDataSourceDAO();    IDataSource dataSource=dataSourceDAO.loadDataSourceByLabel(dataSourceName);    if (dataSource == null) {      throw new SpagoBIServiceException(\"An unexpected error occured while saving custom hierarchy\",\"No datasource found for saving hierarchy\");    }    LinkedHashMap<String,String> lstFields=new LinkedHashMap<String,String>();    String columns=modifyHierarchyBkps_extraction_1(requestVal,generalMetadataFields,dataSource,lstFields);    String hierNameColumn=AbstractJDBCDataset.encapsulateColumnName(HierarchyConstants.HIER_NM,dataSource);    databaseConnection=dataSource.getConnection();    Statement stmt=databaseConnection.createStatement();    boolean doUpdateRelationsMT=false;    if (!hierarchyNameNew.equalsIgnoreCase(hierarchyNameOrig)) {      String selectQuery=\"SELECT count(*) as num FROM \" + hierarchyTable + \" WHERE  HIER_NM = ? \";      PreparedStatement selectPs=databaseConnection.prepareStatement(selectQuery);      selectPs.setString(1,hierarchyNameNew);      ResultSet rs=selectPs.executeQuery();      if (rs.next()) {        String count=rs.getString(\"num\");        if (Integer.valueOf(count) > 0) {          logger.error(\"A hierarchy with name \" + hierarchyNameNew + \"  already exists. Change name.\");          throw new SpagoBIServiceException(\"\",\"A hierarchy with name \" + hierarchyNameNew + \"  already exists. Change name.\");        }      }      doUpdateRelationsMT=true;    }    String updateQuery=\"UPDATE \" + hierarchyTable + \" SET \"+ columns+ \" WHERE \"+ hierNameColumn+ \"= ?\";    logger.debug(\"The update query is [\" + updateQuery + \"]\");    PreparedStatement updatePs=databaseConnection.prepareStatement(updateQuery);    databaseConnection.setAutoCommit(false);    logger.debug(\"Auto-commit false. Begin transaction!\");    int pos=1;    for (    String key : lstFields.keySet()) {      String value=lstFields.get(key);      updatePs.setObject(pos,value);      pos++;    }    updatePs.setObject(pos,hierarchyNameOrig);    updatePs.executeUpdate();    logger.debug(\"Update query executed!\");    modifyHierarchyBkps_extraction_2(databaseConnection,hierarchyNameNew,hierarchyNameOrig,dataSource,doUpdateRelationsMT,updateQuery);  } catch (  Throwable t) {    if (!databaseConnection.getAutoCommit() && databaseConnection != null && !databaseConnection.isClosed()) {      databaseConnection.rollback();    }    logger.error(\"An unexpected error occured while modifing custom hierarchy\");    throw new SpagoBIServiceException(\"An unexpected error occured while modifing custom hierarchy\",t);  } finally {    try {      if (databaseConnection != null && !databaseConnection.isClosed()) {        databaseConnection.close();      }    } catch (    SQLException sqle) {      throw new SpagoBIServiceException(\"An unexpected error occured while saving custom hierarchy structure\",sqle);    }  }  return \"{\\\"response\\\":\\\"ok\\\"}\";}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.hierarchiesmanagement.service.rest.BackupService.modifyHierarchyBkps.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs": {
        "XExecuteBIDocumentJob": {
            "eventChecked": {
                "original": {
                    "method_name": "eventChecked",
                    "code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      if (sbiWsEvents.size() != 0) {        Date attDate=new Date();        for (        SbiWsEvent sb : sbiWsEvents) {          if (sb.getTakeChargeDate() == null) {            sb.setTakeChargeDate(attDate);            wsEventsDao.updateEvent(sb);          }        }        eventSolved=true;      }    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          IRecord returnVal=dataStore.getRecordAt(0);          if (returnVal != null) {            Object value=returnVal.getFieldAt(0).getValue();            String execFlag=jobExecutionContext.getTrigger().getJobDataMap().getString(\"execFlag\");            Boolean exf=execFlag == null ? false : Boolean.parseBoolean(execFlag);            boolean validDS=(value.toString().equals(\"1\") || value.toString().equals(\"true\")) ? true : false;            if (validDS && !exf) {              jobExecutionContext.getTrigger().getJobDataMap().put(\"execFlag\",\"true\");              StdSchedulerFactory.getDefaultScheduler().rescheduleJob(jobExecutionContext.getTrigger().getName(),jobExecutionContext.getTrigger().getGroup(),jobExecutionContext.getTrigger());              eventSolved=true;            } else             if (!validDS && exf) {              jobExecutionContext.getTrigger().getJobDataMap().put(\"execFlag\",\"false\");              StdSchedulerFactory.getDefaultScheduler().rescheduleJob(jobExecutionContext.getTrigger().getName(),jobExecutionContext.getTrigger().getGroup(),jobExecutionContext.getTrigger());            }          }        }      }    }  }  return eventSolved;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs.XExecuteBIDocumentJob.eventChecked.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "eventChecked",
                        "code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      if (sbiWsEvents.size() != 0) {        Date attDate=new Date();        for (        SbiWsEvent sb : sbiWsEvents) {          if (sb.getTakeChargeDate() == null) {            sb.setTakeChargeDate(attDate);            wsEventsDao.updateEvent(sb);          }        }        eventSolved=true;      }    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          eventSolved=eventChecked_extraction_2(jobExecutionContext,eventSolved,dataStore);        }      }    }  }  return eventSolved;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs.XExecuteBIDocumentJob.eventChecked.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "eventChecked",
                        "code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      eventSolved=eventChecked_extraction_1(eventSolved,wsEventsDao,sbiWsEvents);    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          eventSolved=eventChecked_extraction_2(jobExecutionContext,eventSolved,dataStore);        }      }    }  }  return eventSolved;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs.XExecuteBIDocumentJob.eventChecked.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.services": {
        "LovLookupAjaxModule": {
            "loadSpagoList": {
                "original": {
                    "method_name": "loadSpagoList",
                    "code": "private ListIFace loadSpagoList(SourceBean request,SourceBean response,Integer parId,String roleName) throws Exception {  logger.debug(\"IN\");  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  String parameterFieldName=(String)request.getAttribute(\"parameterFieldName\");  logger.debug(\"parameterFieldName=\" + parameterFieldName);  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  String valColName=\"\";  IParameterDAO pardao=DAOFactory.getParameterDAO();  Parameter par=pardao.loadForExecutionByParameterIDandRoleName(parId,roleName,false);  ModalitiesValue modVal=par.getModalityValue();  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  SessionContainer permanentSession=session.getPermanentContainer();  profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  SourceBean rowsSourceBean=null;  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    QueryDetail qd=QueryDetail.fromXML(looProvider);    valColName=qd.getValueColumnName();    String datasource=qd.getDataSource();    String statement=qd.getQueryDefinition();    try {      statement=StringUtilities.substituteProfileAttributesInString(statement,profile);      rowsSourceBean=(SourceBean)executeSelect(getRequestContainer(),getResponseContainer(),datasource,statement);    } catch (    Exception e) {      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      int startIndex=stacktrace.indexOf(\"java.sql.\");      int endIndex=stacktrace.indexOf(\"\\n\\tat \",startIndex);      if (endIndex == -1)       endIndex=stacktrace.indexOf(\" at \",startIndex);      if (startIndex != -1 && endIndex != -1)       response.setAttribute(\"errorMessage\",stacktrace.substring(startIndex,endIndex));      response.setAttribute(\"testExecuted\",\"false\");    }  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    valColName=fixlistDet.getValueColumnName();    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      if (!rowsSourceBean.getName().equalsIgnoreCase(\"ROWS\")) {        throw new Exception(\"The fix list is empty\");      } else       if (rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG).size() == 0) {        throw new Exception(\"The fix list is empty\");      }    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    valColName=scriptDetail.getValueColumnName();    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    valColName=javaClassDetail.getValueColumnName();    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  int count=0;  if (rowsSourceBean != null) {    List rows=rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG);    for (int i=0; i < rows.size(); i++) {      paginator.addRow(rows.get(i));      count++;    }  }  paginator.setPageSize(count);  list.setPaginator(paginator);  rowsSourceBean=list.getPaginator().getAll();  List colNames=new ArrayList();  List rows=null;  if (rowsSourceBean != null) {    rows=rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG);    if ((rows != null) && (rows.size() != 0)) {      SourceBean row=(SourceBean)rows.get(0);      List rowAttrs=row.getContainedAttributes();      Iterator rowAttrsIter=rowAttrs.iterator();      while (rowAttrsIter.hasNext()) {        SourceBeanAttribute rowAttr=(SourceBeanAttribute)rowAttrsIter.next();        colNames.add(rowAttr.getKey());      }    }  }  String moduleConfigStr=\"\";  moduleConfigStr+=\"<CONFIG>\";  moduleConfigStr+=\"\t<QUERIES/>\";  moduleConfigStr+=\"\t<COLUMNS>\";  if (colNames.size() == 0) {    moduleConfigStr+=\"\t<COLUMN name=\\\"No Result Found\\\" />\";  } else {    Iterator iterColNames=colNames.iterator();    while (iterColNames.hasNext()) {      String colName=(String)iterColNames.next();      moduleConfigStr+=\"\t<COLUMN name=\\\"\" + colName + \"\\\" />\";    }  }  moduleConfigStr+=\"\t</COLUMNS>\";  moduleConfigStr+=\"\t<CAPTIONS/>\";  moduleConfigStr+=\"\t<BUTTONS/>\";  moduleConfigStr+=\"</CONFIG>\";  SourceBean moduleConfig=SourceBean.fromXMLString(moduleConfigStr);  response.setAttribute(moduleConfig);  String valuefilter=(String)request.getAttribute(SpagoBIConstants.VALUE_FILTER);  if (valuefilter != null) {    String columnfilter=(String)request.getAttribute(SpagoBIConstants.COLUMN_FILTER);    String typeFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_FILTER);    String typeValueFilter=(String)request.getAttribute(SpagoBIConstants.TYPE_VALUE_FILTER);    list=DelegatedBasicListService.filterList(list,valuefilter,typeValueFilter,columnfilter,typeFilter,getResponseContainer().getErrorHandler());  }  response.setAttribute(SpagoBIConstants.PARAMETER_FIELD_NAME,parameterFieldName);  response.setAttribute(SpagoBIConstants.VALUE_COLUMN_NAME,valColName);  logger.debug(\"OUT\");  return list;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.services.LovLookupAjaxModule.loadSpagoList.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "loadSpagoList",
                        "code": "private ListIFace loadSpagoList(SourceBean request,SourceBean response,Integer parId,String roleName) throws Exception {  logger.debug(\"IN\");  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  String parameterFieldName=(String)request.getAttribute(\"parameterFieldName\");  logger.debug(\"parameterFieldName=\" + parameterFieldName);  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  String valColName=\"\";  IParameterDAO pardao=DAOFactory.getParameterDAO();  Parameter par=pardao.loadForExecutionByParameterIDandRoleName(parId,roleName,false);  ModalitiesValue modVal=par.getModalityValue();  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  SessionContainer permanentSession=session.getPermanentContainer();  profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  SourceBean rowsSourceBean=null;  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    QueryDetail qd=QueryDetail.fromXML(looProvider);    valColName=qd.getValueColumnName();    String datasource=qd.getDataSource();    String statement=qd.getQueryDefinition();    try {      statement=StringUtilities.substituteProfileAttributesInString(statement,profile);      rowsSourceBean=(SourceBean)executeSelect(getRequestContainer(),getResponseContainer(),datasource,statement);    } catch (    Exception e) {      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      int startIndex=stacktrace.indexOf(\"java.sql.\");      int endIndex=stacktrace.indexOf(\"\\n\\tat \",startIndex);      if (endIndex == -1)       endIndex=stacktrace.indexOf(\" at \",startIndex);      if (startIndex != -1 && endIndex != -1)       response.setAttribute(\"errorMessage\",stacktrace.substring(startIndex,endIndex));      response.setAttribute(\"testExecuted\",\"false\");    }  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    valColName=fixlistDet.getValueColumnName();    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      if (!rowsSourceBean.getName().equalsIgnoreCase(\"ROWS\")) {        throw new Exception(\"The fix list is empty\");      } else       if (rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG).size() == 0) {        throw new Exception(\"The fix list is empty\");      }    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    valColName=scriptDetail.getValueColumnName();    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    valColName=javaClassDetail.getValueColumnName();    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  list=loadSpagoList_extraction_2(request,response,parameterFieldName,paginator,list,valColName,rowsSourceBean);  logger.debug(\"OUT\");  return list;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.services.LovLookupAjaxModule.loadSpagoList.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "loadSpagoList",
                        "code": "private ListIFace loadSpagoList(SourceBean request,SourceBean response,Integer parId,String roleName) throws Exception {  logger.debug(\"IN\");  RequestContainer requestContainer=getRequestContainer();  SessionContainer session=requestContainer.getSessionContainer();  String parameterFieldName=(String)request.getAttribute(\"parameterFieldName\");  logger.debug(\"parameterFieldName=\" + parameterFieldName);  PaginatorIFace paginator=new GenericPaginator();  ListIFace list=new GenericList();  String valColName=\"\";  IParameterDAO pardao=DAOFactory.getParameterDAO();  Parameter par=pardao.loadForExecutionByParameterIDandRoleName(parId,roleName,false);  ModalitiesValue modVal=par.getModalityValue();  String looProvider=modVal.getLovProvider();  String typeLov=LovDetailFactory.getLovTypeCode(looProvider);  IEngUserProfile profile=null;  SessionContainer permanentSession=session.getPermanentContainer();  profile=(IEngUserProfile)permanentSession.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  SourceBean rowsSourceBean=null;  if (typeLov.equalsIgnoreCase(\"QUERY\")) {    QueryDetail qd=QueryDetail.fromXML(looProvider);    valColName=qd.getValueColumnName();    rowsSourceBean=loadSpagoList_extraction_1(response,profile,rowsSourceBean,qd);  } else   if (typeLov.equalsIgnoreCase(\"FIXED_LIST\")) {    FixedListDetail fixlistDet=FixedListDetail.fromXML(looProvider);    valColName=fixlistDet.getValueColumnName();    try {      String result=fixlistDet.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);      if (!rowsSourceBean.getName().equalsIgnoreCase(\"ROWS\")) {        throw new Exception(\"The fix list is empty\");      } else       if (rowsSourceBean.getAttributeAsList(DataRow.ROW_TAG).size() == 0) {        throw new Exception(\"The fix list is empty\");      }    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while converting fix lov into spago list\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing fix list lov\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"SCRIPT\")) {    ScriptDetail scriptDetail=ScriptDetail.fromXML(looProvider);    valColName=scriptDetail.getValueColumnName();    try {      String result=scriptDetail.getLovResult(profile,null,null,null);      rowsSourceBean=SourceBean.fromXMLString(result);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the script lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing script\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  } else   if (typeLov.equalsIgnoreCase(\"JAVA_CLASS\")) {    JavaClassDetail javaClassDetail=JavaClassDetail.fromXML(looProvider);    valColName=javaClassDetail.getValueColumnName();    try {      String javaClassName=javaClassDetail.getJavaClassName();      IJavaClassLov javaClassLov=(IJavaClassLov)Class.forName(javaClassName).newInstance();      String result=javaClassLov.getValues(profile);      rowsSourceBean=SourceBean.fromXMLString(result);    } catch (    Exception e) {      SpagoBITracer.major(SpagoBIConstants.NAME_MODULE,this.getClass().getName(),\"getList\",\"Error while executing the java class lov\",e);      String stacktrace=e.toString();      response.setAttribute(\"stacktrace\",stacktrace);      response.setAttribute(\"errorMessage\",\"Error while executing java class\");      response.setAttribute(\"testExecuted\",\"false\");      return list;    }  }  list=loadSpagoList_extraction_2(request,response,parameterFieldName,paginator,list,valColName,rowsSourceBean);  logger.debug(\"OUT\");  return list;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.services.LovLookupAjaxModule.loadSpagoList.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils": {
        "SchedulerUtilitiesV2": {
            "getJobTriggerFromJsonRequest": {
                "original": {
                    "method_name": "getJobTriggerFromJsonRequest",
                    "code": "public static JobTrigger getJobTriggerFromJsonRequest(JSONObject jsonObject,JSONArray jerr) throws Exception {  JobTrigger jobTrigger=new JobTrigger();  ISchedulerServiceSupplier schedulerService=SchedulerServiceSupplierFactory.getSupplier();  String jobDetail=schedulerService.getJobDefinition((String)jsonObject.opt(JobTrigger.JOB_NAME),(String)jsonObject.opt(JobTrigger.JOB_GROUP));  SourceBean jobDetailSB=SchedulerUtilities.getSBFromWebServiceResponse(jobDetail);  if (jobDetailSB == null) {    throw new Exception(\"Cannot recover job \" + (String)jsonObject.opt(JobTrigger.JOB_NAME));  }  JobInfo jobInfo=SchedulerUtilities.getJobInfoFromJobSourceBean(jobDetailSB);  jobTrigger.setJobInfo(jobInfo);  jobTrigger.setTriggerName((String)jsonObject.opt(JobTrigger.TRIGGER_NAME));  if (jobTrigger.getTriggerName() == null || jobTrigger.getTriggerName().trim().isEmpty()) {    jerr.put(\"Empty name\");  }  jobTrigger.setTriggerDescription((String)jsonObject.opt(JobTrigger.TRIGGER_DESCRIPTION));  jobTrigger.setStartDate(jsonObject.optString(JobTrigger.START_DATE));  jobTrigger.setStartTime(jsonObject.optString(JobTrigger.START_TIME));  boolean validStartDate=true;  boolean hasZonedStartTime=jsonObject.has(JobTrigger.ZONED_START_TIME);  if (!hasZonedStartTime) {    if (jobTrigger.getStartDate() == null || jobTrigger.getStartDate().trim().isEmpty()) {      jerr.put(\"Null or not Valid Start date\");      validStartDate=false;    }    if (jobTrigger.getStartTime() == null || jobTrigger.getStartTime().trim().isEmpty()) {      jerr.put(\"Null start time\");      validStartDate=false;    } else {      String[] tp=jobTrigger.getStartTime().split(\":\");      int h=Integer.parseInt(tp[0]);      int m=Integer.parseInt(tp[1]);      if (h < 0 || h > 23) {        jerr.put(\" start time hours not valid \");        validStartDate=false;      }      if (m < 0 || m > 59) {        jerr.put(\" start time minutes not valid \");        validStartDate=false;      }    }  }  jobTrigger.setEndDate(jsonObject.optString(JobTrigger.END_DATE));  jobTrigger.setEndTime(jsonObject.optString(JobTrigger.END_TIME));  boolean hasZonedEndTime=jsonObject.has(JobTrigger.ZONED_END_TIME);  if (!hasZonedEndTime) {    if (validStartDate && (jobTrigger.getEndDate() != null && !jobTrigger.getEndDate().equals(\"\"))) {      boolean validTime=true;      String[] tp=jobTrigger.getEndTime().split(\":\");      int h=Integer.parseInt(tp[0]);      int m=Integer.parseInt(tp[1]);      if (h < 0 || h > 23) {        jerr.put(\" end time hours not valid \");        validTime=false;      }      if (m < 0 || m > 59) {        jerr.put(\" end time minutes not valid \");        validTime=false;      }      if (validTime) {        SimpleDateFormat sdf=new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");        try {          Date dateStart=sdf.parse(jobTrigger.getStartDate() + \" \" + jobTrigger.getStartTime());          Date dateEnd=sdf.parse(jobTrigger.getEndDate() + \" \" + jobTrigger.getEndTime());          if (dateEnd.before(dateStart)) {            jerr.put(\" End time is before Start time  \");          }        } catch (        ParseException e) {          e.printStackTrace();        }      }    }  }  jobTrigger.setZonedStartTime(jsonObject.optString(JobTrigger.ZONED_START_TIME));  try {    jobTrigger.setZonedEndTime(jsonObject.getString(JobTrigger.ZONED_END_TIME));  } catch (  JSONException e) {  }  jobTrigger.setChrono(((JSONObject)jsonObject.opt(JobTrigger.CHRONO)).toString().replaceAll(\"\\\"\",\"'\"));  JSONArray ja=(JSONArray)jsonObject.opt(JobTrigger.DOCUMENTS);  Map<String,DispatchContext> saveOptions=getSaveOptionsFromRequest(ja,jerr);  jobTrigger.setSaveOptions(saveOptions);  return jobTrigger;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.getJobTriggerFromJsonRequest.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "getJobTriggerFromJsonRequest",
                        "code": "public static JobTrigger getJobTriggerFromJsonRequest(JSONObject jsonObject,JSONArray jerr) throws Exception {  JobTrigger jobTrigger=new JobTrigger();  ISchedulerServiceSupplier schedulerService=SchedulerServiceSupplierFactory.getSupplier();  String jobDetail=schedulerService.getJobDefinition((String)jsonObject.opt(JobTrigger.JOB_NAME),(String)jsonObject.opt(JobTrigger.JOB_GROUP));  SourceBean jobDetailSB=SchedulerUtilities.getSBFromWebServiceResponse(jobDetail);  if (jobDetailSB == null) {    throw new Exception(\"Cannot recover job \" + (String)jsonObject.opt(JobTrigger.JOB_NAME));  }  JobInfo jobInfo=SchedulerUtilities.getJobInfoFromJobSourceBean(jobDetailSB);  jobTrigger.setJobInfo(jobInfo);  jobTrigger.setTriggerName((String)jsonObject.opt(JobTrigger.TRIGGER_NAME));  if (jobTrigger.getTriggerName() == null || jobTrigger.getTriggerName().trim().isEmpty()) {    jerr.put(\"Empty name\");  }  jobTrigger.setTriggerDescription((String)jsonObject.opt(JobTrigger.TRIGGER_DESCRIPTION));  jobTrigger.setStartDate(jsonObject.optString(JobTrigger.START_DATE));  jobTrigger.setStartTime(jsonObject.optString(JobTrigger.START_TIME));  boolean validStartDate=true;  boolean hasZonedStartTime=jsonObject.has(JobTrigger.ZONED_START_TIME);  if (!hasZonedStartTime) {    if (jobTrigger.getStartDate() == null || jobTrigger.getStartDate().trim().isEmpty()) {      jerr.put(\"Null or not Valid Start date\");      validStartDate=false;    }    if (jobTrigger.getStartTime() == null || jobTrigger.getStartTime().trim().isEmpty()) {      jerr.put(\"Null start time\");      validStartDate=false;    } else {      String[] tp=jobTrigger.getStartTime().split(\":\");      int h=Integer.parseInt(tp[0]);      int m=Integer.parseInt(tp[1]);      if (h < 0 || h > 23) {        jerr.put(\" start time hours not valid \");        validStartDate=false;      }      if (m < 0 || m > 59) {        jerr.put(\" start time minutes not valid \");        validStartDate=false;      }    }  }  jobTrigger.setEndDate(jsonObject.optString(JobTrigger.END_DATE));  jobTrigger.setEndTime(jsonObject.optString(JobTrigger.END_TIME));  boolean hasZonedEndTime=jsonObject.has(JobTrigger.ZONED_END_TIME);  if (!hasZonedEndTime) {    if (validStartDate && (jobTrigger.getEndDate() != null && !jobTrigger.getEndDate().equals(\"\"))) {      boolean validTime=true;      String[] tp=jobTrigger.getEndTime().split(\":\");      int h=Integer.parseInt(tp[0]);      getJobTriggerFromJsonRequest_extraction_2(jerr,jobTrigger,validTime,tp,h);    }  }  jobTrigger.setZonedStartTime(jsonObject.optString(JobTrigger.ZONED_START_TIME));  try {    jobTrigger.setZonedEndTime(jsonObject.getString(JobTrigger.ZONED_END_TIME));  } catch (  JSONException e) {  }  jobTrigger.setChrono(((JSONObject)jsonObject.opt(JobTrigger.CHRONO)).toString().replaceAll(\"\\\"\",\"'\"));  JSONArray ja=(JSONArray)jsonObject.opt(JobTrigger.DOCUMENTS);  Map<String,DispatchContext> saveOptions=getSaveOptionsFromRequest(ja,jerr);  jobTrigger.setSaveOptions(saveOptions);  return jobTrigger;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.getJobTriggerFromJsonRequest.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "getJobTriggerFromJsonRequest",
                        "code": "public static JobTrigger getJobTriggerFromJsonRequest(JSONObject jsonObject,JSONArray jerr) throws Exception {  JobTrigger jobTrigger=new JobTrigger();  ISchedulerServiceSupplier schedulerService=SchedulerServiceSupplierFactory.getSupplier();  String jobDetail=schedulerService.getJobDefinition((String)jsonObject.opt(JobTrigger.JOB_NAME),(String)jsonObject.opt(JobTrigger.JOB_GROUP));  SourceBean jobDetailSB=SchedulerUtilities.getSBFromWebServiceResponse(jobDetail);  if (jobDetailSB == null) {    throw new Exception(\"Cannot recover job \" + (String)jsonObject.opt(JobTrigger.JOB_NAME));  }  JobInfo jobInfo=SchedulerUtilities.getJobInfoFromJobSourceBean(jobDetailSB);  jobTrigger.setJobInfo(jobInfo);  jobTrigger.setTriggerName((String)jsonObject.opt(JobTrigger.TRIGGER_NAME));  if (jobTrigger.getTriggerName() == null || jobTrigger.getTriggerName().trim().isEmpty()) {    jerr.put(\"Empty name\");  }  jobTrigger.setTriggerDescription((String)jsonObject.opt(JobTrigger.TRIGGER_DESCRIPTION));  jobTrigger.setStartDate(jsonObject.optString(JobTrigger.START_DATE));  jobTrigger.setStartTime(jsonObject.optString(JobTrigger.START_TIME));  boolean validStartDate=true;  boolean hasZonedStartTime=jsonObject.has(JobTrigger.ZONED_START_TIME);  if (!hasZonedStartTime) {    if (jobTrigger.getStartDate() == null || jobTrigger.getStartDate().trim().isEmpty()) {      jerr.put(\"Null or not Valid Start date\");      validStartDate=false;    }    validStartDate=getJobTriggerFromJsonRequest_extraction_1(jerr,jobTrigger,validStartDate);  }  jobTrigger.setEndDate(jsonObject.optString(JobTrigger.END_DATE));  jobTrigger.setEndTime(jsonObject.optString(JobTrigger.END_TIME));  boolean hasZonedEndTime=jsonObject.has(JobTrigger.ZONED_END_TIME);  if (!hasZonedEndTime) {    if (validStartDate && (jobTrigger.getEndDate() != null && !jobTrigger.getEndDate().equals(\"\"))) {      boolean validTime=true;      String[] tp=jobTrigger.getEndTime().split(\":\");      int h=Integer.parseInt(tp[0]);      getJobTriggerFromJsonRequest_extraction_2(jerr,jobTrigger,validTime,tp,h);    }  }  jobTrigger.setZonedStartTime(jsonObject.optString(JobTrigger.ZONED_START_TIME));  try {    jobTrigger.setZonedEndTime(jsonObject.getString(JobTrigger.ZONED_END_TIME));  } catch (  JSONException e) {  }  jobTrigger.setChrono(((JSONObject)jsonObject.opt(JobTrigger.CHRONO)).toString().replaceAll(\"\\\"\",\"'\"));  JSONArray ja=(JSONArray)jsonObject.opt(JobTrigger.DOCUMENTS);  Map<String,DispatchContext> saveOptions=getSaveOptionsFromRequest(ja,jerr);  jobTrigger.setSaveOptions(saveOptions);  return jobTrigger;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.getJobTriggerFromJsonRequest.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "isValidJobTrigger": {
                "original": {
                    "method_name": "isValidJobTrigger",
                    "code": "public static JSONObject isValidJobTrigger(JobTrigger jobt) throws JSONException {  JSONArray ja=new JSONArray();  if (jobt.getTriggerName() == null || jobt.getTriggerName().trim().isEmpty()) {    ja.put(\"Empty name\");  }  boolean validStartDate=true;  if (jobt.getStartDate() == null || jobt.getStartDate().trim().isEmpty()) {    ja.put(\"Null or not Valid Start date\");    validStartDate=false;  }  if (jobt.getStartTime() == null || jobt.getStartTime().trim().isEmpty()) {    ja.put(\"Null start time\");    validStartDate=false;  } else {    String[] tp=jobt.getStartTime().split(\":\");    int h=Integer.parseInt(tp[0]);    int m=Integer.parseInt(tp[1]);    if (h < 0 || h > 23) {      ja.put(\" start time hours not valid \");      validStartDate=false;    }    if (m < 0 || m > 59) {      ja.put(\" start time minutes not valid \");      validStartDate=false;    }  }  if (validStartDate && (jobt.getEndDate() != null && !jobt.getEndDate().equals(\"\"))) {    boolean validTime=true;    String[] tp=jobt.getEndTime().split(\":\");    int h=Integer.parseInt(tp[0]);    int m=Integer.parseInt(tp[1]);    if (h < 0 || h > 23) {      ja.put(\" end time hours not valid \");      validTime=false;    }    if (m < 0 || m > 59) {      ja.put(\" end time minutes not valid \");      validTime=false;    }    if (validTime) {      SimpleDateFormat sdf=new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");      try {        Date dateStart=sdf.parse(jobt.getStartDate() + \" \" + jobt.getStartTime());        Date dateEnd=sdf.parse(jobt.getEndDate() + \" \" + jobt.getEndTime());        if (dateEnd.before(dateStart)) {          ja.put(\" End time is before Start time  \");        }      } catch (      ParseException e) {        e.printStackTrace();      }    }  }  DateTimeFormatter dateTime=ISODateTimeFormat.dateTime();  String zonedStartTime=jobt.getZonedStartTime();  DateTime parsedStartTime=null;  if (zonedStartTime != null) {    try {      parsedStartTime=dateTime.parseDateTime(zonedStartTime);    } catch (    IllegalArgumentException e) {      ja.put(\" Zoned start time is not valid \");    }  }  String zonedEndTime=jobt.getZonedEndTime();  DateTime parsedEndTime=null;  if (zonedEndTime != null) {    try {      parsedEndTime=dateTime.parseDateTime(zonedEndTime);    } catch (    IllegalArgumentException e) {      ja.put(\" Zoned end time is not valid \");    }  }  if (parsedStartTime != null && parsedEndTime != null && parsedEndTime.isBefore(parsedStartTime)) {    ja.put(\" Zoned end time is before zoned start time \");  }  JSONObject jo=new JSONObject();  if (ja.length() >= 0) {    jo.put(\"Status\",\"NON OK\");    jo.put(\"Errors\",ja);  } else {    jo.put(\"Status\",\"OK\");  }  return jo;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.isValidJobTrigger.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "isValidJobTrigger",
                        "code": "public static JSONObject isValidJobTrigger(JobTrigger jobt) throws JSONException {  JSONArray ja=new JSONArray();  if (jobt.getTriggerName() == null || jobt.getTriggerName().trim().isEmpty()) {    ja.put(\"Empty name\");  }  boolean validStartDate=true;  if (jobt.getStartDate() == null || jobt.getStartDate().trim().isEmpty()) {    ja.put(\"Null or not Valid Start date\");    validStartDate=false;  }  if (jobt.getStartTime() == null || jobt.getStartTime().trim().isEmpty()) {    ja.put(\"Null start time\");    validStartDate=false;  } else {    String[] tp=jobt.getStartTime().split(\":\");    int h=Integer.parseInt(tp[0]);    int m=Integer.parseInt(tp[1]);    if (h < 0 || h > 23) {      ja.put(\" start time hours not valid \");      validStartDate=false;    }    if (m < 0 || m > 59) {      ja.put(\" start time minutes not valid \");      validStartDate=false;    }  }  if (validStartDate && (jobt.getEndDate() != null && !jobt.getEndDate().equals(\"\"))) {    boolean validTime=true;    String[] tp=jobt.getEndTime().split(\":\");    int h=Integer.parseInt(tp[0]);    int m=Integer.parseInt(tp[1]);    if (h < 0 || h > 23) {      ja.put(\" end time hours not valid \");      validTime=false;    }    if (m < 0 || m > 59) {      ja.put(\" end time minutes not valid \");      validTime=false;    }    if (validTime) {      SimpleDateFormat sdf=new SimpleDateFormat(\"dd/MM/yyyy hh:mm\");      try {        Date dateStart=sdf.parse(jobt.getStartDate() + \" \" + jobt.getStartTime());        Date dateEnd=sdf.parse(jobt.getEndDate() + \" \" + jobt.getEndTime());        if (dateEnd.before(dateStart)) {          ja.put(\" End time is before Start time  \");        }      } catch (      ParseException e) {        e.printStackTrace();      }    }  }  DateTimeFormatter dateTime=ISODateTimeFormat.dateTime();  String zonedStartTime=jobt.getZonedStartTime();  DateTime parsedStartTime=null;  JSONObject jo=isValidJobTrigger_extraction_2(jobt,ja,dateTime,zonedStartTime,parsedStartTime);  return jo;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.isValidJobTrigger.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "isValidJobTrigger",
                        "code": "public static JSONObject isValidJobTrigger(JobTrigger jobt) throws JSONException {  JSONArray ja=new JSONArray();  if (jobt.getTriggerName() == null || jobt.getTriggerName().trim().isEmpty()) {    ja.put(\"Empty name\");  }  boolean validStartDate=true;  if (jobt.getStartDate() == null || jobt.getStartDate().trim().isEmpty()) {    ja.put(\"Null or not Valid Start date\");    validStartDate=false;  }  if (jobt.getStartTime() == null || jobt.getStartTime().trim().isEmpty()) {    ja.put(\"Null start time\");    validStartDate=false;  } else {    String[] tp=jobt.getStartTime().split(\":\");    int h=Integer.parseInt(tp[0]);    int m=Integer.parseInt(tp[1]);    if (h < 0 || h > 23) {      ja.put(\" start time hours not valid \");      validStartDate=false;    }    if (m < 0 || m > 59) {      ja.put(\" start time minutes not valid \");      validStartDate=false;    }  }  if (validStartDate && (jobt.getEndDate() != null && !jobt.getEndDate().equals(\"\"))) {    boolean validTime=true;    String[] tp=jobt.getEndTime().split(\":\");    int h=Integer.parseInt(tp[0]);    int m=Integer.parseInt(tp[1]);    isValidJobTrigger_extraction_1(jobt,ja,validTime,h,m);  }  DateTimeFormatter dateTime=ISODateTimeFormat.dateTime();  String zonedStartTime=jobt.getZonedStartTime();  DateTime parsedStartTime=null;  JSONObject jo=isValidJobTrigger_extraction_2(jobt,ja,dateTime,zonedStartTime,parsedStartTime);  return jo;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.isValidJobTrigger.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "serializeSaveAsDistributionListOptions": {
                "original": {
                    "method_name": "serializeSaveAsDistributionListOptions",
                    "code": "private static String serializeSaveAsDistributionListOptions(DispatchContext dispatchContext,String uniqueDispatchContextName,JobTrigger triggerInfo,boolean runImmediately,IEngUserProfile profile) throws EMFUserError {  String saveOptString=\"\";  JobInfo jobInfo=triggerInfo.getJobInfo();  if (dispatchContext.isDistributionListDispatchChannelEnabled()) {    String xml=\"\";    if (!runImmediately) {      xml+=\"<SCHEDULE \";      xml+=\" jobName=\\\"\" + jobInfo.getJobName() + \"\\\" \";      xml+=\" triggerName=\\\"\" + triggerInfo.getTriggerName() + \"\\\" \";      xml+=\" startDate=\\\"\" + triggerInfo.getStartDate() + \"\\\" \";      xml+=\" startTime=\\\"\" + triggerInfo.getStartTime() + \"\\\" \";      xml+=\" chronString=\\\"\" + triggerInfo.getChrono() + \"\\\" \";      String enddate=triggerInfo.getEndDate();      String endtime=triggerInfo.getEndTime();      if (!enddate.trim().equals(\"\")) {        xml+=\" endDate=\\\"\" + enddate + \"\\\" \";        if (!endtime.trim().equals(\"\")) {          xml+=\" endTime=\\\"\" + endtime + \"\\\" \";        }      }      String zonedStartTime=triggerInfo.getZonedStartTime();      if (zonedStartTime != null) {        xml+=\" zonedStartTime=\\\"\" + zonedStartTime + \"\\\" \";      }      String zonedEndTime=triggerInfo.getZonedEndTime();      if (zonedEndTime != null) {        xml+=\" zonedEndTime=\\\"\" + zonedEndTime + \"\\\" \";      }      String repeatinterval=triggerInfo.getRepeatInterval();      if (!repeatinterval.trim().equals(\"\")) {        xml+=\" repeatInterval=\\\"\" + repeatinterval + \"\\\" \";      }      xml+=\">\";      String params=\"<PARAMETERS>\";      List biObjects=jobInfo.getDocuments();      Iterator iterbiobj=biObjects.iterator();      int index=0;      while (iterbiobj.hasNext()) {        index++;        BIObject biobj=(BIObject)iterbiobj.next();        String objpref=biobj.getId().toString() + \"__\" + new Integer(index).toString();        if (uniqueDispatchContextName.equals(objpref)) {          List pars=biobj.getDrivers();          Iterator iterPars=pars.iterator();          String queryString=\"\";          while (iterPars.hasNext()) {            BIObjectParameter biobjpar=(BIObjectParameter)iterPars.next();            String concatenatedValue=\"\";            List values=biobjpar.getParameterValues();            if (values != null) {              Iterator itervalues=values.iterator();              while (itervalues.hasNext()) {                String value=(String)itervalues.next();                concatenatedValue+=value + \",\";              }              if (concatenatedValue.length() > 0) {                concatenatedValue=concatenatedValue.substring(0,concatenatedValue.length() - 1);                queryString+=biobjpar.getParameterUrlName() + \"=\" + concatenatedValue+ \"%26\";              }            }          }          if (queryString.length() > 0) {            queryString=queryString.substring(0,queryString.length() - 3);          }          params+=\"<PARAMETER name=\\\"\" + biobj.getLabel() + \"__\"+ index+ \"\\\" value=\\\"\"+ queryString+ \"\\\" />\";        } else {          continue;        }      }      params+=\"</PARAMETERS>\";      xml+=params;      xml+=\"</SCHEDULE>\";    }    saveOptString+=\"sendtodl=true%26\";    List l=dispatchContext.getDlIds();    if (!l.isEmpty()) {      String dlIds=\"dlId=\";      int objId=dispatchContext.getBiobjId();      Iterator iter=l.iterator();      while (iter.hasNext()) {        Integer dlId=(Integer)iter.next();        try {          if (!runImmediately) {            IDistributionListDAO dao=DAOFactory.getDistributionListDAO();            dao.setUserProfile(profile);            DistributionList dl=dao.loadDistributionListById(dlId);            dao.insertDLforDocument(dl,objId,xml);          }        } catch (        Exception ex) {          throw new EMFUserError(EMFErrorSeverity.ERROR,100);        }        if (iter.hasNext()) {          dlIds+=dlId.intValue() + \",\";        } else {          dlIds+=dlId.intValue();        }      }      saveOptString+=dlIds + \"%26\";    }  }  return saveOptString;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.serializeSaveAsDistributionListOptions.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "serializeSaveAsDistributionListOptions",
                        "code": "private static String serializeSaveAsDistributionListOptions(DispatchContext dispatchContext,String uniqueDispatchContextName,JobTrigger triggerInfo,boolean runImmediately,IEngUserProfile profile) throws EMFUserError {  String saveOptString=\"\";  JobInfo jobInfo=triggerInfo.getJobInfo();  if (dispatchContext.isDistributionListDispatchChannelEnabled()) {    String xml=\"\";    if (!runImmediately) {      xml+=\"<SCHEDULE \";      xml+=\" jobName=\\\"\" + jobInfo.getJobName() + \"\\\" \";      xml+=\" triggerName=\\\"\" + triggerInfo.getTriggerName() + \"\\\" \";      xml+=\" startDate=\\\"\" + triggerInfo.getStartDate() + \"\\\" \";      xml+=\" startTime=\\\"\" + triggerInfo.getStartTime() + \"\\\" \";      xml+=\" chronString=\\\"\" + triggerInfo.getChrono() + \"\\\" \";      String enddate=triggerInfo.getEndDate();      String endtime=triggerInfo.getEndTime();      if (!enddate.trim().equals(\"\")) {        xml+=\" endDate=\\\"\" + enddate + \"\\\" \";        if (!endtime.trim().equals(\"\")) {          xml+=\" endTime=\\\"\" + endtime + \"\\\" \";        }      }      String zonedStartTime=triggerInfo.getZonedStartTime();      if (zonedStartTime != null) {        xml+=\" zonedStartTime=\\\"\" + zonedStartTime + \"\\\" \";      }      String zonedEndTime=triggerInfo.getZonedEndTime();      if (zonedEndTime != null) {        xml+=\" zonedEndTime=\\\"\" + zonedEndTime + \"\\\" \";      }      String repeatinterval=triggerInfo.getRepeatInterval();      if (!repeatinterval.trim().equals(\"\")) {        xml+=\" repeatInterval=\\\"\" + repeatinterval + \"\\\" \";      }      xml+=\">\";      String params=\"<PARAMETERS>\";      List biObjects=jobInfo.getDocuments();      Iterator iterbiobj=biObjects.iterator();      int index=0;      while (iterbiobj.hasNext()) {        index++;        BIObject biobj=(BIObject)iterbiobj.next();        String objpref=biobj.getId().toString() + \"__\" + new Integer(index).toString();        if (uniqueDispatchContextName.equals(objpref)) {          List pars=biobj.getDrivers();          Iterator iterPars=pars.iterator();          String queryString=\"\";          while (iterPars.hasNext()) {            BIObjectParameter biobjpar=(BIObjectParameter)iterPars.next();            String concatenatedValue=\"\";            List values=biobjpar.getParameterValues();            if (values != null) {              Iterator itervalues=values.iterator();              while (itervalues.hasNext()) {                String value=(String)itervalues.next();                concatenatedValue+=value + \",\";              }              if (concatenatedValue.length() > 0) {                concatenatedValue=concatenatedValue.substring(0,concatenatedValue.length() - 1);                queryString+=biobjpar.getParameterUrlName() + \"=\" + concatenatedValue+ \"%26\";              }            }          }          if (queryString.length() > 0) {            queryString=queryString.substring(0,queryString.length() - 3);          }          params+=\"<PARAMETER name=\\\"\" + biobj.getLabel() + \"__\"+ index+ \"\\\" value=\\\"\"+ queryString+ \"\\\" />\";        } else {          continue;        }      }      params+=\"</PARAMETERS>\";      xml+=params;      xml+=\"</SCHEDULE>\";    }    saveOptString+=\"sendtodl=true%26\";    List l=dispatchContext.getDlIds();    if (!l.isEmpty()) {      String dlIds=\"dlId=\";      int objId=dispatchContext.getBiobjId();      dlIds=serializeSaveAsDistributionListOptions_extraction_3(runImmediately,profile,xml,l,dlIds,objId);      saveOptString+=dlIds + \"%26\";    }  }  return saveOptString;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.serializeSaveAsDistributionListOptions.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "serializeSaveAsDistributionListOptions",
                        "code": "private static String serializeSaveAsDistributionListOptions(DispatchContext dispatchContext,String uniqueDispatchContextName,JobTrigger triggerInfo,boolean runImmediately,IEngUserProfile profile) throws EMFUserError {  String saveOptString=\"\";  JobInfo jobInfo=triggerInfo.getJobInfo();  if (dispatchContext.isDistributionListDispatchChannelEnabled()) {    String xml=\"\";    if (!runImmediately) {      xml+=\"<SCHEDULE \";      xml+=\" jobName=\\\"\" + jobInfo.getJobName() + \"\\\" \";      xml+=\" triggerName=\\\"\" + triggerInfo.getTriggerName() + \"\\\" \";      xml+=\" startDate=\\\"\" + triggerInfo.getStartDate() + \"\\\" \";      xml+=\" startTime=\\\"\" + triggerInfo.getStartTime() + \"\\\" \";      xml+=\" chronString=\\\"\" + triggerInfo.getChrono() + \"\\\" \";      String enddate=triggerInfo.getEndDate();      String endtime=triggerInfo.getEndTime();      if (!enddate.trim().equals(\"\")) {        xml+=\" endDate=\\\"\" + enddate + \"\\\" \";        if (!endtime.trim().equals(\"\")) {          xml+=\" endTime=\\\"\" + endtime + \"\\\" \";        }      }      String zonedStartTime=triggerInfo.getZonedStartTime();      if (zonedStartTime != null) {        xml+=\" zonedStartTime=\\\"\" + zonedStartTime + \"\\\" \";      }      String zonedEndTime=triggerInfo.getZonedEndTime();      if (zonedEndTime != null) {        xml+=\" zonedEndTime=\\\"\" + zonedEndTime + \"\\\" \";      }      String repeatinterval=triggerInfo.getRepeatInterval();      if (!repeatinterval.trim().equals(\"\")) {        xml+=\" repeatInterval=\\\"\" + repeatinterval + \"\\\" \";      }      xml+=\">\";      String params=\"<PARAMETERS>\";      List biObjects=jobInfo.getDocuments();      Iterator iterbiobj=biObjects.iterator();      int index=0;      while (iterbiobj.hasNext()) {        index++;        BIObject biobj=(BIObject)iterbiobj.next();        String objpref=biobj.getId().toString() + \"__\" + new Integer(index).toString();        if (uniqueDispatchContextName.equals(objpref)) {          String queryString=serializeSaveAsDistributionListOptions_extraction_2(biobj);          params+=\"<PARAMETER name=\\\"\" + biobj.getLabel() + \"__\"+ index+ \"\\\" value=\\\"\"+ queryString+ \"\\\" />\";        } else {          continue;        }      }      params+=\"</PARAMETERS>\";      xml+=params;      xml+=\"</SCHEDULE>\";    }    saveOptString+=\"sendtodl=true%26\";    List l=dispatchContext.getDlIds();    if (!l.isEmpty()) {      String dlIds=\"dlId=\";      int objId=dispatchContext.getBiobjId();      dlIds=serializeSaveAsDistributionListOptions_extraction_3(runImmediately,profile,xml,l,dlIds,objId);      saveOptString+=dlIds + \"%26\";    }  }  return saveOptString;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.serializeSaveAsDistributionListOptions.Extraction2.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "serializeSaveAsDistributionListOptions",
                        "code": "private static String serializeSaveAsDistributionListOptions(DispatchContext dispatchContext,String uniqueDispatchContextName,JobTrigger triggerInfo,boolean runImmediately,IEngUserProfile profile) throws EMFUserError {  String saveOptString=\"\";  JobInfo jobInfo=triggerInfo.getJobInfo();  if (dispatchContext.isDistributionListDispatchChannelEnabled()) {    String xml=\"\";    if (!runImmediately) {      xml=serializeSaveAsDistributionListOptions_extraction_1(triggerInfo,jobInfo,xml);      xml+=\">\";      String params=\"<PARAMETERS>\";      List biObjects=jobInfo.getDocuments();      Iterator iterbiobj=biObjects.iterator();      int index=0;      while (iterbiobj.hasNext()) {        index++;        BIObject biobj=(BIObject)iterbiobj.next();        String objpref=biobj.getId().toString() + \"__\" + new Integer(index).toString();        if (uniqueDispatchContextName.equals(objpref)) {          String queryString=serializeSaveAsDistributionListOptions_extraction_2(biobj);          params+=\"<PARAMETER name=\\\"\" + biobj.getLabel() + \"__\"+ index+ \"\\\" value=\\\"\"+ queryString+ \"\\\" />\";        } else {          continue;        }      }      params+=\"</PARAMETERS>\";      xml+=params;      xml+=\"</SCHEDULE>\";    }    saveOptString+=\"sendtodl=true%26\";    List l=dispatchContext.getDlIds();    if (!l.isEmpty()) {      String dlIds=\"dlId=\";      int objId=dispatchContext.getBiobjId();      dlIds=serializeSaveAsDistributionListOptions_extraction_3(runImmediately,profile,xml,l,dlIds,objId);      saveOptString+=dlIds + \"%26\";    }  }  return saveOptString;}",
                        "extraction_name": "Extraction3",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.utils.SchedulerUtilitiesV2.serializeSaveAsDistributionListOptions.Extraction3.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "knowage-core.src.main.java.it.eng.spagobi.wapp.services": {
        "DetailMenuModule": {
            "recoverMenuDetails": {
                "original": {
                    "method_name": "recoverMenuDetails",
                    "code": "private Menu recoverMenuDetails(SourceBean request,String mod) throws EMFUserError, SourceBeanException {  String name=(String)request.getAttribute(\"name\");  name=name.trim();  String description=(String)request.getAttribute(\"description\");  description=description.trim();  List attrsList=request.getAttributeAsList(DetailMenuModule.ROLES);  Role[] roles=new Role[attrsList.size()];  for (int i=0; i < roles.length; i++) {    String idRoleStr=(String)attrsList.get(i);    roles[i]=DAOFactory.getRoleDAO().loadByID(new Integer(idRoleStr));  }  Menu menu=null;  if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {    String idParent=(String)request.getAttribute(DetailMenuModule.PARENT_ID);    menu=new Menu();    menu.setHasChildren(false);    if (idParent != null)     menu.setParentId(Integer.valueOf(idParent)); else     menu.setParentId(null);  } else   if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_MOD)) {    String idMenu=(String)request.getAttribute(DetailMenuModule.MENU_ID);    menu=DAOFactory.getMenuDAO().loadMenuByID(Integer.valueOf(idMenu));  }  menu.setName(name);  menu.setDescr(description);  menu.setRoles(roles);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"NAME\",name);  SessionContainer permSess=getRequestContainer().getSessionContainer().getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permSess.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  if (name.equalsIgnoreCase(\"\")) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MENU.ADD/MODIFY\",logParam,\"OK\");    } catch (    Exception e) {      e.printStackTrace();    }    throw new EMFUserError(EMFErrorSeverity.ERROR,\"10003\",messageBundle);  }  String nodeContent=(String)request.getAttribute(\"nodeContent\");  if (\"nodeDocument\".equals(nodeContent)) {    String objectId=(String)request.getAttribute(DetailMenuModule.MENU_OBJ);    menu.setObjId(Integer.valueOf(objectId));    String objParameters=(String)request.getAttribute(\"objParameters\");    if (objParameters != null && !objParameters.trim().equals(\"\")) {      menu.setObjParameters(objParameters);    } else {      menu.setObjParameters(null);    }    String subobjectName=(String)request.getAttribute(\"subobjectName\");    if (subobjectName != null && !subobjectName.trim().equals(\"\")) {      menu.setSubObjName(subobjectName);    } else {      menu.setSubObjName(null);    }    String snapshotName=(String)request.getAttribute(\"snapshotName\");    if (snapshotName != null && !snapshotName.trim().equals(\"\")) {      menu.setSnapshotName(snapshotName);    } else {      menu.setSnapshotName(null);    }    String snapshotHistoryStr=(String)request.getAttribute(\"snapshotHistory\");    if (snapshotHistoryStr != null && !snapshotHistoryStr.trim().equals(\"\")) {      Integer snapshotHistory=null;      try {        snapshotHistory=new Integer(Integer.parseInt(snapshotHistoryStr));      } catch (      Exception e) {        logger.error(\"Error while parsing [\" + snapshotHistoryStr + \"] into an integer\",e);        snapshotHistory=new Integer(0);      }      menu.setSnapshotHistory(snapshotHistory);    } else {      menu.setSnapshotHistory(null);    }    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    String hideToolbarB=(String)request.getAttribute(\"hideToolbar\");    String hideSlidersB=(String)request.getAttribute(\"hideSliders\");    if (hideToolbarB != null)     menu.setHideToolbar(Boolean.valueOf(hideToolbarB).booleanValue()); else     menu.setHideToolbar(false);    if (hideSlidersB != null)     menu.setHideSliders(Boolean.valueOf(hideSlidersB).booleanValue()); else     menu.setHideSliders(false);  } else   if (\"nodeStaticPage\".equals(nodeContent)) {    menu.setExternalApplicationUrl(null);    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);    String staticPage=(String)request.getAttribute(\"staticpage\");    menu.setStaticPage(staticPage);  } else   if (\"nodeFunctionality\".equals(nodeContent)) {    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);    String functionality=(String)request.getAttribute(\"functionality\");    menu.setFunctionality(functionality);    if (functionality.equals(SpagoBIConstants.DOCUMENT_BROWSER_USER)) {      String initialPath=(String)request.getAttribute(\"initialPath\");      menu.setInitialPath(initialPath);    } else {      menu.setInitialPath(null);    }  } else   if (\"nodeExternalApp\".equals(nodeContent)) {    String url=(String)request.getAttribute(DetailMenuModule.EXT_APP_URL);    menu.setExternalApplicationUrl(url);    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);  } else {    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);  }  String viewIconsB=(String)request.getAttribute(\"viewicons\");  if (viewIconsB != null)   menu.setViewIcons(Boolean.valueOf(viewIconsB).booleanValue()); else   menu.setViewIcons(false);  return menu;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "knowage-core.src.main.java.it.eng.spagobi.wapp.services.DetailMenuModule.recoverMenuDetails.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "recoverMenuDetails",
                        "code": "private Menu recoverMenuDetails(SourceBean request,String mod) throws EMFUserError, SourceBeanException {  String name=(String)request.getAttribute(\"name\");  name=name.trim();  String description=(String)request.getAttribute(\"description\");  description=description.trim();  List attrsList=request.getAttributeAsList(DetailMenuModule.ROLES);  Role[] roles=new Role[attrsList.size()];  for (int i=0; i < roles.length; i++) {    String idRoleStr=(String)attrsList.get(i);    roles[i]=DAOFactory.getRoleDAO().loadByID(new Integer(idRoleStr));  }  Menu menu=null;  if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_INS)) {    String idParent=(String)request.getAttribute(DetailMenuModule.PARENT_ID);    menu=new Menu();    menu.setHasChildren(false);    if (idParent != null)     menu.setParentId(Integer.valueOf(idParent)); else     menu.setParentId(null);  } else   if (mod.equalsIgnoreCase(AdmintoolsConstants.DETAIL_MOD)) {    String idMenu=(String)request.getAttribute(DetailMenuModule.MENU_ID);    menu=DAOFactory.getMenuDAO().loadMenuByID(Integer.valueOf(idMenu));  }  menu.setName(name);  menu.setDescr(description);  menu.setRoles(roles);  HashMap<String,String> logParam=new HashMap();  logParam.put(\"NAME\",name);  SessionContainer permSess=getRequestContainer().getSessionContainer().getPermanentContainer();  IEngUserProfile profile=(IEngUserProfile)permSess.getAttribute(IEngUserProfile.ENG_USER_PROFILE);  if (name.equalsIgnoreCase(\"\")) {    try {      AuditLogUtilities.updateAudit(getHttpRequest(),profile,\"MENU.ADD/MODIFY\",logParam,\"OK\");    } catch (    Exception e) {      e.printStackTrace();    }    throw new EMFUserError(EMFErrorSeverity.ERROR,\"10003\",messageBundle);  }  String nodeContent=(String)request.getAttribute(\"nodeContent\");  if (\"nodeDocument\".equals(nodeContent)) {    String objectId=(String)request.getAttribute(DetailMenuModule.MENU_OBJ);    menu.setObjId(Integer.valueOf(objectId));    String objParameters=(String)request.getAttribute(\"objParameters\");    if (objParameters != null && !objParameters.trim().equals(\"\")) {      menu.setObjParameters(objParameters);    } else {      menu.setObjParameters(null);    }    String subobjectName=(String)request.getAttribute(\"subobjectName\");    recoverMenuDetails_extraction_2(request,menu,subobjectName);  } else   if (\"nodeStaticPage\".equals(nodeContent)) {    menu.setExternalApplicationUrl(null);    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);    String staticPage=(String)request.getAttribute(\"staticpage\");    menu.setStaticPage(staticPage);  } else   if (\"nodeFunctionality\".equals(nodeContent)) {    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);    String functionality=(String)request.getAttribute(\"functionality\");    menu.setFunctionality(functionality);    if (functionality.equals(SpagoBIConstants.DOCUMENT_BROWSER_USER)) {      String initialPath=(String)request.getAttribute(\"initialPath\");      menu.setInitialPath(initialPath);    } else {      menu.setInitialPath(null);    }  } else   if (\"nodeExternalApp\".equals(nodeContent)) {    String url=(String)request.getAttribute(DetailMenuModule.EXT_APP_URL);    menu.setExternalApplicationUrl(url);    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);  } else {    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);  }  String viewIconsB=(String)request.getAttribute(\"viewicons\");  if (viewIconsB != null)   menu.setViewIcons(Boolean.valueOf(viewIconsB).booleanValue()); else   menu.setViewIcons(false);  return menu;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.wapp.services.DetailMenuModule.recoverMenuDetails.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "recoverMenuDetails",
                        "code": "private Menu recoverMenuDetails(SourceBean request,String mod) throws EMFUserError, SourceBeanException {  Menu menu=recoverMenuDetails_extraction_1(request,mod);  String nodeContent=(String)request.getAttribute(\"nodeContent\");  if (\"nodeDocument\".equals(nodeContent)) {    String objectId=(String)request.getAttribute(DetailMenuModule.MENU_OBJ);    menu.setObjId(Integer.valueOf(objectId));    String objParameters=(String)request.getAttribute(\"objParameters\");    if (objParameters != null && !objParameters.trim().equals(\"\")) {      menu.setObjParameters(objParameters);    } else {      menu.setObjParameters(null);    }    String subobjectName=(String)request.getAttribute(\"subobjectName\");    recoverMenuDetails_extraction_2(request,menu,subobjectName);  } else   if (\"nodeStaticPage\".equals(nodeContent)) {    menu.setExternalApplicationUrl(null);    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);    String staticPage=(String)request.getAttribute(\"staticpage\");    menu.setStaticPage(staticPage);  } else   if (\"nodeFunctionality\".equals(nodeContent)) {    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);    String functionality=(String)request.getAttribute(\"functionality\");    menu.setFunctionality(functionality);    if (functionality.equals(SpagoBIConstants.DOCUMENT_BROWSER_USER)) {      String initialPath=(String)request.getAttribute(\"initialPath\");      menu.setInitialPath(initialPath);    } else {      menu.setInitialPath(null);    }  } else   if (\"nodeExternalApp\".equals(nodeContent)) {    String url=(String)request.getAttribute(DetailMenuModule.EXT_APP_URL);    menu.setExternalApplicationUrl(url);    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);  } else {    menu.setObjId(null);    menu.setSubObjName(null);    menu.setObjParameters(null);    menu.setSnapshotName(null);    menu.setSnapshotHistory(null);    menu.setStaticPage(null);    menu.setExternalApplicationUrl(null);    menu.setFunctionality(null);    menu.setInitialPath(null);    menu.setHideToolbar(false);    menu.setHideSliders(false);  }  String viewIconsB=(String)request.getAttribute(\"viewicons\");  if (viewIconsB != null)   menu.setViewIcons(Boolean.valueOf(viewIconsB).booleanValue()); else   menu.setViewIcons(false);  return menu;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "knowage-core.src.main.java.it.eng.spagobi.wapp.services.DetailMenuModule.recoverMenuDetails.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "MOEAFramework.src.org.moeaframework.algorithm": {
        "CMAES": {
            "samplePopulation": {
                "original": {
                    "method_name": "samplePopulation",
                    "code": "/**  * Samples a new population. */private void samplePopulation(){  boolean feasible=true;  int N=problem.getNumberOfVariables();  if ((iteration - lastEigenupdate) > 1.0 / ccov / N/ 5.0) {    eigendecomposition();  }  if (checkConsistency) {    testAndCorrectNumerics();  }  population.clear();  for (int i=0; i < lambda; i++) {    Solution solution=problem.newSolution();    if (diagonalIterations >= iteration) {      do {        feasible=true;        for (int j=0; j < N; j++) {          RealVariable variable=(RealVariable)solution.getVariable(j);          double value=xmean[j] + sigma * diagD[j] * PRNG.nextGaussian();          if (value < variable.getLowerBound() || value > variable.getUpperBound()) {            feasible=false;            break;          }          variable.setValue(value);        }      } while (!feasible);    } else {      double[] artmp=new double[N];      do {        feasible=true;        for (int j=0; j < N; j++) {          artmp[j]=diagD[j] * PRNG.nextGaussian();        }        for (int j=0; j < N; j++) {          RealVariable variable=(RealVariable)solution.getVariable(j);          double sum=0.0;          for (int k=0; k < N; k++) {            sum+=B[j][k] * artmp[k];          }          double value=xmean[j] + sigma * sum;          if (value < variable.getLowerBound() || value > variable.getUpperBound()) {            feasible=false;            break;          }          variable.setValue(value);        }      } while (!feasible);    }    population.add(solution);  }  iteration++;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.samplePopulation.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "samplePopulation",
                        "code": "/**  * Samples a new population. */private void samplePopulation(){  boolean feasible=true;  int N=problem.getNumberOfVariables();  if ((iteration - lastEigenupdate) > 1.0 / ccov / N/ 5.0) {    eigendecomposition();  }  if (checkConsistency) {    testAndCorrectNumerics();  }  population.clear();  for (int i=0; i < lambda; i++) {    Solution solution=problem.newSolution();    if (diagonalIterations >= iteration) {      do {        feasible=true;        for (int j=0; j < N; j++) {          RealVariable variable=(RealVariable)solution.getVariable(j);          double value=xmean[j] + sigma * diagD[j] * PRNG.nextGaussian();          if (value < variable.getLowerBound() || value > variable.getUpperBound()) {            feasible=false;            break;          }          variable.setValue(value);        }      } while (!feasible);    } else {      double[] artmp=new double[N];      do {        feasible=samplePopulation_extraction_2(N,solution,artmp);      } while (!feasible);    }    population.add(solution);  }  iteration++;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.samplePopulation.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "samplePopulation",
                        "code": "/**  * Samples a new population. */private void samplePopulation(){  boolean feasible=true;  int N=problem.getNumberOfVariables();  if ((iteration - lastEigenupdate) > 1.0 / ccov / N/ 5.0) {    eigendecomposition();  }  if (checkConsistency) {    testAndCorrectNumerics();  }  population.clear();  for (int i=0; i < lambda; i++) {    Solution solution=problem.newSolution();    if (diagonalIterations >= iteration) {      do {        feasible=true;        feasible=samplePopulation_extraction_1(feasible,N,solution);      } while (!feasible);    } else {      double[] artmp=new double[N];      do {        feasible=samplePopulation_extraction_2(N,solution,artmp);      } while (!feasible);    }    population.add(solution);  }  iteration++;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.samplePopulation.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "tql2": {
                "original": {
                    "method_name": "tql2",
                    "code": "/**  * Symmetric tridiagonal QL algorithm, taken from JAMA package. This is derived from the Algol procedures tql2, by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. */public static void tql2(int n,double[] d,double[] e,double[][] V){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V[k][i + 1];            V[k][i + 1]=s * V[k][i] + c * h;            V[k][i]=c * V[k][i] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    if (k != i) {      d[k]=d[i];      d[i]=p;      for (int j=0; j < n; j++) {        p=V[j][i];        V[j][i]=V[j][k];        V[j][k]=p;      }    }  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.tql2.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "tql2",
                        "code": "/**  * Symmetric tridiagonal QL algorithm, taken from JAMA package. This is derived from the Algol procedures tql2, by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. */public static void tql2(int n,double[] d,double[] e,double[][] V){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      do {        iter=iter + 1;        double g=d[l];        double p=(d[l + 1] - g) / (2.0 * e[l]);        double r=hypot(p,1.0);        if (p < 0) {          r=-r;        }        d[l]=e[l] / (p + r);        d[l + 1]=e[l] * (p + r);        double dl1=d[l + 1];        double h=g - d[l];        for (int i=l + 2; i < n; i++) {          d[i]-=h;        }        f=f + h;        p=d[m];        double c=1.0;        double c2=c;        double c3=c;        double el1=e[l + 1];        double s=0.0;        double s2=0.0;        for (int i=m - 1; i >= l; i--) {          c3=c2;          c2=c;          s2=s;          g=c * e[i];          h=c * p;          r=hypot(p,e[i]);          e[i + 1]=s * r;          s=e[i] / r;          c=p / r;          p=c * d[i] - s * g;          d[i + 1]=h + s * (c * g + s * d[i]);          for (int k=0; k < n; k++) {            h=V[k][i + 1];            V[k][i + 1]=s * V[k][i] + c * h;            V[k][i]=c * V[k][i] - s * h;          }        }        p=-s * s2 * c3* el1* e[l] / dl1;        e[l]=s * p;        d[l]=c * p;      } while (Math.abs(e[l]) > eps * tst1);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    tql2_extraction_2(n,d,V,i,k,p);  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.tql2.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "tql2",
                        "code": "/**  * Symmetric tridiagonal QL algorithm, taken from JAMA package. This is derived from the Algol procedures tql2, by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. */public static void tql2(int n,double[] d,double[] e,double[][] V){  for (int i=1; i < n; i++) {    e[i - 1]=e[i];  }  e[n - 1]=0.0;  double f=0.0;  double tst1=0.0;  double eps=Math.pow(2.0,-52.0);  for (int l=0; l < n; l++) {    tst1=Math.max(tst1,Math.abs(d[l]) + Math.abs(e[l]));    int m=l;    while (m < n) {      if (Math.abs(e[m]) <= eps * tst1) {        break;      }      m++;    }    if (m > l) {      int iter=0;      f=tql2_extraction_1(n,d,e,V,f,tst1,eps,l,m,iter);    }    d[l]=d[l] + f;    e[l]=0.0;  }  for (int i=0; i < n - 1; i++) {    int k=i;    double p=d[i];    for (int j=i + 1; j < n; j++) {      if (d[j] < p) {        k=j;        p=d[j];      }    }    tql2_extraction_2(n,d,V,i,k,p);  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.tql2.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "tred2": {
                "original": {
                    "method_name": "tred2",
                    "code": "/**  * Symmetric Householder reduction to tridiagonal form, taken from JAMA package. This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. */public static void tred2(int n,double[][] V,double[] d,double[] e){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V[j][i]=f;        g=e[j] + V[j][j] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V[k][j] * d[k];          e[k]+=V[k][j] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V[k][j]-=(f * e[k] + g * d[k]);        }        d[j]=V[i - 1][j];        V[i][j]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    V[i][i]=1.0;    double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V[k][i + 1] / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V[k][i + 1] * V[k][j];        }        for (int k=0; k <= i; k++) {          V[k][j]-=g * d[k];        }      }    }    for (int k=0; k <= i; k++) {      V[k][i + 1]=0.0;    }  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.tred2.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "tred2",
                        "code": "/**  * Symmetric Householder reduction to tridiagonal form, taken from JAMA package. This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. */public static void tred2(int n,double[][] V,double[] d,double[] e){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V[j][i]=f;        g=e[j] + V[j][j] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V[k][j] * d[k];          e[k]+=V[k][j] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V[k][j]-=(f * e[k] + g * d[k]);        }        d[j]=V[i - 1][j];        V[i][j]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    tred2_extraction_2(V,d,i);  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.tred2.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "tred2",
                        "code": "/**  * Symmetric Householder reduction to tridiagonal form, taken from JAMA package. This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK. */public static void tred2(int n,double[][] V,double[] d,double[] e){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      h=tred2_extraction_1(V,d,e,i,scale,h,f,g);    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    tred2_extraction_2(V,d,i);  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.tred2.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            },
            "updateDistribution": {
                "original": {
                    "method_name": "updateDistribution",
                    "code": "/**  * Updates the internal parameters given the evaluated population. */private void updateDistribution(){  int N=problem.getNumberOfVariables();  double[] xold=Arrays.copyOf(xmean,xmean.length);  double[] BDz=new double[N];  double[] artmp=new double[N];  if (problem.getNumberOfObjectives() == 1) {    population.sort(new SingleObjectiveComparator());  } else {    if (fitnessEvaluator == null) {      population.sort(new NondominatedSortingComparator());    } else {      population.sort(new NondominatedFitnessComparator());    }  }  for (int i=0; i < N; i++) {    xmean[i]=0;    for (int j=0; j < mu; j++) {      xmean[i]+=weights[j] * EncodingUtils.getReal(population.get(j).getVariable(i));    }    BDz[i]=Math.sqrt(mueff) * (xmean[i] - xold[i]) / sigma;  }  if (diagonalIterations >= iteration) {    for (int i=0; i < N; i++) {      ps[i]=(1.0 - cs) * ps[i] + Math.sqrt(cs * (2.0 - cs)) * BDz[i] / diagD[i];    }  } else {    for (int i=0; i < N; i++) {      double sum=0.0;      for (int j=0; j < N; j++) {        sum+=B[j][i] * BDz[j];      }      artmp[i]=sum / diagD[i];    }    for (int i=0; i < N; i++) {      double sum=0.0;      for (int j=0; j < N; j++) {        sum+=B[i][j] * artmp[j];      }      ps[i]=(1.0 - cs) * ps[i] + Math.sqrt(cs * (2.0 - cs)) * sum;    }  }  double psxps=0;  for (int i=0; i < N; i++) {    psxps+=ps[i] * ps[i];  }  int hsig=0;  if (Math.sqrt(psxps) / Math.sqrt(1.0 - Math.pow(1.0 - cs,2.0 * iteration)) / chiN < 1.4 + 2.0 / (N + 1)) {    hsig=1;  }  for (int i=0; i < N; i++) {    pc[i]=(1.0 - cc) * pc[i] + hsig * Math.sqrt(cc * (2.0 - cc)) * BDz[i];  }  for (int i=0; i < N; i++) {    for (int j=(diagonalIterations >= iteration ? i : 0); j <= i; j++) {      C[i][j]=(1.0 - (diagonalIterations >= iteration ? ccovsep : ccov)) * C[i][j] + ccov * (1.0 / mueff) * (pc[i] * pc[j] + (1 - hsig) * cc * (2.0 - cc)* C[i][j]);      for (int k=0; k < mu; k++) {        C[i][j]+=ccov * (1 - 1.0 / mueff) * weights[k]* (EncodingUtils.getReal(population.get(k).getVariable(i)) - xold[i])* (EncodingUtils.getReal(population.get(k).getVariable(j)) - xold[j]) / sigma / sigma;      }    }  }  sigma*=Math.exp(((Math.sqrt(psxps) / chiN) - 1) * cs / damps);}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.updateDistribution.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "updateDistribution",
                        "code": "/**  * Updates the internal parameters given the evaluated population. */private void updateDistribution(){  int N=problem.getNumberOfVariables();  double[] xold=Arrays.copyOf(xmean,xmean.length);  double[] BDz=new double[N];  double[] artmp=new double[N];  if (problem.getNumberOfObjectives() == 1) {    population.sort(new SingleObjectiveComparator());  } else {    if (fitnessEvaluator == null) {      population.sort(new NondominatedSortingComparator());    } else {      population.sort(new NondominatedFitnessComparator());    }  }  for (int i=0; i < N; i++) {    xmean[i]=0;    for (int j=0; j < mu; j++) {      xmean[i]+=weights[j] * EncodingUtils.getReal(population.get(j).getVariable(i));    }    BDz[i]=Math.sqrt(mueff) * (xmean[i] - xold[i]) / sigma;  }  if (diagonalIterations >= iteration) {    for (int i=0; i < N; i++) {      ps[i]=(1.0 - cs) * ps[i] + Math.sqrt(cs * (2.0 - cs)) * BDz[i] / diagD[i];    }  } else {    for (int i=0; i < N; i++) {      double sum=0.0;      for (int j=0; j < N; j++) {        sum+=B[j][i] * BDz[j];      }      artmp[i]=sum / diagD[i];    }    for (int i=0; i < N; i++) {      double sum=0.0;      for (int j=0; j < N; j++) {        sum+=B[i][j] * artmp[j];      }      ps[i]=(1.0 - cs) * ps[i] + Math.sqrt(cs * (2.0 - cs)) * sum;    }  }  double psxps=0;  for (int i=0; i < N; i++) {    psxps+=ps[i] * ps[i];  }  int hsig=0;  if (Math.sqrt(psxps) / Math.sqrt(1.0 - Math.pow(1.0 - cs,2.0 * iteration)) / chiN < 1.4 + 2.0 / (N + 1)) {    hsig=1;  }  for (int i=0; i < N; i++) {    pc[i]=(1.0 - cc) * pc[i] + hsig * Math.sqrt(cc * (2.0 - cc)) * BDz[i];  }  for (int i=0; i < N; i++) {    updateDistribution_extraction_2(xold,hsig,i);  }  sigma*=Math.exp(((Math.sqrt(psxps) / chiN) - 1) * cs / damps);}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.updateDistribution.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "updateDistribution",
                        "code": "/**  * Updates the internal parameters given the evaluated population. */private void updateDistribution(){  int N=problem.getNumberOfVariables();  double[] xold=Arrays.copyOf(xmean,xmean.length);  double[] BDz=new double[N];  double[] artmp=new double[N];  if (problem.getNumberOfObjectives() == 1) {    population.sort(new SingleObjectiveComparator());  } else {    if (fitnessEvaluator == null) {      population.sort(new NondominatedSortingComparator());    } else {      population.sort(new NondominatedFitnessComparator());    }  }  for (int i=0; i < N; i++) {    xmean[i]=0;    for (int j=0; j < mu; j++) {      xmean[i]+=weights[j] * EncodingUtils.getReal(population.get(j).getVariable(i));    }    BDz[i]=Math.sqrt(mueff) * (xmean[i] - xold[i]) / sigma;  }  double psxps=updateDistribution_extraction_1(N,BDz,artmp);  for (int i=0; i < N; i++) {    psxps+=ps[i] * ps[i];  }  int hsig=0;  if (Math.sqrt(psxps) / Math.sqrt(1.0 - Math.pow(1.0 - cs,2.0 * iteration)) / chiN < 1.4 + 2.0 / (N + 1)) {    hsig=1;  }  for (int i=0; i < N; i++) {    pc[i]=(1.0 - cc) * pc[i] + hsig * Math.sqrt(cc * (2.0 - cc)) * BDz[i];  }  for (int i=0; i < N; i++) {    updateDistribution_extraction_2(xold,hsig,i);  }  sigma*=Math.exp(((Math.sqrt(psxps) / chiN) - 1) * cs / damps);}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.algorithm.CMAES.updateDistribution.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "MOEAFramework.src.org.moeaframework.core": {
        "FastNondominatedSorting": {
            "evaluate": {
                "original": {
                    "method_name": "evaluate",
                    "code": "@Override public void evaluate(Population population){  int N=population.size();  int[][] dominanceChecks=new int[N][N];  for (int i=0; i < N; i++) {    Solution si=population.get(i);    for (int j=i + 1; j < N; j++) {      if (i != j) {        Solution sj=population.get(j);        dominanceChecks[i][j]=comparator.compare(si,sj);        dominanceChecks[j][i]=-dominanceChecks[i][j];      }    }  }  int[] dominatedCounts=new int[N];  List<List<Integer>> dominatesList=new ArrayList<List<Integer>>();  List<Integer> currentFront=new ArrayList<Integer>();  for (int i=0; i < N; i++) {    List<Integer> dominates=new ArrayList<Integer>();    int dominatedCount=0;    for (int j=0; j < N; j++) {      if (i != j) {        if (dominanceChecks[i][j] < 0) {          dominates.add(j);        } else         if (dominanceChecks[j][i] < 0) {          dominatedCount+=1;        }      }    }    if (dominatedCount == 0) {      currentFront.add(i);    }    dominatesList.add(dominates);    dominatedCounts[i]=dominatedCount;  }  int rank=0;  while (!currentFront.isEmpty()) {    List<Integer> nextFront=new ArrayList<Integer>();    Population solutionsInFront=new Population();    for (int i=0; i < currentFront.size(); i++) {      Solution solution=population.get(currentFront.get(i));      solution.setAttribute(RANK_ATTRIBUTE,rank);      for (      Integer j : dominatesList.get(currentFront.get(i))) {        dominatedCounts[j]-=1;        if (dominatedCounts[j] == 0) {          nextFront.add(j);        }      }      solutionsInFront.add(solution);    }    updateCrowdingDistance(solutionsInFront);    rank+=1;    currentFront=nextFront;  }}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "MOEAFramework.src.org.moeaframework.core.FastNondominatedSorting.evaluate.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "evaluate",
                        "code": "@Override public void evaluate(Population population){  int N=population.size();  int[][] dominanceChecks=new int[N][N];  for (int i=0; i < N; i++) {    Solution si=population.get(i);    for (int j=i + 1; j < N; j++) {      if (i != j) {        Solution sj=population.get(j);        dominanceChecks[i][j]=comparator.compare(si,sj);        dominanceChecks[j][i]=-dominanceChecks[i][j];      }    }  }  int[] dominatedCounts=new int[N];  List<List<Integer>> dominatesList=new ArrayList<List<Integer>>();  List<Integer> currentFront=new ArrayList<Integer>();  for (int i=0; i < N; i++) {    List<Integer> dominates=new ArrayList<Integer>();    int dominatedCount=0;    for (int j=0; j < N; j++) {      if (i != j) {        if (dominanceChecks[i][j] < 0) {          dominates.add(j);        } else         if (dominanceChecks[j][i] < 0) {          dominatedCount+=1;        }      }    }    if (dominatedCount == 0) {      currentFront.add(i);    }    dominatesList.add(dominates);    dominatedCounts[i]=dominatedCount;  }  int rank=0;  while (!currentFront.isEmpty()) {    List<Integer> nextFront=new ArrayList<Integer>();    Population solutionsInFront=new Population();    for (int i=0; i < currentFront.size(); i++) {      Solution solution=population.get(currentFront.get(i));      solution.setAttribute(RANK_ATTRIBUTE,rank);      evaluate_extraction_2(dominatedCounts,dominatesList,currentFront,nextFront,i);      solutionsInFront.add(solution);    }    updateCrowdingDistance(solutionsInFront);    rank+=1;    currentFront=nextFront;  }}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.core.FastNondominatedSorting.evaluate.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "evaluate",
                        "code": "@Override public void evaluate(Population population){  int N=population.size();  int[][] dominanceChecks=new int[N][N];  for (int i=0; i < N; i++) {    Solution si=population.get(i);    for (int j=i + 1; j < N; j++) {      if (i != j) {        Solution sj=population.get(j);        dominanceChecks[i][j]=comparator.compare(si,sj);        dominanceChecks[j][i]=-dominanceChecks[i][j];      }    }  }  int[] dominatedCounts=new int[N];  List<List<Integer>> dominatesList=new ArrayList<List<Integer>>();  List<Integer> currentFront=new ArrayList<Integer>();  for (int i=0; i < N; i++) {    List<Integer> dominates=new ArrayList<Integer>();    int dominatedCount=0;    for (int j=0; j < N; j++) {      dominatedCount=evaluate_extraction_1(dominanceChecks,i,dominates,dominatedCount,j);    }    if (dominatedCount == 0) {      currentFront.add(i);    }    dominatesList.add(dominates);    dominatedCounts[i]=dominatedCount;  }  int rank=0;  while (!currentFront.isEmpty()) {    List<Integer> nextFront=new ArrayList<Integer>();    Population solutionsInFront=new Population();    for (int i=0; i < currentFront.size(); i++) {      Solution solution=population.get(currentFront.get(i));      solution.setAttribute(RANK_ATTRIBUTE,rank);      evaluate_extraction_2(dominatedCounts,dominatesList,currentFront,nextFront,i);      solutionsInFront.add(solution);    }    updateCrowdingDistance(solutionsInFront);    rank+=1;    currentFront=nextFront;  }}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.core.FastNondominatedSorting.evaluate.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    },
    "MOEAFramework.src.org.moeaframework.problem.LZ": {
        "LZ": {
            "evaluate": {
                "original": {
                    "method_name": "evaluate",
                    "code": "/**  * Evaluates the decision variables and returns the objectives. */private double[] evaluate(double[] x_var){  double[] y_obj=new double[numberOfObjectives];  if (numberOfObjectives == 2) {    if ((lType == 21) || (lType == 22) || (lType == 23)|| (lType == 24)|| (lType == 26)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 2 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else     if (lType == 25) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 3 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else         if (n % 3 == 1) {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        } else {          double c=psfunc2(x_var[n],x_var[0],n,3);          if (n % 2 == 0) {            aa.add(c);          } else {            bb.add(c);          }        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else {      throw new IllegalStateException();    }  } else   if (numberOfObjectives == 3) {    if ((lType == 31) || (lType == 32)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      List<Double> cc=new ArrayList<Double>();      for (int n=2; n < numberOfVariables; n++) {        double a=psfunc3(x_var[n],x_var[0],x_var[1],n);        if (n % 3 == 0) {          aa.add(a);        } else         if (n % 3 == 1) {          bb.add(a);        } else {          cc.add(a);        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double e=betafunction(toArray(cc));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;      y_obj[2]=alpha[2] + e;    } else {      throw new IllegalStateException();    }  } else {    throw new IllegalStateException();  }  return y_obj;}",
                    "extraction_name": null,
                    "predictions": [],
                    "similarities": [],
                    "file_name": "MOEAFramework.src.org.moeaframework.problem.LZ.LZ.evaluate.Original.java"
                },
                "extractions": [
                    {
                        "method_name": "evaluate",
                        "code": "/**  * Evaluates the decision variables and returns the objectives. */private double[] evaluate(double[] x_var){  double[] y_obj=new double[numberOfObjectives];  if (numberOfObjectives == 2) {    if ((lType == 21) || (lType == 22) || (lType == 23)|| (lType == 24)|| (lType == 26)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 2 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else     if (lType == 25) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 3 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else         if (n % 3 == 1) {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        } else {          double c=psfunc2(x_var[n],x_var[0],n,3);          if (n % 2 == 0) {            aa.add(c);          } else {            bb.add(c);          }        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else {      throw new IllegalStateException();    }  } else   evaluate_extraction_2(x_var,y_obj);  return y_obj;}",
                        "extraction_name": "Extraction1",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.problem.LZ.LZ.evaluate.Extraction1.java",
                        "updated_code": null
                    },
                    {
                        "method_name": "evaluate",
                        "code": "/**  * Evaluates the decision variables and returns the objectives. */private double[] evaluate(double[] x_var){  double[] y_obj=new double[numberOfObjectives];  if (numberOfObjectives == 2) {    if ((lType == 21) || (lType == 22) || (lType == 23)|| (lType == 24)|| (lType == 26)) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      for (int n=1; n < numberOfVariables; n++) {        if (n % 2 == 0) {          aa.add(psfunc2(x_var[n],x_var[0],n,1));        } else {          bb.add(psfunc2(x_var[n],x_var[0],n,2));        }      }      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else     if (lType == 25) {      List<Double> aa=new ArrayList<Double>();      List<Double> bb=new ArrayList<Double>();      evaluate_extraction_1(x_var,aa,bb);      double g=betafunction(toArray(aa));      double h=betafunction(toArray(bb));      double[] alpha=alphafunction(x_var);      y_obj[0]=alpha[0] + h;      y_obj[1]=alpha[1] + g;    } else {      throw new IllegalStateException();    }  } else   evaluate_extraction_2(x_var,y_obj);  return y_obj;}",
                        "extraction_name": "Extraction2",
                        "prediction": null,
                        "similarity": null,
                        "file_name": "MOEAFramework.src.org.moeaframework.problem.LZ.LZ.evaluate.Extraction2.java",
                        "updated_code": null
                    }
                ],
                "file_name": null
            }
        }
    }
}