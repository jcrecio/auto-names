{
    "original": {
        "method_name": "execute",
        "code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      if (v instanceof String) {        String s=(String)v;        if (!s.isEmpty())         sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);      }      if (v instanceof String[]) {        for (int i=0; i < ((String[])v).length; i++) {          String s=((String[])v)[i];          if (!s.isEmpty())           sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\"[\").append(i).append(\"] -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);        }      }    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          if (((LdcInsnNode)a).cst instanceof String) {            final String s=(String)((LdcInsnNode)a).cst;            if (!s.isEmpty())             sb.append(classNode.name).append(\".\").append(m.name).append(m.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);          }        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}",
        "extraction_name": null,
        "predictions": [
            "executeStringExtraction",
            "extractStringsFromClassNodes"
        ],
        "similarities": [
            0.6478332027032833,
            0.3328642651964633
        ],
        "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ShowAllStrings.execute.Original.java"
    },
    "extractions": [
        {
            "method_name": "execute",
            "code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      if (v instanceof String) {        String s=(String)v;        if (!s.isEmpty())         sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);      }      if (v instanceof String[]) {        for (int i=0; i < ((String[])v).length; i++) {          String s=((String[])v)[i];          if (!s.isEmpty())           sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\"[\").append(i).append(\"] -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);        }      }    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          execute_extraction_2(sb,classNode,m,a);        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}",
            "extraction_name": "Extraction1",
            "prediction": "executeStringExtraction",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ShowAllStrings.execute.Extraction1.java",
            "updated_code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      if (v instanceof String) {        String s=(String)v;        if (!s.isEmpty())         sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\" -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);      }      if (v instanceof String[]) {        for (int i=0; i < ((String[])v).length; i++) {          String s=((String[])v)[i];          if (!s.isEmpty())           sb.append(classNode.name).append(\".\").append(f.name).append(f.desc).append(\"[\").append(i).append(\"] -> \\\"\").append(s.replaceAll(\"\\\\n\",\"\\\\\\\\n\").replaceAll(\"\\\\r\",\"\\\\\\\\r\")).append(\"\\\"\").append(nl);        }      }    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          executeStringExtraction(sb,classNode,m,a);        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}"
        },
        {
            "method_name": "execute",
            "code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      execute_extraction_1(sb,classNode,f,v);    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          execute_extraction_2(sb,classNode,m,a);        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}",
            "extraction_name": "Extraction2",
            "prediction": "extractStringFromField",
            "similarity": null,
            "file_name": "bytecode-viewer.src.main.java.the.bytecode.club.bytecodeviewer.plugin.preinstalled.ShowAllStrings.execute.Extraction2.java",
            "updated_code": "@Override public void execute(List<ClassNode> classNodeList){  PluginConsole frame=new PluginConsole(\"Show All Strings\");  StringBuilder sb=new StringBuilder();  for (  ClassNode classNode : classNodeList) {    for (    Object o : classNode.fields.toArray()) {      FieldNode f=(FieldNode)o;      Object v=f.value;      extractStringFromField(sb,classNode,f,v);    }    for (    Object o : classNode.methods.toArray()) {      MethodNode m=(MethodNode)o;      InsnList iList=m.instructions;      for (      AbstractInsnNode a : iList.toArray()) {        if (a instanceof LdcInsnNode) {          executeStringExtraction(sb,classNode,m,a);        }      }    }  }  frame.setText(sb.toString());  frame.setVisible(true);}"
        }
    ],
    "file_name": null
}