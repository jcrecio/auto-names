{
    "original": {
        "method_name": "getChildrenForTreeLov",
        "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          if (attribute.getKey().equalsIgnoreCase(descriptionColumn)) {            valueJSON.put(\"description\",attribute.getValue());            notNullNode=true;          }          if (attribute.getKey().equalsIgnoreCase(valueColumn)) {            valueJSON.put(\"value\",attribute.getValue());            valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));            notNullNode=true;          }          valueJSON.put(\"leaf\",true);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
        "extraction_name": null,
        "predictions": [
            "getTreeLovChildren",
            "getNodeConditionAndData"
        ],
        "similarities": [
            0.8743067195528784,
            0.412544802452575
        ],
        "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionParameters.getChildrenForTreeLov.Original.java"
    },
    "extractions": [
        {
            "method_name": "getChildrenForTreeLov",
            "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
            "extraction_name": "Extraction1",
            "prediction": "getNodeData",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionParameters.getChildrenForTreeLov.Extraction1.java",
            "updated_code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        if ((treeLovParentNodeName == \"lovroot\") || (attribute.getKey().equalsIgnoreCase(treeLovParentNodeName) && (attribute.getValue().toString()).equalsIgnoreCase(treeLovNodeValue))) {          addNode=true;        }        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getNodeData(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}"
        },
        {
            "method_name": "getChildrenForTreeLov",
            "code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        addNode=getChildrenForTreeLov_extraction_1(treeLovNodeValue,addNode,treeLovParentNodeName,attribute);        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getChildrenForTreeLov_extraction_2(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}",
            "extraction_name": "Extraction2",
            "prediction": "getNodeCondition",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.api.DocumentExecutionParameters.getChildrenForTreeLov.Extraction2.java",
            "updated_code": "private JSONArray getChildrenForTreeLov(ILovDetail lovProvDet,List rows,String mode,int treeLovNodeLevel,String treeLovNodeValue){  String valueColumn;  String descriptionColumn;  boolean addNode;  String treeLovNodeName=\"\";  String treeLovParentNodeName=\"\";  try {    if (treeLovNodeValue == \"lovroot\") {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(0).getFirst();      treeLovParentNodeName=\"lovroot\";      treeLovNodeLevel=-1;    } else     if (lovProvDet.getTreeLevelsColumns().size() > treeLovNodeLevel + 1) {      treeLovNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel + 1).getFirst();      treeLovParentNodeName=lovProvDet.getTreeLevelsColumns().get(treeLovNodeLevel).getFirst();    }    Set<JSONObject> valuesDataJSON=new LinkedHashSet<JSONObject>();    valueColumn=lovProvDet.getValueColumnName();    descriptionColumn=lovProvDet.getDescriptionColumnName();    for (int q=0; q < rows.size(); q++) {      SourceBean row=(SourceBean)rows.get(q);      JSONObject valueJSON=null;      addNode=false;      List columns=row.getContainedAttributes();      valueJSON=new JSONObject();      boolean notNullNode=false;      for (int i=0; i < columns.size(); i++) {        SourceBeanAttribute attribute=(SourceBeanAttribute)columns.get(i);        addNode=getNodeCondition(treeLovNodeValue,addNode,treeLovParentNodeName,attribute);        if (lovProvDet.getTreeLevelsColumns().size() == treeLovNodeLevel + 2) {          notNullNode=getNodeData(treeLovNodeLevel,valueColumn,descriptionColumn,valueJSON,notNullNode,attribute);        } else         if (attribute.getKey().equalsIgnoreCase(treeLovNodeName)) {          valueJSON=new JSONObject();          valueJSON.put(\"description\",attribute.getValue());          valueJSON.put(\"value\",attribute.getValue());          valueJSON.put(\"id\",attribute.getValue() + NODE_ID_SEPARATOR + (treeLovNodeLevel + 1));          notNullNode=true;        }      }      if (addNode && notNullNode) {        valuesDataJSON.add(valueJSON);      }    }    JSONArray valuesDataJSONArray=new JSONArray();    for (Iterator iterator=valuesDataJSON.iterator(); iterator.hasNext(); ) {      JSONObject jsonObject=(JSONObject)iterator.next();      valuesDataJSONArray.put(jsonObject);    }    return valuesDataJSONArray;  } catch (  Exception e) {    throw new SpagoBIServiceException(\"Impossible to serialize response\",e);  }}"
        }
    ],
    "file_name": null
}