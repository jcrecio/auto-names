{
    "original": {
        "method_name": "deepScan",
        "code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      if (propertyName.equals(entry.getKey())) {        if (val instanceof Collection) {          results.addAll((Collection)val);        } else {          results.add(val);        }        continue;      }      if (val == null || ParserConfig.isPrimitive2(val.getClass())) {        continue;      }      deepScan(val,propertyName,results);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    try {      FieldSerializer fieldDeser=beanSerializer.getFieldSerializer(propertyName);      if (fieldDeser != null) {        try {          Object val=fieldDeser.getPropertyValueDirect(currentObject);          results.add(val);        } catch (        InvocationTargetException ex) {          throw new JSONException(\"getFieldValue error.\" + propertyName,ex);        }catch (        IllegalAccessException ex) {          throw new JSONException(\"getFieldValue error.\" + propertyName,ex);        }        return;      }      List<Object> fieldValues=beanSerializer.getFieldValues(currentObject);      for (      Object val : fieldValues) {        deepScan(val,propertyName,results);      }      return;    } catch (    Exception e) {      throw new JSONPathException(\"jsonpath error, path \" + path + \", segement \"+ propertyName,e);    }  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}",
        "extraction_name": null,
        "predictions": [
            "deepScan_extraction_2_method",
            "deepScanCheckPropertyName"
        ],
        "similarities": [
            0.749716595763005,
            0.6515351337013351
        ],
        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.deepScan.Original.java"
    },
    "extractions": [
        {
            "method_name": "deepScan",
            "code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      if (propertyName.equals(entry.getKey())) {        if (val instanceof Collection) {          results.addAll((Collection)val);        } else {          results.add(val);        }        continue;      }      if (val == null || ParserConfig.isPrimitive2(val.getClass())) {        continue;      }      deepScan(val,propertyName,results);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    deepScan_extraction_2(currentObject,propertyName,results,beanSerializer);  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}",
            "extraction_name": "Extraction1",
            "prediction": "deepScan_extraction_2_method",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.deepScan.Extraction1.java",
            "updated_code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      if (propertyName.equals(entry.getKey())) {        if (val instanceof Collection) {          results.addAll((Collection)val);        } else {          results.add(val);        }        continue;      }      if (val == null || ParserConfig.isPrimitive2(val.getClass())) {        continue;      }      deepScan(val,propertyName,results);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    deepScan_extraction_2_method(currentObject,propertyName,results,beanSerializer);  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}"
        },
        {
            "method_name": "deepScan",
            "code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      deepScan_extraction_1(propertyName,results,entry,val);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    deepScan_extraction_2(currentObject,propertyName,results,beanSerializer);  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}",
            "extraction_name": "Extraction2",
            "prediction": "deepScanCheckPropertyName",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONPath.deepScan.Extraction2.java",
            "updated_code": "@SuppressWarnings(\"rawtypes\") protected void deepScan(final Object currentObject,final String propertyName,List<Object> results){  if (currentObject == null) {    return;  }  if (currentObject instanceof Map) {    Map<?,?> map=(Map<?,?>)currentObject;    for (    Map.Entry entry : map.entrySet()) {      Object val=entry.getValue();      deepScanCheckPropertyName(propertyName,results,entry,val);    }    return;  }  if (currentObject instanceof Collection) {    Iterator iterator=((Collection)currentObject).iterator();    while (iterator.hasNext()) {      Object next=iterator.next();      if (ParserConfig.isPrimitive2(next.getClass())) {        continue;      }      deepScan(next,propertyName,results);    }    return;  }  final Class<?> currentClass=currentObject.getClass();  JavaBeanSerializer beanSerializer=getJavaBeanSerializer(currentClass);  if (beanSerializer != null) {    deepScan_extraction_2_method(currentObject,propertyName,results,beanSerializer);  }  if (currentObject instanceof List) {    List list=(List)currentObject;    for (int i=0; i < list.size(); ++i) {      Object val=list.get(i);      deepScan(val,propertyName,results);    }    return;  }}"
        }
    ],
    "file_name": null
}