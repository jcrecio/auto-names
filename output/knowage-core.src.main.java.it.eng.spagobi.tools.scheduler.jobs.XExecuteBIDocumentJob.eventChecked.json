{
    "original": {
        "method_name": "eventChecked",
        "code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      if (sbiWsEvents.size() != 0) {        Date attDate=new Date();        for (        SbiWsEvent sb : sbiWsEvents) {          if (sb.getTakeChargeDate() == null) {            sb.setTakeChargeDate(attDate);            wsEventsDao.updateEvent(sb);          }        }        eventSolved=true;      }    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          IRecord returnVal=dataStore.getRecordAt(0);          if (returnVal != null) {            Object value=returnVal.getFieldAt(0).getValue();            String execFlag=jobExecutionContext.getTrigger().getJobDataMap().getString(\"execFlag\");            Boolean exf=execFlag == null ? false : Boolean.parseBoolean(execFlag);            boolean validDS=(value.toString().equals(\"1\") || value.toString().equals(\"true\")) ? true : false;            if (validDS && !exf) {              jobExecutionContext.getTrigger().getJobDataMap().put(\"execFlag\",\"true\");              StdSchedulerFactory.getDefaultScheduler().rescheduleJob(jobExecutionContext.getTrigger().getName(),jobExecutionContext.getTrigger().getGroup(),jobExecutionContext.getTrigger());              eventSolved=true;            } else             if (!validDS && exf) {              jobExecutionContext.getTrigger().getJobDataMap().put(\"execFlag\",\"false\");              StdSchedulerFactory.getDefaultScheduler().rescheduleJob(jobExecutionContext.getTrigger().getName(),jobExecutionContext.getTrigger().getGroup(),jobExecutionContext.getTrigger());            }          }        }      }    }  }  return eventSolved;}",
        "extraction_name": null,
        "predictions": [
            "checkEventValidity",
            "checkEventValidity"
        ],
        "similarities": [
            0.710129304862627,
            0.710129304862627
        ],
        "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs.XExecuteBIDocumentJob.eventChecked.Original.java"
    },
    "extractions": [
        {
            "method_name": "eventChecked",
            "code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      if (sbiWsEvents.size() != 0) {        Date attDate=new Date();        for (        SbiWsEvent sb : sbiWsEvents) {          if (sb.getTakeChargeDate() == null) {            sb.setTakeChargeDate(attDate);            wsEventsDao.updateEvent(sb);          }        }        eventSolved=true;      }    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          eventSolved=eventChecked_extraction_2(jobExecutionContext,eventSolved,dataStore);        }      }    }  }  return eventSolved;}",
            "extraction_name": "Extraction1",
            "prediction": "checkEventValidity",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs.XExecuteBIDocumentJob.eventChecked.Extraction1.java",
            "updated_code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      if (sbiWsEvents.size() != 0) {        Date attDate=new Date();        for (        SbiWsEvent sb : sbiWsEvents) {          if (sb.getTakeChargeDate() == null) {            sb.setTakeChargeDate(attDate);            wsEventsDao.updateEvent(sb);          }        }        eventSolved=true;      }    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          eventSolved=checkEventValidity(jobExecutionContext,eventSolved,dataStore);        }      }    }  }  return eventSolved;}"
        },
        {
            "method_name": "eventChecked",
            "code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      eventSolved=eventChecked_extraction_1(eventSolved,wsEventsDao,sbiWsEvents);    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          eventSolved=eventChecked_extraction_2(jobExecutionContext,eventSolved,dataStore);        }      }    }  }  return eventSolved;}",
            "extraction_name": "Extraction2",
            "prediction": "checkSbiWsEvents",
            "similarity": null,
            "file_name": "knowage-core.src.main.java.it.eng.spagobi.tools.scheduler.jobs.XExecuteBIDocumentJob.eventChecked.Extraction2.java",
            "updated_code": "private boolean eventChecked(JobExecutionContext jobExecutionContext) throws SchedulerException, JSONException {  Boolean eventSolved=true;  if (jobExecutionContext.getMergedJobDataMap().containsKey(\"event_info\")) {    eventSolved=false;    String triggerName=jobExecutionContext.getTrigger().getName();    if (jobExecutionContext.getMergedJobDataMap().containsKey(\"originalTriggerName\")) {      triggerName=jobExecutionContext.getMergedJobDataMap().getString(\"originalTriggerName\");    }    JSONObject jo=new JSONObject(jobExecutionContext.getMergedJobDataMap().getString(\"event_info\"));    String typeEvent=jo.getString(\"type\");    if (typeEvent.equals(\"rest\")) {      SbiWsEventsDao wsEventsDao=DAOFactory.getWsEventsDao();      List<SbiWsEvent> sbiWsEvents=wsEventsDao.loadSbiWsEvents(triggerName);      eventSolved=checkSbiWsEvents(eventSolved,wsEventsDao,sbiWsEvents);    } else     if (typeEvent.equals(\"dataset\")) {      IDataSetDAO d=DAOFactory.getDataSetDAO();      d.setUserProfile(UserProfile.createSchedulerUserProfile());      IDataSet dataSet=d.loadDataSetById(jo.getInt(\"dataset\"));      if (dataSet != null) {        dataSet.loadData();        IDataStore dataStore=dataSet.getDataStore();        if (dataStore != null && dataStore.getRecordsCount() > 0) {          eventSolved=checkEventValidity(jobExecutionContext,eventSolved,dataStore);        }      }    }  }  return eventSolved;}"
        }
    ],
    "file_name": null
}