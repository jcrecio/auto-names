{
    "original": {
        "method_name": "writeWithFormat",
        "code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    if (\"unixtime\".equals(format)) {      long seconds=((Date)object).getTime() / 1000L;      out.writeInt((int)seconds);      return;    }    if (\"millis\".equals(format)) {      out.writeLong(((Date)object).getTime());      return;    }    DateFormat dateFormat=this.getDateFormat();    if (dateFormat == null) {      if (format != null) {        try {          dateFormat=this.generateDateFormat(format);        } catch (        IllegalArgumentException e) {          String format2=format.replaceAll(\"T\",\"'T'\");          dateFormat=this.generateDateFormat(format2);        }      } else       if (fastJsonConfigDateFormatPattern != null) {        dateFormat=this.generateDateFormat(fastJsonConfigDateFormatPattern);      } else {        dateFormat=this.generateDateFormat(JSON.DEFFAULT_DATE_FORMAT);      }    }    String text=dateFormat.format((Date)object);    out.writeString(text);    return;  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  if (object instanceof Collection) {    Collection collection=(Collection)object;    Iterator iterator=collection.iterator();    out.write('[');    for (int i=0; i < collection.size(); i++) {      Object item=iterator.next();      if (i != 0) {        out.write(',');      }      writeWithFormat(item,format);    }    out.write(']');    return;  }  write(object);}",
        "extraction_name": null,
        "predictions": [
            "writeWithFormatCollection",
            "writeWithFormatCollection"
        ],
        "similarities": [
            0.9616002791505144,
            0.9616002791505144
        ],
        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat.Original.java"
    },
    "extractions": [
        {
            "method_name": "writeWithFormat",
            "code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    if (\"unixtime\".equals(format)) {      long seconds=((Date)object).getTime() / 1000L;      out.writeInt((int)seconds);      return;    }    if (\"millis\".equals(format)) {      out.writeLong(((Date)object).getTime());      return;    }    DateFormat dateFormat=this.getDateFormat();    if (dateFormat == null) {      if (format != null) {        try {          dateFormat=this.generateDateFormat(format);        } catch (        IllegalArgumentException e) {          String format2=format.replaceAll(\"T\",\"'T'\");          dateFormat=this.generateDateFormat(format2);        }      } else       if (fastJsonConfigDateFormatPattern != null) {        dateFormat=this.generateDateFormat(fastJsonConfigDateFormatPattern);      } else {        dateFormat=this.generateDateFormat(JSON.DEFFAULT_DATE_FORMAT);      }    }    String text=dateFormat.format((Date)object);    out.writeString(text);    return;  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  writeWithFormat_extraction_2(object,format);}",
            "extraction_name": "Extraction1",
            "prediction": "writeWithFormatCollection",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat.Extraction1.java",
            "updated_code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    if (\"unixtime\".equals(format)) {      long seconds=((Date)object).getTime() / 1000L;      out.writeInt((int)seconds);      return;    }    if (\"millis\".equals(format)) {      out.writeLong(((Date)object).getTime());      return;    }    DateFormat dateFormat=this.getDateFormat();    if (dateFormat == null) {      if (format != null) {        try {          dateFormat=this.generateDateFormat(format);        } catch (        IllegalArgumentException e) {          String format2=format.replaceAll(\"T\",\"'T'\");          dateFormat=this.generateDateFormat(format2);        }      } else       if (fastJsonConfigDateFormatPattern != null) {        dateFormat=this.generateDateFormat(fastJsonConfigDateFormatPattern);      } else {        dateFormat=this.generateDateFormat(JSON.DEFFAULT_DATE_FORMAT);      }    }    String text=dateFormat.format((Date)object);    out.writeString(text);    return;  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  writeWithFormatCollection(object,format);}"
        },
        {
            "method_name": "writeWithFormat",
            "code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    writeWithFormat_extraction_1(object,format);  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  writeWithFormat_extraction_2(object,format);}",
            "extraction_name": "Extraction2",
            "prediction": "writeWithFormatDate",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.serializer.JSONSerializer.writeWithFormat.Extraction2.java",
            "updated_code": "public final void writeWithFormat(Object object,String format){  if (object instanceof Date) {    writeWithFormatDate(object,format);  }  if (object instanceof byte[]) {    byte[] bytes=(byte[])object;    if (\"gzip\".equals(format) || \"gzip,base64\".equals(format)) {      GZIPOutputStream gzipOut=null;      try {        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();        if (bytes.length < 512) {          gzipOut=new GZIPOutputStream(byteOut,bytes.length);        } else {          gzipOut=new GZIPOutputStream(byteOut);        }        gzipOut.write(bytes);        gzipOut.finish();        out.writeByteArray(byteOut.toByteArray());      } catch (      IOException ex) {        throw new JSONException(\"write gzipBytes error\",ex);      } finally {        IOUtils.close(gzipOut);      }    } else     if (\"hex\".equals(format)) {      out.writeHex(bytes);    } else {      out.writeByteArray(bytes);    }    return;  }  writeWithFormatCollection(object,format);}"
        }
    ],
    "file_name": null
}