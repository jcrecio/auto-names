{
    "original": {
        "method_name": "invoke",
        "code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    if (returnType != void.class) {      throw new JSONException(\"illegal setter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (!name.startsWith(\"set\")) {        throw new JSONException(\"illegal setter\");      }      name=name.substring(3);      if (name.length() == 0) {        throw new JSONException(\"illegal setter\");      }      name=Character.toLowerCase(name.charAt(0)) + name.substring(1);    }    map.put(name,args[0]);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (name.startsWith(\"get\")) {        name=name.substring(3);        if (name.length() == 0) {          throw new JSONException(\"illegal getter\");        }        name=Character.toLowerCase(name.charAt(0)) + name.substring(1);      } else       if (name.startsWith(\"is\")) {        name=name.substring(2);        if (name.length() == 0) {          throw new JSONException(\"illegal getter\");        }        name=Character.toLowerCase(name.charAt(0)) + name.substring(1);      } else       if (name.startsWith(\"hashCode\")) {        return this.hashCode();      } else       if (name.startsWith(\"toString\")) {        return this.toString();      } else {        throw new JSONException(\"illegal getter\");      }    }    Object value=map.get(name);    return TypeUtils.cast(value,method.getGenericReturnType(),ParserConfig.getGlobalInstance());  }  throw new UnsupportedOperationException(method.toGenericString());}",
        "extraction_name": null,
        "predictions": [
            "invokeMethod",
            "invokeMethod"
        ],
        "similarities": [
            0.6972011615087589,
            0.6972011615087589
        ],
        "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONObject.invoke.Original.java"
    },
    "extractions": [
        {
            "method_name": "invoke",
            "code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    if (returnType != void.class) {      throw new JSONException(\"illegal setter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (!name.startsWith(\"set\")) {        throw new JSONException(\"illegal setter\");      }      name=name.substring(3);      if (name.length() == 0) {        throw new JSONException(\"illegal setter\");      }      name=Character.toLowerCase(name.charAt(0)) + name.substring(1);    }    map.put(name,args[0]);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    return invoke_extraction_2(method,name);  }  throw new UnsupportedOperationException(method.toGenericString());}",
            "extraction_name": "Extraction1",
            "prediction": "getValue",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONObject.invoke.Extraction1.java",
            "updated_code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    if (returnType != void.class) {      throw new JSONException(\"illegal setter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    if (name == null) {      name=method.getName();      if (!name.startsWith(\"set\")) {        throw new JSONException(\"illegal setter\");      }      name=name.substring(3);      if (name.length() == 0) {        throw new JSONException(\"illegal setter\");      }      name=Character.toLowerCase(name.charAt(0)) + name.substring(1);    }    map.put(name,args[0]);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    return getValue(method,name);  }  throw new UnsupportedOperationException(method.toGenericString());}"
        },
        {
            "method_name": "invoke",
            "code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    invoke_extraction_1(method,args,returnType);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    return invoke_extraction_2(method,name);  }  throw new UnsupportedOperationException(method.toGenericString());}",
            "extraction_name": "Extraction2",
            "prediction": "setValue",
            "similarity": null,
            "file_name": "fastjson.src.main.java.com.alibaba.fastjson.JSONObject.invoke.Extraction2.java",
            "updated_code": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Class<?>[] parameterTypes=method.getParameterTypes();  if (parameterTypes.length == 1) {    if (method.getName().equals(\"equals\")) {      return this.equals(args[0]);    }    Class<?> returnType=method.getReturnType();    setValue(method,args,returnType);    return null;  }  if (parameterTypes.length == 0) {    Class<?> returnType=method.getReturnType();    if (returnType == void.class) {      throw new JSONException(\"illegal getter\");    }    String name=null;    JSONField annotation=TypeUtils.getAnnotation(method,JSONField.class);    if (annotation != null) {      if (annotation.name().length() != 0) {        name=annotation.name();      }    }    return getValue(method,name);  }  throw new UnsupportedOperationException(method.toGenericString());}"
        }
    ],
    "file_name": null
}